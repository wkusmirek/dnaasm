# -*- mode: Python; -*- scons script

## @file install/console_application/SConscript
#  @brief scons build for deb package building (console application)

import os, platform, shutil, re

#if you change this paths, change also values in gen_postinst function
bins_path = '/usr/local/bin'
libs_path = '/usr/local/lib/dnaasm'

Import('env')
Import('BOOST_LIB_LINUX')
Import('BOOST_VER_MAJOR')
Import('BOOST_VER_MINOR')
Import('DNAASM_NAME')
Import('DNAASM_VER_MAJOR')
Import('DNAASM_VER_MINOR')
Import('DNAASM_VER_COMPILATION')
Import('DNAASM_VER_INSTALL')


dnaasm_ver = DNAASM_VER_MAJOR + '.' + DNAASM_VER_MINOR
dnaasm_full_ver = dnaasm_ver + '.' + DNAASM_VER_COMPILATION + DNAASM_VER_INSTALL

envsys = Environment(ENV = {'PATH' : os.environ['PATH']})

short_description = """This application is a genome assembler for next generation sequencing and ONT data."""

def gen_postinst(path):
    """ creates script to run after instalation """
    print 'creating postinst script...'
    content = (
        '#!/bin/sh \n'
        'chmod 777 /usr/local/bin/dnaasm \n'
        'echo "/usr/local/lib/dnaasm" > /etc/ld.so.conf.d/dnaasm.conf \n'
        '/sbin/ldconfig \n')
    # 'export LD_LIBRARY_PATH=/usr/local/lib/dnaasm:${LD_LIBRARY_PATH} is not working in postinst content!!!
    postinst = open(path + '/postinst', 'w')
    postinst.write(content)
    postinst.close()

def build_deb_package( machine ):
    os.makedirs('./debian/DEBIAN');
    file=open('./debian/DEBIAN/control','w')
    file.write(
        'Package: dnaasm.console.application \n'
        'Version: ' + dnaasm_full_ver +'\n'
        'Section: base \n'
        'Priority: optional \n'
        'Architecture: amd64 \n'
        'Maintainer: Robert M. Nowak <rno@o2.pl>\n'
        'Description: dnaasm - assembler for DNA \n'
        ' genome assembler for next generation sequencing and ONT data.\n')
    file.close()

    os.makedirs('./debian' + libs_path)
    os.makedirs('./debian' + bins_path)

    # copy cpp libraries
    print './debian' + libs_path
    CPP_LIBRARIES = ['libdnaasm_common.so',
                     'libdnaasm_dbj.so',
                     'libdnaasm_olc.so',
                     'libdnaasm_scfr.so',
                     'libdnaasm_bst.so',
                     'libdnaasm.so']
    for cpp_lib in CPP_LIBRARIES:
        shutil.copyfile('../../cpp/lib/' + cpp_lib, './debian' + libs_path + '/' + cpp_lib)
    print 'cpp libraries copied'

    # copy boost dependencies
    print './debian' + libs_path
    BOOST_DEPENDENCIES = ['libboost_system.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_iostreams.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_regex.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_thread.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_filesystem.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_log.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_chrono.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_date_time.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_atomic.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0']
    for dep in BOOST_DEPENDENCIES:
        shutil.copyfile(BOOST_LIB_LINUX + '/' + dep, './debian' + libs_path + '/' + dep)
    print 'boost dependencies copied'

    # copy dnaasm executable files
    print './debian' + bins_path
    DNAASM_EXECUTABLE_FILES = ['dnaasm']
    for exe in DNAASM_EXECUTABLE_FILES:
        shutil.copyfile('../../cpp/' + exe, './debian' + bins_path + '/' + exe)
    print 'dnaasm executable files copied'

    # generate postinst script
    gen_postinst('./debian/DEBIAN')
    os.system('chmod 775 ./debian/DEBIAN/postinst')

    # create package
    os.system('dpkg-deb --build debian')
    shutil.move('debian.deb',DNAASM_NAME + '_'+ dnaasm_full_ver + '_'+machine+'.deb')
    print 'OK package Linux'
    return

if(platform.system() == 'Linux'):
    build_deb_package( 'i386' )
    shutil.rmtree('debian')
    build_deb_package( 'amd64' )
    shutil.rmtree('debian')
else:
    print 'not supported yet'
