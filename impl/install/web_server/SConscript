# -*- mode: Python; -*- scons script

## @file install/web_server/SConscript
#  @brief scons build for deb package building (web server)

import os, platform, shutil, re

postinst_path = '/var/srv/dnaasm/postinst'
srv_path = '/var/srv/dnaasm'    #if you change this value, change also values in runsrv.sh and syncdb.sh
client_path = '/var/www/dnaasm'

Import('env')
Import('BOOST_LIB_LINUX')
Import('BOOST_VER_MAJOR')
Import('BOOST_VER_MINOR')
Import('DNAASM_NAME')
Import('DNAASM_VER_MAJOR')
Import('DNAASM_VER_MINOR')
Import('DNAASM_VER_COMPILATION')
Import('DNAASM_VER_INSTALL')


dnaasm_ver = DNAASM_VER_MAJOR + '.' + DNAASM_VER_MINOR
dnaasm_full_ver = dnaasm_ver + '.' + DNAASM_VER_COMPILATION + DNAASM_VER_INSTALL

envsys = Environment(ENV = {'PATH' : os.environ['PATH']})

short_description = """This application is a genome assembler for next generation sequencing and ONT data."""

def gen_postinst(path):
    """ creates script to run after instalation """
    print 'creating postinst script...'
    content = (
        '#!/bin/sh \n'
        'pip3 install -r ' + postinst_path + '/pip_prod.requirements \n'
        'chmod +x ' + postinst_path + '/syncdb.sh \n'
        '' + postinst_path + '/syncdb.sh \n'
        'chmod +x ' + postinst_path + '/runlighttpd.sh \n'
        '' + postinst_path + '/runlighttpd.sh \n'
        'chmod +x ' + postinst_path + '/runsrv.sh \n'
        '' + postinst_path + '/runsrv.sh \n')
    postinst = open(path + '/postinst', 'w')
    postinst.write(content)
    postinst.close()

def build_deb_package( machine ):
    os.makedirs('./debian/DEBIAN');
    file=open('./debian/DEBIAN/control','w')
    file.write(
        'Package: dnaasm.web.server \n'
        'Version: ' + dnaasm_full_ver +'\n'
        'Section: base \n'
        'Priority: optional \n'
        'Architecture: amd64 \n'
        'Depends:'
        ' lighttpd (>= 1.4.33-1),'
        ' python3-dev (>=3.4.0),'
        ' python3-pip (>= 1.5.4),'
        ' postgresql-9.4 (>= 9.4.3) | postgresql-9.5 | postgresql-9.6,'
        ' postgresql-server-dev-9.4 (>= 9.4.8) | postgresql-server-dev-9.5 (>=9.5.10) | postgresql-server-dev-9.6 (>=9.6.6)\n'
        'Maintainer: Robert M. Nowak <rno@o2.pl>\n'
        'Description: dnaasm - assembler for DNA \n'
        ' genome assembler for next generation sequencing, using de Bruijn graph.\n')
    file.close()

    # copy build_web and client
    shutil.copytree('../../build_web', './debian' + srv_path + '/build_web')
    shutil.copytree('../../client', './debian' + client_path + '/client')

    # copy cpp libraries
    os.mkdir('./debian' + srv_path + '/cpp')
    print './debian' + srv_path + '/cpp'
    CPP_LIBRARIES = ['libdnaasm_common.so',
                     'libdnaasm_dbj.so',
                     'libdnaasm_olc.so',
                     'libdnaasm_scfr.so',
                     'libdnaasm_bst.so',
                     'libdnaasm.so',
                     'libdnaasmpy.so']
    for cpp_lib in CPP_LIBRARIES:
        shutil.copyfile('../../cpp/lib/' + cpp_lib, './debian' + srv_path + '/cpp/' + cpp_lib)
    print 'cpp libraries copied'

    # copy boost dependencies
    os.mkdir('./debian' + srv_path + '/libs')
    print './debian' + srv_path + '/libs'
    BOOST_DEPENDENCIES = ['libboost_system.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_python3.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_regex.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_thread.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_filesystem.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_log.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_chrono.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_date_time.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_iostreams.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0',
                          'libboost_atomic.so.' + BOOST_VER_MAJOR + '.' + BOOST_VER_MINOR + '.0']

    for dep in BOOST_DEPENDENCIES:
        shutil.copyfile(BOOST_LIB_LINUX + '/' + dep, './debian' + srv_path + '/libs/' + dep)
    print 'boost dependencies copied'

    # copy postinst scripts
    os.mkdir('./debian' + postinst_path)
    shutil.copyfile('../../pip_prod.requirements', './debian' + postinst_path + '/pip_prod.requirements')
    shutil.copyfile('runlighttpd.sh', './debian' + postinst_path + '/runlighttpd.sh')
    shutil.copyfile('runsrv.sh', './debian' + postinst_path + '/runsrv.sh')
    shutil.copyfile('syncdb.sh', './debian' + postinst_path + '/syncdb.sh')

    # copy lighttpd.conf
    os.mkdir('./debian/etc')
    os.mkdir('./debian/etc/lighttpd')
    shutil.copyfile('lighttpd.conf', './debian/etc/lighttpd/lighttpd.conf')

    # generate postinst script
    gen_postinst('./debian/DEBIAN')
    os.system('chmod 775 ./debian/DEBIAN/postinst')

    # create package
    os.system('dpkg-deb --build debian')
    shutil.move('debian.deb',DNAASM_NAME + '_'+ dnaasm_full_ver + '_'+machine+'.deb')
    print 'OK package Linux'
    return

if(platform.system() == 'Linux'):
    build_deb_package( 'i386' )
    shutil.rmtree('debian')
    build_deb_package( 'amd64' )
    shutil.rmtree('debian')
else:
    print 'not supported yet'
