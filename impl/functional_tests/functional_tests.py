# -*- coding=utf-8 -*-
"""functional testing for dnaasm web application"""

import sys
import os
import time
import unittest
import splinter
from splinter import Browser
from splinter.exceptions import DriverNotFoundError

## @brief test-cases
class TestFunctionalDnaasm(unittest.TestCase):
    
    ## Browser used for testing - default Google Chrome
    browser = ''
    admin_user = ''
    admin_user_password = ''

    @classmethod
    def setUpClass(cls):
        pass

    @classmethod
    def tearDownClass(self):
        pass

    def setUp(self):  #for each test case a new, empty functional_test_user
        self.browser.reload()

        #new user
        self.waitForElement('showNewUserWindowButton')
        self.browser.find_by_id('showNewUserWindowButton').click()
        time.sleep(1)
        self.browser.find_by_id('addUserUsername').fill('functional_test_user')
        self.browser.find_by_id('addUserPassword').fill('functional_test_user_password')
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        alert.accept()
        self.browser.reload()

        #log in
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        time.sleep(2)

    def tearDown(self):
        try:
            alert = self.browser.get_alert()
            alert.accept()
        except:
            pass
        self.deleteUser('functional_test_user', 'functional_test_user_password')
        self.deleteUser('functional_test_user2', 'functional_test_user_password2')
        self.deleteUser('functional_test_user3', 'functional_test_user_password3')

    def deleteUser(self, username, password):
        self.browser.reload()
        self.waitForElement('showLoginWindowButton')
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill(username)
        self.browser.find_by_id('password').fill(password)
        self.browser.find_by_id('loginButton').click()
        time.sleep(1)
        try:
            alert = self.browser.get_alert()
            alert.accept()
            self.browser.reload()
            return
        except:
            pass
        time.sleep(1)
        self.clickIdLink('userSettingsButton')
        self.browser.find_by_id('password').first.fill(password)
        self.browser.find_by_id('deleteUserButton').click()
        time.sleep(0.5)

    def clickCssLink(self, ident, interval=0.1, maxTime=2):
        """Searches for an css and clicks it"""
        browser = self.browser
        counter = 0
        link = None
        while counter < maxTime:
            try:
                browser.find_by_css(ident).first.click()
                return
            except:
                time.sleep(interval)
                counter += interval
        link = browser.find_by_css(ident)
        self.assertGreaterEqual(len(link), 1, "Cannot find link with ident='{css}' in {brow}".format(css=ident, brow = 'browser'))
        link.first.click()

    def clickIdLink(self, ident, interval=0.1, maxTime=2):
        """Searches for an identifier and clicks it"""
        browser = self.browser
        counter = 0
        link = None
        while counter < maxTime:
            try:
                browser.find_by_id(ident).first.click()
                return

            except:
                time.sleep(interval)
                counter += interval
        link = browser.find_by_id(ident)
        self.assertGreaterEqual(len(link), 1, "Cannot find link with ident='{css}' in {brow}".format(css=ident, brow = 'browser'))
        link.first.click()

    def loginAsAdminUser(self):
        self.browser.reload() 
        time.sleep(1)
        self.browser.find_by_id('showLoginWindowButton').first.click()
        time.sleep(1)
        self.browser.find_by_id('username').fill(self.admin_user)
        self.browser.find_by_id('password').fill(self.admin_user_password)
        self.browser.find_by_id('loginButton').click()
        time.sleep(2)

    def waitForElement(self, ident, interval=0.1, maxTime=2):
        """Waits for element"""
        browser = self.browser
        counter = 0
        while counter < maxTime:
            counter += interval
            time.sleep(interval)
            if browser.is_element_present_by_id(ident):
                return



    def test01AnyAnswer(self):
        """tests if the application is loaded"""
        self.assertTrue(len(self.browser.html) > 0)

    def test02ProperTitle(self):
        """tests if the web page title is correct"""
        title = self.browser.title
        if not isinstance(title, str):
            title = title.decode()
        self.assertEqual(title, 'DnaAssembler')

    def test03UserTabTranslations(self):
        """test if translations for user tabs works"""
        self.clickCssLink('#a_lang_en')
        time.sleep(2)
        self.assertEqual(self.browser.find_by_id('a_user_tab_ASSEMBLING').first.text, u"Assembling")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SCAFFOLDING').first.text, u"Scaffolding")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SETTINGS').first.text, u"Settings")
        self.assertEqual(self.browser.find_by_id('a_user_tab_FILES').first.text, u"Files")
        self.assertEqual(self.browser.find_by_id('a_user_tab_ALIGNMENT').first.text, u"Alignment")
        self.assertEqual(self.browser.find_by_id('a_user_tab_ASSEMBLING').first['title'], u"Click to view bookmark with assembling")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SCAFFOLDING').first['title'], u"Click to view bookmark with scaffolding")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SETTINGS').first['title'], u"Click to view bookmark with settings")
        self.assertEqual(self.browser.find_by_id('a_user_tab_FILES').first['title'], u"Click to view bookmark with files")
        self.assertEqual(self.browser.find_by_id('a_user_tab_ALIGNMENT').first['title'], u"Click to view bookmark with alignment")

        self.clickCssLink('#a_lang_pl')
        time.sleep(2)
        self.assertEqual(self.browser.find_by_id('a_user_tab_ASSEMBLING').first.text, u"Generacja kontigów")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SCAFFOLDING').first.text, u"Generacja skafoldów")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SETTINGS').first.text, u"Ustawienia")
        self.assertEqual(self.browser.find_by_id('a_user_tab_FILES').first.text, u"Pliki")
        self.assertEqual(self.browser.find_by_id('a_user_tab_ALIGNMENT').first.text, u"Uliniowienie")
        self.assertEqual(self.browser.find_by_id('a_user_tab_ASSEMBLING').first['title'], u"Kliknij, aby zobaczyć zakładkę z generacją kontigów")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SCAFFOLDING').first['title'], u"Kliknij, aby zobaczyć zakładkę z generacją skafoldów")
        self.assertEqual(self.browser.find_by_id('a_user_tab_SETTINGS').first['title'], u"Kliknij, aby zobaczyć zakładkę z ustawieniami")
        self.assertEqual(self.browser.find_by_id('a_user_tab_FILES').first['title'], u"Kliknij, aby zobaczyć zakładkę z plikami")
        self.assertEqual(self.browser.find_by_id('a_user_tab_ALIGNMENT').first['title'], u"Kliknij, aby zobaczyć zakładkę z uliniowieniem")

    def test04UsersLoginLogout(self):
        """test users login/logout"""
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text('logged in as: functional_test_user')), 1)
        self.browser.find_by_id('logoutButton').first.click()
        self.assertEqual(len(self.browser.find_by_text('logged in as: functional_test_user')), 0)
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password2')
        self.browser.find_by_id('loginButton').click()
        time.sleep(1.5)
        alert = self.browser.get_alert()
        alert.accept()
        time.sleep(1.5)
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        self.assertEqual(len(self.browser.find_by_text('logged in as: functional_test_user')), 1)
        self.browser.reload()
        self.assertEqual(len(self.browser.find_by_text('logged in as: functional_test_user')), 0)
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        self.assertEqual(len(self.browser.find_by_text('logged in as: functional_test_user')), 1)
        time.sleep(1)

    def test05UsersAndLoginTranslations(self):
        """test users and login page translations"""
        self.clickCssLink('#a_lang_en')
        self.assertEqual(self.browser.find_by_id('logoutButton').first.text, u'log off')
        self.assertEqual(self.browser.find_by_id('userSettingsButton').first['title'], u'Click to view (change) user settings')
        self.browser.reload()
        self.clickCssLink('#a_lang_en')
        self.browser.find_by_id('showNewUserWindowButton').click()
        self.assertEqual(self.browser.find_by_id('addUserUsername').first['title'], u"Enter username for new user")
        self.assertEqual(self.browser.find_by_id('addUserPassword').first['title'], u"Enter new user password")
        self.assertEqual(self.browser.find_by_id('addUserPasswordConfirmation').first['title'], u"Enter new user password again")
        self.assertEqual(self.browser.find_by_id('addUserMail').first['title'], u"Enter new user email address (optional)")
        self.assertEqual(self.browser.find_by_id('addUserSubmitButton').first['title'], u"Click to create new user")
        self.browser.find_by_id('addUserUsername').fill('functional_test_user')
        self.browser.find_by_id('addUserPassword').fill('functional_test_user_password')
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password2')
        self.assertEqual(self.browser.find_by_id('addUserSubmitButton').text, u'ADD')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Password error, change password confirmation!!!', alert.text)
        alert.accept()
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual('Error, user with this username exists', alert.text)
        alert.accept()
        self.browser.find_by_id('addUserUsername').fill('functional_test_user2')
        self.browser.find_by_id('addUserPassword').fill('functional_test_user_password2')
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password2')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'User has been added successfully', alert.text)
        alert.accept()
        self.browser.reload()
        self.clickCssLink('#a_lang_en')
        #log in
        time.sleep(1)
        self.browser.find_by_id('showLoginWindowButton').first.click()
        time.sleep(0.5)
        self.assertEqual(self.browser.find_by_id('loginButton').first.text, u'SIGN IN')
        self.assertEqual(self.browser.find_by_id('username').first['title'], u"Enter username")
        self.assertEqual(self.browser.find_by_id('password').first['title'], u"Enter password")
        self.assertEqual(self.browser.find_by_id('loginButton').first['title'], u"Click to log in")
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password2')
        self.browser.find_by_id('loginButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual('Invalid username or password', alert.text)
        alert.accept()

        # pl
        self.browser.reload()
        time.sleep(1)
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        time.sleep(1)
        self.clickCssLink('#a_lang_pl')
        self.assertEqual(self.browser.find_by_id('logoutButton').first.text, u'wyloguj')
        self.assertEqual(self.browser.find_by_id('userSettingsButton').first['title'], u'Kliknij, aby zobaczyć (zmienić) ustawienia użytkownika')
        self.browser.reload()
        self.clickCssLink('#a_lang_pl')
        self.browser.find_by_id('showNewUserWindowButton').click()
        self.assertEqual(self.browser.find_by_id('addUserUsername').first['title'], u"Wprowadź nazwę użytkownika dla nowego użytkownika")
        self.assertEqual(self.browser.find_by_id('addUserPassword').first['title'], u"Wprowadź hasło dla nowego użytkownika")
        self.assertEqual(self.browser.find_by_id('addUserPasswordConfirmation').first['title'], u"Wprowadź ponownie hasło dla nowego użytkownika")
        self.assertEqual(self.browser.find_by_id('addUserMail').first['title'], u"Wprowadź adres e-mail dla nowego użytkownika (opcjonalny)")
        self.assertEqual(self.browser.find_by_id('addUserSubmitButton').first['title'], u"Kliknij, aby dodać nowego użytkownika")
        self.browser.find_by_id('addUserUsername').fill('functional_test_user')
        self.browser.find_by_id('addUserPassword').fill('functional_test_user_password')
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password2')
        self.assertEqual(self.browser.find_by_id('addUserSubmitButton').text, u'DODAJ')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Błąd hasła, zmień potwierdzenie hasła!!!', alert.text)
        alert.accept()
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Błąd, użytkownik o podanym loginie istnieje', alert.text)
        alert.accept()
        self.browser.find_by_id('addUserUsername').fill('functional_test_user3')
        self.browser.find_by_id('addUserPassword').fill('functional_test_user_password3')
        self.browser.find_by_id('addUserPasswordConfirmation').fill('functional_test_user_password3')
        self.browser.find_by_id('addUserSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Użytkownik został poprawnie dodany', alert.text)
        alert.accept()
        self.browser.reload()
        self.clickCssLink('#a_lang_pl')
        #log in
        time.sleep(1)
        self.browser.find_by_id('showLoginWindowButton').first.click()
        time.sleep(0.5)
        self.assertEqual(self.browser.find_by_id('loginButton').first.text, u'ZALOGUJ')
        self.assertEqual(self.browser.find_by_id('username').first['title'], u"Wprowadź nazwę użytkownika")
        self.assertEqual(self.browser.find_by_id('password').first['title'], u"Wprowadź hasło")
        self.assertEqual(self.browser.find_by_id('loginButton').first['title'], u"Kliknij, aby zalogować się do aplikacji")
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password2')
        self.browser.find_by_id('loginButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Niewłaściwa nazwa użytkownika lub hasło', alert.text)
        alert.accept()

    def test06AssemblingTranslations(self):
        """test 'assembling' page translations"""
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.waitForElement('add_i1_1_option_functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskName').fill('testOut.fa')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)

        self.clickCssLink('#a_lang_en')
        self.browser.find_by_id('addTaskButton').click()
        self.waitForElement('add_i1_1_option_functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskName').fill('testOut.fa')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Incorrect task name, file with this name exists.', alert.text)
        alert.accept()
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Assembling')), 1)
        self.assertEqual(len(self.browser.find_by_text('id')), 1)
        self.assertEqual(len(self.browser.find_by_text('task name')), 1)
        self.assertEqual(len(self.browser.find_by_text('input file 1 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('input file 2 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('input file 1 (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('input file 2 (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('algorithm for paired reads')), 1)
        self.assertEqual(len(self.browser.find_by_text('k')), 1)
        self.assertEqual(len(self.browser.find_by_text('original genome length')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size mean for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size std dev for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size mean for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size std dev for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('quality threshold')), 1)
        self.assertEqual(len(self.browser.find_by_text('k-mer coverage threshold for occurrence table')), 1)
        self.assertEqual(len(self.browser.find_by_text('single graph edges coverage threshold')), 1)
        self.assertEqual(len(self.browser.find_by_text('begin of interval of paired reads threshold for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('end of interval of paired reads threshold for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('begin of interval of paired reads threshold for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('end of interval of paired reads threshold for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('correcting errors in graph')), 1)
        self.assertEqual(len(self.browser.find_by_text('input provide time')), 1)
        self.assertEqual(len(self.browser.find_by_text('output provide time')), 1)
        self.assertEqual(len(self.browser.find_by_text('see result')), 1)
        self.assertEqual(len(self.browser.find_by_text('download result')), 1)
        self.assertEqual(len(self.browser.find_by_text('delete')), 1)
        self.assertEqual(len(self.browser.find_by_text('break')), 1)
        self.assertEqual(self.browser.find_by_id('addTaskButton').first.text, u'Add task')
        self.assertEqual(self.browser.find_by_id('addTaskButton').first['title'], u'Click to add new task')
        self.assertEqual(self.browser.find_by_id('deleteTaskButton').first['title'], u'Click to delete this task')
        self.assertEqual(self.browser.find_by_id('breakTaskButton').first['title'], u'Click to break this task')
        self.assertEqual(self.browser.find_by_id('updateTaskButton').first.text, u'Update task')
        self.assertEqual(self.browser.find_by_id('updateTaskButton').first['title'], u'Click to update this task')
        self.assertEqual(self.browser.find_by_id('seeAssemblyTaskResultButton').first['title'], u'Click to see task result')
        self.assertEqual(self.browser.find_by_id('downloadAssemblyTaskResultButton').first['title'], u'Click to download task result')

        self.browser.find_by_id('addTaskButton').click()
        self.assertEqual(self.browser.find_by_id('addTask_enterName').first.text, u'task name:')

        self.assertEqual(self.browser.find_by_id('addTask_enterK').first.text, u'k:')
        self.assertEqual(self.browser.find_by_id('addTask_enterGenomeLength').first.text, u'original genome length:')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeMeanInward').first.text, u'insert size mean for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeStdDevInward').first.text, u'insert size std dev for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeMeanOutward').first.text, u'insert size mean for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeStdDevOutward').first.text, u'insert size std dev for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('addTask_enterQualityThreshold').first.text, u'quality threshold:')
        self.assertEqual(self.browser.find_by_id('addTask_enterBfcounterThreshold').first.text, u'k-mer coverage threshold for occurrence table:')
        self.assertEqual(self.browser.find_by_id('addTask_enterSingleEdgeCounterThreshold').first.text, u'single graph edges coverage threshold:')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsPetThresholdFrom').first.text, u'begin of interval of paired reads threshold for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsPetThresholdTo').first.text, u'end of interval of paired reads threshold for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsMpThresholdFrom').first.text, u'begin of interval of paired reads threshold for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsMpThresholdTo').first.text, u'end of interval of paired reads threshold for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('addTask_choosePairedReadsAlgorithm').first.text, u'algorithm for paired reads:')
        self.assertEqual(self.browser.find_by_id('addTask_none').first.text, u'not using paired-end tag')
        self.assertEqual(self.browser.find_by_id('addTask_velvet').first.text, u'Velvet-Breadcrumb')
        self.assertEqual(self.browser.find_by_id('addTask_correctGraph').first.text, u'correcting errors in graph:')
        self.assertEqual(self.browser.find_by_id('addTask_inputFileComment').first.text, u'Choose input files:')
        self.assertEqual(self.browser.find_by_id('addTask_i1_1').first.text, u'input file for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('addTask_i1_2').first.text, u'input file for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('addTask_o1_1').first.text, u'input file for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('addTask_o1_2').first.text, u'input file for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyResultNotification').first.text, u'email notification:')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyShowResultUrl').first.text, u'show url to result:')
        self.assertEqual(self.browser.find_by_id('addTaskSubmitButton').first.text, u'Submit!')
        self.assertEqual(self.browser.find_by_id('addTaskName').first['title'], u'result of this task will be stored in the file which name will be same like task name')
        self.assertEqual(self.browser.find_by_id('addK').first['title'], u'the de Bruijn graph dimension')
        self.assertEqual(self.browser.find_by_id('addGenomeLength').first['title'], u'the length of the genome under investigation [bp]')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanInward').first['title'], u'the value associated with paired-end tags - mean of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevInward').first['title'], u'the value associated with paired-end tags - standard deviation of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanOutward').first['title'], u'the value associated with mate-pairs - mean of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevOutward').first['title'], u'the value associated with mate-pairs - standard deviation of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('addT').first['title'], u'the quality threshold value (0-93) for reads from FASTQ files (reads will be trimmed to first symbol with quality less than this quality threshold value)')
        self.assertEqual(self.browser.find_by_id('addBfcounterThreshold').first['title'], u'the threshold of k-mer in occurrence table (each k-mer with counter less than this threshold will not be considered)')
        self.assertEqual(self.browser.find_by_id('addSingleEdgeCounterThreshold').first['title'], u'the threshold of edge counter in single (without paired-end tags) de Bruijn graph (each edge with counter less than this threshold will be deleted from single de Bruijn graph)')
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdFrom').first['title'], u'the begin of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified edge counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph)')
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdTo').first['title'], u'the end of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified edge counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph)')
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdFrom').first['title'], u'the begin of interval of threshold of edge counter for mate-pairs (each mate-pairs increment specified edge counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph)')
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdTo').first['title'], u'the end of interval of threshold of edge counter for mate-pairs (each mate-pairs tags increment specified edge counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph)')
        self.assertEqual(self.browser.find_by_id('addPairedReadsAlgorithm').first['title'], u"Choose '-' if paired-end tags shouldn't be considered until assembling process, 'Velvet-Breadcrumb' otherwise. Option '-' can also be used for paired reads - then each read will be treated independently. Option 'Velvet-Breadcrumb' means that in assembling process Breadcrumb algorithm from Velvet assembler will be used.")
        self.assertEqual(self.browser.find_by_id('addCorrect').first['title'], u'check, if errors can appear in a set of input reads')
        self.assertEqual(self.browser.find_by_id('add_i1_1').first['title'], u'file with reads for first end (if reads are paired and each end is stored in separate file) or file with all reads (if reads are not paired or if reads are paired and stored interleaved in one file). Inward orientation.')
        self.assertEqual(self.browser.find_by_id('add_i1_2').first['title'], u'file with reads for second end (if reads are paired and each end is stored in separete file). Inward orientation.')
        self.assertEqual(self.browser.find_by_id('add_o1_1').first['title'], u'file with reads for first end (if reads are paired and each end is stored in separate file) or file with all reads (if reads are not paired or if reads are paired and stored interleaved in one file). Outward orientation.')
        self.assertEqual(self.browser.find_by_id('add_o1_2').first['title'], u'file with reads for second end (if reads are paired and each end is stored in separete file). Outward orientation.')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyResultNotificationCheckbox').first['title'], u'check, if you are submitting a long task and would like to be informed by email when it finishes')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyShowResultUrlCheckbox').first['title'], u'check, if you want url to result')
        self.assertEqual(self.browser.find_by_id('addTask_generateScaffoldCheckbox').first['title'], u'generate scaffold from products of assembling and supplied long/nanopore reads')
        self.assertEqual(self.browser.find_by_id('addTaskSubmitButton').first['title'], u'Click to submit parameters and add a new task')
        self.browser.find_by_id('addTaskButton').click()

        self.browser.find_by_id('updateTaskButton').click()
        self.assertEqual(self.browser.find_by_id('updateTask_enterK').first.text, u'k:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterGenomeLength').first.text, u'original genome length:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeMeanInward').first.text, u'insert size mean for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeStdDevInward').first.text, u'insert size std dev for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeMeanOutward').first.text, u'insert size mean for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeStdDevOutward').first.text, u'insert size std dev for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterQualityThreshold').first.text, u'quality threshold:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterBfcounterThreshold').first.text, u'k-mer coverage threshold for occurrence table:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterSingleEdgeCounterThreshold').first.text, u'single graph edges coverage threshold:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsPetThresholdFrom').first.text, u'begin of interval of paired reads threshold for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsPetThresholdTo').first.text, u'end of interval of paired reads threshold for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsMpThresholdFrom').first.text, u'begin of interval of paired reads threshold for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsMpThresholdTo').first.text, u'end of interval of paired reads threshold for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('updateTask_choosePairedReadsAlgorithm').first.text, u'algorithm for paired reads:')
        self.assertEqual(self.browser.find_by_id('updateTask_none').first.text, u'not using paired-end tag')
        self.assertEqual(self.browser.find_by_id('updateTask_velvet').first.text, u'Velvet-Breadcrumb')
        self.assertEqual(self.browser.find_by_id('updateTask_correctGraph').first.text, u'correcting errors in graph:')
        self.assertEqual(self.browser.find_by_id('updateTask_i1_1').first.text, u'input file for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('updateTask_i1_2').first.text, u'input file for paired-end tags:')
        self.assertEqual(self.browser.find_by_id('updateTask_o1_1').first.text, u'input file for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('updateTask_o1_2').first.text, u'input file for mate-pairs:')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyResultNotification').first.text, u'email notification:')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyShowResultUrl').first.text, u'show url to result:')
        self.assertEqual(self.browser.find_by_id('updateTaskSubmitButton').first.text, u'Submit!')
        self.assertEqual(self.browser.find_by_id('updateK').first['title'], u'the de Bruijn graph dimension')
        self.assertEqual(self.browser.find_by_id('updateGenomeLength').first['title'], u'the length of the genome under investigation [bp]')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeMeanInward').first['title'], u'the value associated with paired-end tags - mean of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeStdDevInward').first['title'], u'the value associated with paired-end tags - standard deviation of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeMeanOutward').first['title'], u'the value associated with mate-pairs - mean of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeStdDevOutward').first['title'], u'the value associated with mate-pairs - standard deviation of distance between each pair of reads')
        self.assertEqual(self.browser.find_by_id('updateT').first['title'], u'the quality threshold value (0-93) for reads from FASTQ files (reads will be trimmed to first symbol with quality less than this quality threshold value)')
        self.assertEqual(self.browser.find_by_id('updateBfcounterThreshold').first['title'], u'the threshold of k-mer in occurrence table (each k-mer with counter less than this threshold will not be considered)')
        self.assertEqual(self.browser.find_by_id('updateSingleEdgeCounterThreshold').first['title'], u'the threshold of edge counter in single (without paired-end tags) de Bruijn graph (each edge with counter less than this threshold will be deleted from single de Bruijn graph)')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdFrom').first['title'], u'the begin of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified edge counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph)')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdTo').first['title'], u'the end of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified edge counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph)')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdFrom').first['title'], u'the begin of interval of threshold of edge counter for mate-pairs (each mate-pairs increment specified edge counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph)')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdTo').first['title'], u'the end of interval of threshold of edge counter for mate-pairs (each mate-pairs tags increment specified edge counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph)')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsAlgorithm').first['title'], u"Choose '-' if paired-end tags shouldn't be considered until assembling process, 'Velvet-Breadcrumb' otherwise. Option '-' can also be used for paired reads - then each read will be treated independently. Option 'Velvet-Breadcrumb' means that in assembling process Breadcrumb algorithm from Velvet assembler will be used.")
        self.assertEqual(self.browser.find_by_id('updateCorrect').first['title'], u'check, if errors can appear in a set of input reads')
        self.assertEqual(self.browser.find_by_id('update_i1_1').first['title'], u'file with reads for first end (if reads are paired and each end is stored in separate file) or file with all reads (if reads are not paired or if reads are paired and stored interleaved in one file). Inward orientation.')
        self.assertEqual(self.browser.find_by_id('update_i1_2').first['title'], u'file with reads for second end (if reads are paired and each end is stored in separete file). Inward orientation.')
        self.assertEqual(self.browser.find_by_id('update_o1_1').first['title'], u'file with reads for first end (if reads are paired and each end is stored in separate file) or file with all reads (if reads are not paired or if reads are paired and stored interleaved in one file). Outward orientation.')
        self.assertEqual(self.browser.find_by_id('update_o1_2').first['title'], u'file with reads for second end (if reads are paired and each end is stored in separete file). Outward orientation.')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyResultNotificationCheckbox').first['title'], u'check, if you are submitting a long task and would like to be informed by email when it finishes')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyShowResultUrlCheckbox').first['title'], u'check, if you want url to result')
        self.assertEqual(self.browser.find_by_id('addTask_generateScaffoldCheckbox').first['title'], u'generate scaffold from products of assembling and supplied long/nanopore reads')
        self.assertEqual(self.browser.find_by_id('updateTaskSubmitButton').first['title'], u'Click to submit parameters and update this task')
        self.browser.find_by_id('updateTaskSubmitButton').click()

        self.clickCssLink('#a_lang_pl')
        self.browser.find_by_id('addTaskButton').click()
        self.waitForElement('add_i1_1_option_functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskName').fill('testOut.fa')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Niewłaściwa nazwa zadania, plik o takiej nazwie już istnieje.', alert.text)
        alert.accept()
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Generacja kontigów')), 1)
        self.assertEqual(len(self.browser.find_by_text('id')), 1)
        self.assertEqual(len(self.browser.find_by_text('nazwa zadania')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 1 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 2 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 1 (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 2 (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('algorytm wykorzystywania sparowanych końców')), 1)
        self.assertEqual(len(self.browser.find_by_text('k')), 1)
        self.assertEqual(len(self.browser.find_by_text('oryginalna długość genomu')), 1)
        self.assertEqual(len(self.browser.find_by_text('moda odległości pomiędzy odczytami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('odchylenie standardowe odległości pomiędzy odczytami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('moda odległości pomiędzy odczytami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('odchylenie standardowe odległości pomiędzy odczytami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('próg jakości')), 1)
        self.assertEqual(len(self.browser.find_by_text('próg pokrycia k-meru w tabeli wystąpień')), 1)
        self.assertEqual(len(self.browser.find_by_text('próg pokrycia krawędzi dla pojedyńczego grafu')), 1)
        self.assertEqual(len(self.browser.find_by_text('początek przedziału progu połączeń sparowanymi końcami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('koniec przedziału progu połączeń sparowanymi końcami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('początek przedziału progu połączeń sparowanymi końcami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('koniec przedziału progu połączeń sparowanymi końcami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('poprawianie błędów w grafie')), 1)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia danych wejściowych')), 1)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia wyniku')), 1)
        self.assertEqual(len(self.browser.find_by_text('zobacz wynik')), 1)
        self.assertEqual(len(self.browser.find_by_text('pobierz wynik')), 1)
        self.assertEqual(len(self.browser.find_by_text('usuń')), 1)
        self.assertEqual(len(self.browser.find_by_text('zatrzymaj')), 1)
        self.assertEqual(self.browser.find_by_id('addTaskButton').first.text, u'Dodaj zadanie')
        self.assertEqual(self.browser.find_by_id('addTaskButton').first['title'], u'Kliknij, aby dodać nowe zadanie')
        self.assertEqual(self.browser.find_by_id('deleteTaskButton').first['title'], u'Kliknij, aby usunąć to zadanie')
        self.assertEqual(self.browser.find_by_id('breakTaskButton').first['title'], u'Kliknij, aby zatrzymać to zadanie')
        self.assertEqual(self.browser.find_by_id('updateTaskButton').first.text, u'Zaktualizuj zadanie')
        self.assertEqual(self.browser.find_by_id('updateTaskButton').first['title'], u'Kliknij, aby zmodyfikować to zadanie')
        self.assertEqual(self.browser.find_by_id('seeAssemblyTaskResultButton').first['title'], u'Kliknij, aby zobaczyć wynik zadania')
        self.assertEqual(self.browser.find_by_id('downloadAssemblyTaskResultButton').first['title'], u'Kliknij, aby pobrać wynik zadania')

        self.browser.find_by_id('addTaskButton').click()
        self.assertEqual(self.browser.find_by_id('addTask_enterName').first.text, u'nazwa zadania:')
        self.assertEqual(self.browser.find_by_id('addTask_enterK').first.text, u'k:')
        self.assertEqual(self.browser.find_by_id('addTask_enterGenomeLength').first.text, u'oryginalna długość genomu:')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeMeanInward').first.text, u'moda odległości pomiędzy odczytami (PET):')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeStdDevInward').first.text, u'odchylenie standardowe odległości pomiędzy odczytami (PET):')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeMeanOutward').first.text, u'moda odległości pomiędzy odczytami (MP):')
        self.assertEqual(self.browser.find_by_id('addTask_enterInsertSizeStdDevOutward').first.text, u'odchylenie standardowe odległości pomiędzy odczytami (MP):')
        self.assertEqual(self.browser.find_by_id('addTask_enterQualityThreshold').first.text, u'próg jakości:')
        self.assertEqual(self.browser.find_by_id('addTask_enterBfcounterThreshold').first.text, u'próg pokrycia k-meru w tabeli wystąpień:')
        self.assertEqual(self.browser.find_by_id('addTask_enterSingleEdgeCounterThreshold').first.text, u'próg pokrycia krawędzi dla pojedyńczego grafu:')
        self.assertEqual(self.browser.find_by_id('addTask_choosePairedReadsAlgorithm').first.text, u'algorytm wykorzystywania sparowanych końców:')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsPetThresholdFrom').first.text, u'początek przedziału progu połączeń sparowanymi końcami (PET):')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsPetThresholdTo').first.text, u'koniec przedziału progu połączeń sparowanymi końcami (PET):')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsMpThresholdFrom').first.text, u'początek przedziału progu połączeń sparowanymi końcami (MP):')
        self.assertEqual(self.browser.find_by_id('addTask_enterPairedReadsMpThresholdTo').first.text, u'koniec przedziału progu połączeń sparowanymi końcami (MP):')
        self.assertEqual(self.browser.find_by_id('addTask_none').first.text, u'pomijaj sparowane końce')
        self.assertEqual(self.browser.find_by_id('addTask_velvet').first.text, u'Velvet-Breadcrumb')
        self.assertEqual(self.browser.find_by_id('addTask_correctGraph').first.text, u'poprawianie błędów w grafie:')
        self.assertEqual(self.browser.find_by_id('addTask_inputFileComment').first.text, u'Wybierz pliki wejściowe:')
        self.assertEqual(self.browser.find_by_id('addTask_i1_1').first.text, u'plik wejściowy dla sparowanych odczytów (PET):')
        self.assertEqual(self.browser.find_by_id('addTask_i1_2').first.text, u'plik wejściowy dla sparowanych odczytów (PET):')
        self.assertEqual(self.browser.find_by_id('addTask_o1_1').first.text, u'plik wejściowy dla sparowanych odczytów (MP):')
        self.assertEqual(self.browser.find_by_id('addTask_o1_2').first.text, u'plik wejściowy dla sparowanych odczytów (MP):')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyResultNotification').first.text, u'powiadomienie e-mail:')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyShowResultUrl').first.text, u'zobacz adres wyniku:')
        self.assertEqual(self.browser.find_by_id('addTaskSubmitButton').first.text, u'Zatwierdź!')
        self.assertEqual(self.browser.find_by_id('addTaskName').first['title'], u'wynik zadania zostanie zapisany do pliku o nazwie takiej samej jak nazwa zadania')
        self.assertEqual(self.browser.find_by_id('addK').first['title'], u"wymiar grafu de Bruijn'a")
        self.assertEqual(self.browser.find_by_id('addGenomeLength').first['title'], u'długość badanego genomu [bp]')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanInward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - moda odległości pomiędzy odczytami stanowiącymi jedną parę (PET)')
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevInward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - odchylenie standardowe odległości pomiędzy odczytami stanowiącymi jedną parę (PET)')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanOutward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - moda odległości pomiędzy odczytami stanowiącymi jedną parę (MP)')
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevOutward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - odchylenie standardowe odległości pomiędzy odczytami stanowiącymi jedną parę (MP)')
        self.assertEqual(self.browser.find_by_id('addT').first['title'], u'wartość progu jakości (0-93) dla odczytów z plików w formacie FASTQ (w assemblingu będą brane pod uwagę fragmenty odczytów od początku odczytu do pierwszego symbolu, którego jakość odczytu jest mniejsza niż wartość T)')
        self.assertEqual(self.browser.find_by_id('addBfcounterThreshold').first['title'], u"wartość progu występień k-meru w tablicy wystąpień (każdy k-mer z liczbą wystąpień mniejszą od tego progu nie zostanie rozpatrzony)")
        self.assertEqual(self.browser.find_by_id('addSingleEdgeCounterThreshold').first['title'], u"wartość progu wagi krawędzi w grafie de Bruijn'a nie uwzględniającym sparowanych końców (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdFrom').first['title'], u"wartość początku przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdTo').first['title'], u"wartość końca przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdFrom').first['title'], u"wartość początku przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdTo').first['title'], u"wartość końca przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('addPairedReadsAlgorithm').first['title'], u"Wybierz '-' jeśli sparowane końce nie powinny być brane pod uwagę w procesie assemblingu, w przeciwnym wypadku wybierz 'Velvet-Breadcrumb'. Opcja '-' może zostać również użyta dla sparowanych odczytów - wówczas każdy odczyt zostanie potraktowany niezależnie. Opcja 'Velvet-Breadcrumb' oznacza, że podczas procesu assemblingu zostanie wykorzystany algorytm Breadcrumb z assemblera Velvet.")
        self.assertEqual(self.browser.find_by_id('addCorrect').first['title'], u'zaznacz, jeżeli w wejściowym zestawie odczytów mogą znajdować się błędy')
        self.assertEqual(self.browser.find_by_id('add_i1_1').first['title'], u'plik z odczytami dla pierwszego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku) lub plik z wszystkimi odczytami (jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku). Orientacja inward.')
        self.assertEqual(self.browser.find_by_id('add_i1_2').first['title'], u'plik z odczytami dla drugiego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku). Orientacja inward.')
        self.assertEqual(self.browser.find_by_id('add_o1_1').first['title'], u'plik z odczytami dla pierwszego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku) lub plik z wszystkimi odczytami (jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku). Orientacja outward.')
        self.assertEqual(self.browser.find_by_id('add_o1_2').first['title'], u'plik z odczytami dla drugiego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku). Orientacja outward.')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyResultNotificationCheckbox').first['title'], u'zaznacz, jeśli uruchamiasz długie zadanie i chcesz być poinformowany o jego zakończeniu')
        self.assertEqual(self.browser.find_by_id('addTask_assemblyShowResultUrlCheckbox').first['title'], u'zaznacz, jeśli chcesz zobaczyć adres wyniku')
        self.assertEqual(self.browser.find_by_id('addTask_generateScaffoldCheckbox').first['title'], u'utwórz skafoldy z wynikowych kontigów przy pomocy długich odczytów (np. PacBio/ Nanopore)')
        self.assertEqual(self.browser.find_by_id('addTaskSubmitButton').first['title'], u'Kliknij, aby zatwierdzić powyższe parametry i dodać nowe zadanie')
        self.browser.find_by_id('addTaskButton').click()

        self.browser.find_by_id('updateTaskButton').click()
        self.assertEqual(self.browser.find_by_id('updateTask_enterK').first.text, u'k:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterGenomeLength').first.text, u'oryginalna długość genomu:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeMeanInward').first.text, u'moda odległości pomiędzy odczytami (PET):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeStdDevInward').first.text, u'odchylenie standardowe odległości pomiędzy odczytami (PET):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeMeanOutward').first.text, u'moda odległości pomiędzy odczytami (MP):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterInsertSizeStdDevOutward').first.text, u'odchylenie standardowe odległości pomiędzy odczytami (MP):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterQualityThreshold').first.text, u'próg jakości:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterBfcounterThreshold').first.text, u'próg pokrycia k-meru w tabeli wystąpień:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterSingleEdgeCounterThreshold').first.text, u'próg pokrycia krawędzi dla pojedyńczego grafu:')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsPetThresholdFrom').first.text, u'początek przedziału progu połączeń sparowanymi końcami (PET):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsPetThresholdTo').first.text, u'koniec przedziału progu połączeń sparowanymi końcami (PET):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsMpThresholdFrom').first.text, u'początek przedziału progu połączeń sparowanymi końcami (MP):')
        self.assertEqual(self.browser.find_by_id('updateTask_enterPairedReadsMpThresholdTo').first.text, u'koniec przedziału progu połączeń sparowanymi końcami (MP):')
        self.assertEqual(self.browser.find_by_id('updateTask_choosePairedReadsAlgorithm').first.text, u'algorytm wykorzystywania sparowanych końców:')
        self.assertEqual(self.browser.find_by_id('updateTask_none').first.text, u'pomijaj sparowane końce')
        self.assertEqual(self.browser.find_by_id('updateTask_velvet').first.text, u'Velvet-Breadcrumb')
        self.assertEqual(self.browser.find_by_id('updateTask_correctGraph').first.text, u'poprawianie błędów w grafie:')
        self.assertEqual(self.browser.find_by_id('updateTask_i1_1').first.text, u'plik wejściowy dla sparowanych odczytów (PET):')
        self.assertEqual(self.browser.find_by_id('updateTask_i1_2').first.text, u'plik wejściowy dla sparowanych odczytów (PET):')
        self.assertEqual(self.browser.find_by_id('updateTask_o1_1').first.text, u'plik wejściowy dla sparowanych odczytów (MP):')
        self.assertEqual(self.browser.find_by_id('updateTask_o1_2').first.text, u'plik wejściowy dla sparowanych odczytów (MP):')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyResultNotification').first.text, u'powiadomienie e-mail:')
        self.assertEqual(self.browser.find_by_id('updateTaskSubmitButton').first.text, u'Zatwierdź!')
        self.assertEqual(self.browser.find_by_id('updateK').first['title'], u"wymiar grafu de Bruijn'a")
        self.assertEqual(self.browser.find_by_id('updateGenomeLength').first['title'], u'długość badanego genomu [bp]')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeMeanInward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - moda odległości pomiędzy odczytami stanowiącymi jedną parę (PET)')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeStdDevInward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - odchylenie standardowe odległości pomiędzy odczytami stanowiącymi jedną parę (PET)')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeMeanOutward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - moda odległości pomiędzy odczytami stanowiącymi jedną parę (MP)')
        self.assertEqual(self.browser.find_by_id('updateInsertSizeStdDevOutward').first['title'], u'wartość związana z assemblingiem wykorzystującym sparowane końce - odchylenie standardowe odległości pomiędzy odczytami stanowiącymi jedną parę (MP)')
        self.assertEqual(self.browser.find_by_id('updateT').first['title'], u'wartość progu jakości (0-93) dla odczytów z plików w formacie FASTQ (w assemblingu będą brane pod uwagę fragmenty odczytów od początku odczytu do pierwszego symbolu, którego jakość odczytu jest mniejsza niż wartość T)')
        self.assertEqual(self.browser.find_by_id('updateBfcounterThreshold').first['title'], u"wartość progu występień k-meru w tablicy wystąpień (każdy k-mer z liczbą wystąpień mniejszą od tego progu nie zostanie rozpatrzony)")
        self.assertEqual(self.browser.find_by_id('updateSingleEdgeCounterThreshold').first['title'], u"wartość progu wagi krawędzi w grafie de Bruijn'a nie uwzględniającym sparowanych końców (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdFrom').first['title'], u"wartość początku przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdTo').first['title'], u"wartość końca przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdFrom').first['title'], u"wartość początku przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdTo').first['title'], u"wartość końca przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('updatePairedReadsAlgorithm').first['title'], u"Wybierz '-' jeśli sparowane końce nie powinny być brane pod uwagę w procesie assemblingu, w przeciwnym wypadku wybierz 'Velvet-Breadcrumb'. Opcja '-' może zostać również użyta dla sparowanych odczytów - wówczas każdy odczyt zostanie potraktowany niezależnie. Opcja 'Velvet-Breadcrumb' oznacza, że podczas procesu assemblingu zostanie wykorzystany algorytm Breadcrumb z assemblera Velvet.")
        self.assertEqual(self.browser.find_by_id('updateCorrect').first['title'], u'zaznacz, jeżeli w wejściowym zestawie odczytów mogą znajdować się błędy')
        self.assertEqual(self.browser.find_by_id('add_i1_1').first['title'], u'plik z odczytami dla pierwszego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku) lub plik z wszystkimi odczytami (jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku). Orientacja inward.')
        self.assertEqual(self.browser.find_by_id('add_i1_2').first['title'], u'plik z odczytami dla drugiego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku). Orientacja inward.')
        self.assertEqual(self.browser.find_by_id('add_o1_1').first['title'], u'plik z odczytami dla pierwszego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku) lub plik z wszystkimi odczytami (jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku). Orientacja outward.')
        self.assertEqual(self.browser.find_by_id('add_o1_2').first['title'], u'plik z odczytami dla drugiego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku). Orientacja outward.')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyResultNotificationCheckbox').first['title'], u'zaznacz, jeśli uruchamiasz długie zadanie i chcesz być poinformowany o jego zakończeniu')
        self.assertEqual(self.browser.find_by_id('updateTask_assemblyShowResultUrlCheckbox').first['title'], u'zaznacz, jeśli chcesz zobaczyć adres wyniku')
        self.assertEqual(self.browser.find_by_id('addTask_generateScaffoldCheckbox').first['title'], u'utwórz skafoldy z wynikowych kontigów przy pomocy długich odczytów (np. PacBio/ Nanopore)')
        self.assertEqual(self.browser.find_by_id('updateTaskSubmitButton').first['title'], u'Kliknij, aby zatwierdzić powyższe parametry i zmodyfikować zadanie')
        self.browser.find_by_id('updateTaskSubmitButton').click()

        self.browser.find_by_id('deleteTaskButton').click()
        self.browser.find_by_id('logoutButton').first.click()

    def test07SettingsTranslations(self):
        """test 'settings' page translations"""
        self.clickCssLink('#a_user_tab_SETTINGS')
        self.waitForElement('defaultK')
        time.sleep(1)
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Settings')), 1)
        self.assertEqual(len(self.browser.find_by_text('Assembler DNA')), 1)
        self.assertEqual(len(self.browser.find_by_text('Default k:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultK').first['title'], u"the de Bruijn graph dimension")
        self.assertEqual(len(self.browser.find_by_text('Default T - quality threshold:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultT').first['title'], u"the quality threshold value (0-93) for reads from FASTQ files (reads will be trimmed to first symbol with quality less than this quality threshold value)")
        self.assertEqual(len(self.browser.find_by_text('Default insert size mean for paired-end tags:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanInward').first['title'], u"the value associated with paired-end tags - mean of distance between each pair of reads")
        self.assertEqual(len(self.browser.find_by_text('Default insert size std dev for paired-end tags:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevInward').first['title'], u"the value associated with paired-end tags - standard deviation of distance between each pair of reads")
        self.assertEqual(len(self.browser.find_by_text('Default insert size mean for mate-pairs:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanOutward').first['title'], u"the value associated with mate-pairs - mean of distance between each pair of reads")
        self.assertEqual(len(self.browser.find_by_text('Default insert size std dev for mate-pairs:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevOutward').first['title'], u"the value associated with mate-pairs - standard deviation of distance between each pair of reads")
        self.assertEqual(len(self.browser.find_by_text('Default genome length:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultGenomeLength').first['title'], u"the length of the genome under investigation [bp]")
        self.assertEqual(len(self.browser.find_by_text('Default k-mer coverage threshold for occurrence table:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultBfcounterThreshold').first['title'], u"the threshold of k-mer in occurrence table (each k-mer with counter less than this threshold will not be considered)")
        self.assertEqual(len(self.browser.find_by_text('Default edges coverage threshold for single graph:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultSingleEdgeCounterThreshold').first['title'], u"the threshold of edge counter in single (without paired-end tags) de Bruijn graph (each edge with counter less than this threshold will be deleted from single de Bruijn graph)")
        self.assertEqual(len(self.browser.find_by_text('Default begin of interval of paired reads threshold for paired-end tags:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').first['title'], u"the begin of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified edge counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph)")
        self.assertEqual(len(self.browser.find_by_text('Default end of interval of paired reads threshold for paired-end tags:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdTo').first['title'], u"the end of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified edge counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph)")
        self.assertEqual(len(self.browser.find_by_text('Default begin of interval of paired reads threshold for mate-pairs:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').first['title'], u"the begin of interval of threshold of edge counter for mate-pairs (each mate-pairs increment specified edge counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph)")
        self.assertEqual(len(self.browser.find_by_text('Default end of interval of paired reads threshold for mate-pairs:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdTo').first['title'], u"the end of interval of threshold of edge counter for mate-pairs (each mate-pairs tags increment specified edge counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph)")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotification').first.text, u"email notification:")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotificationCheckbox').first['title'], u"check, if you are submitting a long task and would like to be informed by email when it finishes")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrl').first.text, u"show url to result:")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrlCheckbox').first['title'], u"check, if you want url to result")
        self.assertEqual(self.browser.find_by_id('settingsSubmitButton').first.text, u'Submit!')
        self.assertEqual(self.browser.find_by_id('settingsSubmitButton').first['title'], u"Click to change default parameters values for new tasks")
        self.assertEqual(len(self.browser.find_by_text('Scaffolder')), 1)
        self.assertEqual(len(self.browser.find_by_text('Default k-mer length:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultKmerSize').first['title'], u"the length of k-mers which will be extracted from long reads")
        self.assertEqual(len(self.browser.find_by_text('Default distance between the 5’-end of each k-mer pair (insert size):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultDistance').first['title'], u"the distance between 5'-end of two k-mers in one pair")
        self.assertEqual(len(self.browser.find_by_text('Default step of sliding window:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultStep').first['title'], u"the step of sliding window when extracting k-mer pairs from long reads (distance between ends of two subsequent k-mers extracted from long read)")
        self.assertEqual(len(self.browser.find_by_text('Default minimum number of links (k-mer pairs) to compute scaffold:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultMinLinks').first['title'], u"the minimum number of links that must join two contig pairs to merge them into scaffold")
        self.assertEqual(len(self.browser.find_by_text('Default maximum link ratio between two best contig pairs:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultMaxRatio').first['title'], u"the maximum ratio between the best two contig pairs for a given contig being extended")
        self.assertEqual(len(self.browser.find_by_text('Default minimum contig length to consider for scaffolding:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultMinContigLength').first['title'], u"the minimum length of input contig to consider for scaffolding")
        self.assertEqual(len(self.browser.find_by_text('Align sequence to DNA reference genome')), 1)
        self.assertEqual(len(self.browser.find_by_text('similarity matrix:')), 1)
        self.assertEqual(len(self.browser.find_by_text('A')), 2)
        self.assertEqual(len(self.browser.find_by_text('C')), 2)
        self.assertEqual(len(self.browser.find_by_text('G')), 2)
        self.assertEqual(len(self.browser.find_by_text('T')), 2)
        self.assertEqual(len(self.browser.find_by_text('align algorithm:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultAlignAlgorithm').first['title'], u"choose align algorithm")
        self.assertEqual(len(self.browser.find_by_text('circular genome:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultIsCircular').first['title'], u"check, if genome is circular - penalties for both ends will not be added")
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotification').first.text, u"email notification:")
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotificationCheckbox').first['title'], u"check, if you are submitting a long task and would like to be informed by email when it finishes")
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrl').first.text, u"show url to result:")
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrlCheckbox').first['title'], u"check, if you want url to result")
        self.assertEqual(len(self.browser.find_by_text('gap penalty:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultGapPenalty').first['title'], u"penalty for gap in sequence/reference")
        self.assertEqual(self.browser.find_by_id('settingsAlignSubmitButton').first.text, u'Submit!')
        self.assertEqual(self.browser.find_by_id('settingsAlignSubmitButton').first['title'], u"Click to change default parameters values for align circular sequences")
        self.assertEqual(self.browser.find_by_id('logsSettings').first.text, u'Logs')
        self.assertEqual(len(self.browser.find_by_text('number of lines:')), 1)
        self.assertEqual(self.browser.find_by_id('logNumberLines').first['title'], u"number of log file lines, which will be showed")
        self.assertEqual(self.browser.find_by_id('showLogsButton').first.text, u'Show logs!')
        self.assertEqual(self.browser.find_by_id('showLogsButton').first['title'], u"Click to show logs")
        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Ustawienia')), 1)
        self.assertEqual(len(self.browser.find_by_text('Assembler DNA')), 1)
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna k:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultK').first['title'], u"wymiar grafu de Bruijn'a")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna T - progu jakości:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultT').first['title'], u"wartość progu jakości (0-93) dla odczytów z plików w formacie FASTQ (w assemblingu będą brane pod uwagę fragmenty odczytów od początku odczytu do pierwszego symbolu, którego jakość odczytu jest mniejsza niż wartość T)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna mody odległości pomiędzy odczytami (PET):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanInward').first['title'], u"wartość związana z assemblingiem wykorzystującym sparowane końce - moda odległości pomiędzy odczytami stanowiącymi jedną parę (PET)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna odchylenia standardowego odległości pomiędzy odczytami (PET):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevInward').first['title'], u"wartość związana z assemblingiem wykorzystującym sparowane końce - odchylenie standardowe odległości pomiędzy odczytami stanowiącymi jedną parę (PET)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna mody odległości pomiędzy odczytami (MP):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanOutward').first['title'], u"wartość związana z assemblingiem wykorzystującym sparowane końce - moda odległości pomiędzy odczytami stanowiącymi jedną parę (MP)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna odchylenia standardowego odległości pomiędzy odczytami (MP):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevOutward').first['title'], u"wartość związana z assemblingiem wykorzystującym sparowane końce - odchylenie standardowe odległości pomiędzy odczytami stanowiącymi jedną parę (MP)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna długości genomu:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultGenomeLength').first['title'], u"długość badanego genomu [bp]")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna progu pokrycia k-meru w tabeli wystąpień:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultBfcounterThreshold').first['title'], u"wartość progu występień k-meru w tablicy wystąpień (każdy k-mer z liczbą wystąpień mniejszą od tego progu nie zostanie rozpatrzony)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna progu pokrycia krawędzi dla pojedyńczego grafu:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultSingleEdgeCounterThreshold').first['title'], u"wartość progu wagi krawędzi w grafie de Bruijn'a nie uwzględniającym sparowanych końców (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna początku przedziału progu połączeń sparowanymi końcami (PET):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').first['title'], u"wartość początku przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna końca przedziału progu połączeń sparowanymi końcami (PET):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdTo').first['title'], u"wartość końca przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna początku przedziału progu połączeń sparowanymi końcami (MP):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').first['title'], u"wartość początku przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(len(self.browser.find_by_text('Wartość domyślna końca przedziału progu połączeń sparowanymi końcami (MP):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdTo').first['title'], u"wartość końca przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu)")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotification').first.text, u"powiadomienie e-mail:")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotificationCheckbox').first['title'], u"zaznacz, jeśli uruchamiasz długie zadanie i chcesz być poinformowany o jego zakończeniu")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrl').first.text, u"zobacz adres wyniku:")
        self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrlCheckbox').first['title'], u"zaznacz, jeśli chcesz zobaczyć adres wyniku")
        self.assertEqual(self.browser.find_by_id('settingsSubmitButton').first.text, u'Zatwierdź!')
        self.assertEqual(self.browser.find_by_id('settingsSubmitButton').first['title'], u"Kliknij, aby zmienić domyślne parametry dla nowych zadań")

        self.assertEqual(len(self.browser.find_by_text('Generator skafoldów')), 1)
        self.assertEqual(len(self.browser.find_by_text('Domyślna długość k-meru:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultKmerSize').first['title'], u"Długość k-merów jakie będą wygenerowane z długich odczytów")
        self.assertEqual(len(self.browser.find_by_text('Domyślna odległość pomiędzy dalszymi końcami k-merów (insert size):')), 1)
        self.assertEqual(self.browser.find_by_id('defaultDistance').first['title'], u"Odległość pomiędzy dalszymi końcami k-merów w parze (insert size)")
        self.assertEqual(len(self.browser.find_by_text('Domyślna odległość pomiędzy kolejnymi parami k-merów:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultStep').first['title'], u"Długość kroku okna przesuwnego podczas generowania par k-merów z długich odczytów (odległość między początkiem pierwszego k-meru z pierwszej pary, a początkiem pierwszego k-meru z drugiej pary)")
        self.assertEqual(len(self.browser.find_by_text('Domyślna minimalna liczba połączeń między dwoma kontigami wymagana do budowy z nich skafoldu:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultMinLinks').first['title'], u"Minimalna liczba par k-merów łączących dwa kontigi wymagana, aby połączyć te kontigi w skafold")
        self.assertEqual(len(self.browser.find_by_text('Domyślna maksymalna wartość współczynnika liczby połączeń dla dwóch najlepszych par kontigów:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultMaxRatio').first['title'], u"Maksymalny dopuszczalny stosunek dwóch najlepiej dopasowanych kontigów do bieżącego końca skafoldu, podczas jego wydłużania. Zwiększenie tej wartości może skutkować utworzeniem krótszych skafoldów dobrej jakości. Mała wartość może przełożyć się na utworzenie długich skafoldów, ale zwiększa ryzyko wystąpienia realokacji.")
        self.assertEqual(len(self.browser.find_by_text('Domyślna minimalna długość kontigu:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultMinContigLength').first['title'], u"Minimalna długość kontigu branego pod uwagę podczas tworzenia skafoldów. Kontigi krótsze niż ta wartość będą odrzucane")

        self.assertEqual(len(self.browser.find_by_text('Badanie podobieństwa sekwencji z referencyjnym genomem DNA')), 1)
        self.assertEqual(len(self.browser.find_by_text('macierz podobieństwa:')), 1)
        self.assertEqual(len(self.browser.find_by_text('A')), 2)
        self.assertEqual(len(self.browser.find_by_text('C')), 2)
        self.assertEqual(len(self.browser.find_by_text('G')), 2)
        self.assertEqual(len(self.browser.find_by_text('T')), 2)
        self.assertEqual(len(self.browser.find_by_text('algorytm uliniowienia:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultAlignAlgorithm').first['title'], u"wybierz algorytm uliniowienia")
        self.assertEqual(len(self.browser.find_by_text('genom kołowy:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultIsCircular').first['title'], u"zaznacz, jeśli genom jest kołowy - kary dla obu końców sekwencji nie zostaną dodane")
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotification').first.text, u"powiadomienie e-mail:")
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotificationCheckbox').first['title'], u"zaznacz, jeśli uruchamiasz długie zadanie i chcesz być poinformowany o jego zakończeniu")
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrl').first.text, u"zobacz adres wyniku:")
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrlCheckbox').first['title'], u"zaznacz, jeśli chcesz zobaczyć adres wyniku")
        self.assertEqual(len(self.browser.find_by_text('kara za przerwę:')), 1)
        self.assertEqual(self.browser.find_by_id('defaultGapPenalty').first['title'], u"kara za przerwę/wiszący nukleotyd")
        self.assertEqual(self.browser.find_by_id('settingsAlignSubmitButton').first.text, u'Zatwierdź!')
        self.assertEqual(self.browser.find_by_id('settingsAlignSubmitButton').first['title'], u"Kliknij, aby zmienić domyślne parametry dla badania podobieństwa kołowych sekwencji")
        self.assertEqual(self.browser.find_by_id('logsSettings').first.text, u'Logi')
        self.assertEqual(len(self.browser.find_by_text('liczba linii:')), 1)
        self.assertEqual(self.browser.find_by_id('logNumberLines').first['title'], u"liczba linii pliku logów, która zostanie wyświetlona")
        self.assertEqual(self.browser.find_by_id('showLogsButton').first.text, u'Zobacz logi!')
        self.assertEqual(self.browser.find_by_id('showLogsButton').first['title'], u"Kliknij, aby zobaczyć logi")

    def test08Assembling(self):
        """test 'assembling' page"""
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fastq")
        self.browser.find_by_id('uploadFileButton').click()

        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_id('updateTaskButton')), 0)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 0)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 0)
        self.browser.find_by_id('addTaskButton').click()
        self.browser.find_by_id('addTaskName').fill('test')
        self.browser.find_by_id('addK').fill(5)
        self.browser.find_by_id('addT').fill(0)
        self.browser.find_by_id('addGenomeLength').fill(20)
        self.browser.find_by_id('addBfcounterThreshold').fill(0)
        self.browser.find_by_id('addSingleEdgeCounterThreshold').fill(0)
        self.waitForElement('add_i1_1_option_functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.select('addPairedReadsAlgorithm', '0')
        self.browser.uncheck('addCorrect')
        self.browser.check('addTask_assemblyShowResultUrlCheckbox')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1.5)
        alert = self.browser.get_alert()    # alert with url to result
        alert.accept()
        time.sleep(2)
        self.assertEqual(len(self.browser.find_by_id('updateTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_text('false')), 1)
        self.assertEqual(len(self.browser.find_by_text('true')), 0)
        self.assertEqual(len(self.browser.find_by_text('test')), 1)    # 2 for adding new assembly task
        self.assertTrue(len(self.browser.find_by_text('5')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('20')) >= 1)
        self.assertEqual(len(self.browser.find_by_text('0')), 3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 7)    # 4 for adding new assembly task, 2 for adding new scaffold task
        self.assertEqual(len(self.browser.find_by_text('-')), 12)

        self.browser.find_by_id('addTaskButton').click()    # the same task name - alert
        self.browser.find_by_id('addTaskName').fill('test')
        self.browser.find_by_id('addK').fill(5)
        self.browser.find_by_id('addT').fill(0)
        self.browser.find_by_id('addGenomeLength').fill(20)
        self.browser.find_by_id('addBfcounterThreshold').fill(0)
        self.browser.find_by_id('addSingleEdgeCounterThreshold').fill(0)
        self.waitForElement('add_i1_1_option_functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.select('addPairedReadsAlgorithm', 'none')
        self.browser.uncheck('addCorrect')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1.5)
        alert = self.browser.get_alert()
        alert.accept()
        time.sleep(1)

        self.assertEqual(len(self.browser.find_by_id('updateTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_text('false')), 1)
        self.assertEqual(len(self.browser.find_by_text('true')), 0)
        self.assertEqual(len(self.browser.find_by_text('test')), 1)    #2 for adding new assembly task
        self.assertTrue(len(self.browser.find_by_text('5')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('20')) >= 1)
        self.assertEqual(len(self.browser.find_by_text('0')), 3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 7)    # 4 for adding new assembly task, 2 for adding new scaffold task
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 6)    # 4 for adding new assembly task, 2 for adding new scaffold task
        self.assertEqual(len(self.browser.find_by_text('-')), 12)

        self.browser.find_by_id('updateTaskButton').click()
        self.assertEqual(self.browser.find_by_id('updateK').value, u'5')
        self.assertEqual(self.browser.find_by_id('updateT').value, u'0')
        self.assertEqual(self.browser.find_by_id('updateGenomeLength').value, u'20')
        self.assertEqual(self.browser.find_by_id('updateBfcounterThreshold').value, u'0')
        self.assertEqual(self.browser.find_by_id('updateSingleEdgeCounterThreshold').value, u'0')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdFrom').value, u'0')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdTo').value, u'0')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdFrom').value, u'0')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdTo').value, u'0')
        self.assertFalse(self.browser.find_by_id('updateCorrect').checked)
        self.assertEqual(self.browser.find_by_id('updatePairedReadsAlgorithm').value, u'none')
        self.assertEqual(self.browser.find_by_id('update_i1_1').value, u'functional_test_input.fasta')
        self.assertEqual(self.browser.find_by_id('update_i1_2').value, u'')

        self.browser.find_by_id('updateK').fill(7)
        self.browser.find_by_id('updateT').fill(1)
        self.browser.find_by_id('updateGenomeLength').fill(21)
        self.browser.find_by_id('updateBfcounterThreshold').fill(1)
        self.browser.find_by_id('updateSingleEdgeCounterThreshold').fill(1)
        self.browser.find_by_id('updatePairedReadsPetThresholdFrom').fill(1)
        self.browser.find_by_id('updatePairedReadsPetThresholdTo').fill(1)
        self.browser.find_by_id('updatePairedReadsMpThresholdFrom').fill(1)
        self.browser.find_by_id('updatePairedReadsMpThresholdTo').fill(1)
        self.waitForElement('updateTask_none')
        time.sleep(1)
        self.browser.select('updatePairedReadsAlgorithm', 'none')
        self.browser.check('updateCorrect')
        self.browser.find_by_id('updateTaskSubmitButton').click()
        time.sleep(3)

        self.assertEqual(len(self.browser.find_by_id('updateTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 1)
        self.browser.find_by_id('updateTaskButton').click()
        self.assertEqual(self.browser.find_by_id('updateK').value, u'7')
        self.assertEqual(self.browser.find_by_id('updateT').value, u'1')
        self.assertEqual(self.browser.find_by_id('updateGenomeLength').value, u'21')
        self.assertEqual(self.browser.find_by_id('updateBfcounterThreshold').value, u'1')
        self.assertEqual(self.browser.find_by_id('updateSingleEdgeCounterThreshold').value, u'1')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdFrom').value, u'1')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsPetThresholdTo').value, u'1')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdFrom').value, u'1')
        self.assertEqual(self.browser.find_by_id('updatePairedReadsMpThresholdTo').value, u'1')
        self.assertTrue(self.browser.find_by_id('updateCorrect').checked)
        self.assertEqual(self.browser.find_by_id('updatePairedReadsAlgorithm').value, u'none')
        self.assertEqual(self.browser.find_by_id('update_i1_1').value, u'functional_test_input.fasta')
        self.assertEqual(self.browser.find_by_id('update_i1_2').value, u'')
        time.sleep(2.0)
        self.browser.find_by_id('updateTaskSubmitButton').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_id('updateTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_text('false')), 0)
        self.assertEqual(len(self.browser.find_by_text('true')), 1)
        self.assertEqual(len(self.browser.find_by_text('test')), 1)
        #self.assertEqual(len(self.browser.find_by_text('paired')), 1)
        self.assertTrue(len(self.browser.find_by_text('7')) >= 1)

        self.assertTrue(len(self.browser.find_by_text('21')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('1')) >= 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 7)    # 4 for adding new assembly task, 2 for adding new scaffold task
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 6)    # 4 for adding new assembly task, 2 for adding new scaffold task

        self.browser.find_by_id('deleteTaskButton').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_id('updateTaskButton')), 0)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 0)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 0)

        self.browser.find_by_id('logoutButton').first.click()

    def test09Settings(self):
        """test 'settings' page"""
        self.clickCssLink('#a_user_tab_SETTINGS')
        self.waitForElement('defaultK')
        time.sleep(1)
        k = self.browser.find_by_id('defaultK').value
        t = self.browser.find_by_id('defaultT').value
        insertSizeMeanInward = self.browser.find_by_id('defaultInsertSizeMeanInward').value
        insertSizeStdDevInward = self.browser.find_by_id('defaultInsertSizeStdDevInward').value
        insertSizeMeanOutward = self.browser.find_by_id('defaultInsertSizeMeanOutward').value
        insertSizeStdDevOutward = self.browser.find_by_id('defaultInsertSizeStdDevOutward').value
        genomeLength = self.browser.find_by_id('defaultGenomeLength').value
        bfcounterThreshold = self.browser.find_by_id('defaultBfcounterThreshold').value
        singleEdgeCounterThreshold = self.browser.find_by_id('defaultSingleEdgeCounterThreshold').value
        pairedReadsPetThresholdFrom = self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').value
        pairedReadsPetThresholdTo = self.browser.find_by_id('defaultPairedReadsPetThresholdTo').value
        pairedReadsMpThresholdFrom = self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').value
        pairedReadsMpThresholdTo = self.browser.find_by_id('defaultPairedReadsMpThresholdTo').value
        defaultAssemblyResultNotification = self.browser.find_by_id('defaultAssemblyResultNotificationCheckbox').checked
        defaultAssemblyShowResultUrl = self.browser.find_by_id('defaultAssemblyShowResultUrlCheckbox').checked
        d = self.browser.find_by_id('defaultGapPenalty').value
        AA = self.browser.find_by_id('defaultAA').value
        AC = self.browser.find_by_id('defaultAC').value
        AG = self.browser.find_by_id('defaultAG').value
        AT = self.browser.find_by_id('defaultAT').value
        CA = self.browser.find_by_id('defaultCA').value
        CC = self.browser.find_by_id('defaultCC').value
        CG = self.browser.find_by_id('defaultCG').value
        CT = self.browser.find_by_id('defaultCT').value
        GA = self.browser.find_by_id('defaultGA').value
        GC = self.browser.find_by_id('defaultGC').value
        GG = self.browser.find_by_id('defaultGG').value
        GT = self.browser.find_by_id('defaultGT').value
        TA = self.browser.find_by_id('defaultTA').value
        TC = self.browser.find_by_id('defaultTC').value
        TG = self.browser.find_by_id('defaultTG').value
        TT = self.browser.find_by_id('defaultTT').value
        defaultIsCircular = self.browser.find_by_id('defaultIsCircular').checked
        defaultAlignResultNotification = self.browser.find_by_id('defaultAlignResultNotificationCheckbox').checked
        defaultAlignShowResultUrl = self.browser.find_by_id('defaultAlignShowResultUrlCheckbox').checked
        self.assertEqual(len(k) > 0, True)
        self.assertEqual(len(t) > 0, True)
        self.assertEqual(len(insertSizeMeanInward) > 0, True)
        self.assertEqual(len(insertSizeStdDevInward) > 0, True)
        self.assertEqual(len(insertSizeMeanOutward) > 0, True)
        self.assertEqual(len(insertSizeStdDevOutward) > 0, True)
        self.assertEqual(len(genomeLength) > 0, True)
        self.assertEqual(len(bfcounterThreshold) > 0, True)
        self.assertEqual(len(singleEdgeCounterThreshold) > 0, True)
        self.assertEqual(len(pairedReadsPetThresholdFrom) > 0, True)
        self.assertEqual(len(pairedReadsPetThresholdTo) > 0, True)
        self.assertEqual(len(pairedReadsMpThresholdFrom) > 0, True)
        self.assertEqual(len(pairedReadsMpThresholdTo) > 0, True)
        self.assertEqual(defaultAssemblyResultNotification, False)
        self.assertEqual(defaultAssemblyShowResultUrl, False)
        self.assertEqual(len(d) > 0, True)
        self.assertEqual(len(AA) > 0, True)
        self.assertEqual(len(AC) > 0, True)
        self.assertEqual(len(AG) > 0, True)
        self.assertEqual(len(AT) > 0, True)
        self.assertEqual(len(CA) > 0, True)
        self.assertEqual(len(CC) > 0, True)
        self.assertEqual(len(CG) > 0, True)
        self.assertEqual(len(CT) > 0, True)
        self.assertEqual(len(GA) > 0, True)
        self.assertEqual(len(GC) > 0, True)
        self.assertEqual(len(GG) > 0, True)
        self.assertEqual(len(GT) > 0, True)
        self.assertEqual(len(TA) > 0, True)
        self.assertEqual(len(TC) > 0, True)
        self.assertEqual(len(TG) > 0, True)
        self.assertEqual(len(TT) > 0, True)
        self.assertEqual(defaultIsCircular, False)
        self.assertEqual(defaultAlignResultNotification, False)
        self.assertEqual(defaultAlignShowResultUrl, False)
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.waitForElement('addTask_velvet')
        time.sleep(1)
        self.browser.select('addPairedReadsAlgorithm', '1')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanInward').value, insertSizeMeanInward)
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevInward').value, insertSizeStdDevInward)
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanOutward').value, insertSizeMeanOutward)
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevOutward').value, insertSizeStdDevOutward)
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdFrom').value, pairedReadsPetThresholdFrom)
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdTo').value, pairedReadsPetThresholdTo)
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdFrom').value, pairedReadsMpThresholdFrom)
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdTo').value, pairedReadsMpThresholdTo)
        self.clickCssLink('#a_user_tab_ALIGNMENT')
        self.waitForElement('newAlignTaskName')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('gapPenalty').value, d)
        self.assertEqual(self.browser.find_by_id('AA').value, AA)
        self.assertEqual(self.browser.find_by_id('AC').value, AC)
        self.assertEqual(self.browser.find_by_id('AG').value, AG)
        self.assertEqual(self.browser.find_by_id('AT').value, AT)
        self.assertEqual(self.browser.find_by_id('CA').value, CA)
        self.assertEqual(self.browser.find_by_id('CC').value, CC)
        self.assertEqual(self.browser.find_by_id('CG').value, CG)
        self.assertEqual(self.browser.find_by_id('CT').value, CT)
        self.assertEqual(self.browser.find_by_id('GA').value, GA)
        self.assertEqual(self.browser.find_by_id('GC').value, GC)
        self.assertEqual(self.browser.find_by_id('GG').value, GG)
        self.assertEqual(self.browser.find_by_id('GT').value, GT)
        self.assertEqual(self.browser.find_by_id('TA').value, TA)
        self.assertEqual(self.browser.find_by_id('TC').value, TC)
        self.assertEqual(self.browser.find_by_id('TG').value, TG)
        self.assertEqual(self.browser.find_by_id('TT').value, TT)
        self.assertEqual(self.browser.find_by_id('circularCheckbox').checked, False)
        self.assertEqual(self.browser.find_by_id('alignResultNotificationCheckbox').checked, False)
        self.assertEqual(self.browser.find_by_id('alignShowResultUrlCheckbox').checked, False)
        self.clickCssLink('#a_user_tab_SETTINGS')
        self.waitForElement('defaultK')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('defaultK').value, k)
        self.assertEqual(self.browser.find_by_id('defaultT').value, t)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanInward').value, insertSizeMeanInward)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevInward').value, insertSizeStdDevInward)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanOutward').value, insertSizeMeanOutward)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevOutward').value, insertSizeStdDevOutward)
        self.assertEqual(self.browser.find_by_id('defaultGenomeLength').value, genomeLength)
        self.assertEqual(self.browser.find_by_id('defaultBfcounterThreshold').value, bfcounterThreshold)
        self.assertEqual(self.browser.find_by_id('defaultSingleEdgeCounterThreshold').value, singleEdgeCounterThreshold)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').value, pairedReadsPetThresholdFrom)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdTo').value, pairedReadsPetThresholdTo)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').value, pairedReadsMpThresholdFrom)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdTo').value, pairedReadsMpThresholdTo)
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotificationCheckbox').checked, defaultAssemblyResultNotification)
        self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrlCheckbox').checked, defaultAssemblyShowResultUrl)

        self.assertEqual(self.browser.find_by_id('defaultGapPenalty').value, d)
        self.assertEqual(self.browser.find_by_id('defaultAA').value, AA)
        self.assertEqual(self.browser.find_by_id('defaultAC').value, AC)
        self.assertEqual(self.browser.find_by_id('defaultAG').value, AG)
        self.assertEqual(self.browser.find_by_id('defaultAT').value, AT)
        self.assertEqual(self.browser.find_by_id('defaultCA').value, CA)
        self.assertEqual(self.browser.find_by_id('defaultCC').value, CC)
        self.assertEqual(self.browser.find_by_id('defaultCG').value, CG)
        self.assertEqual(self.browser.find_by_id('defaultCT').value, CT)
        self.assertEqual(self.browser.find_by_id('defaultGA').value, GA)
        self.assertEqual(self.browser.find_by_id('defaultGC').value, GC)
        self.assertEqual(self.browser.find_by_id('defaultGG').value, GG)
        self.assertEqual(self.browser.find_by_id('defaultGT').value, GT)
        self.assertEqual(self.browser.find_by_id('defaultTA').value, TA)
        self.assertEqual(self.browser.find_by_id('defaultTC').value, TC)
        self.assertEqual(self.browser.find_by_id('defaultTG').value, TG)
        self.assertEqual(self.browser.find_by_id('defaultTT').value, TT)
        self.assertEqual(self.browser.find_by_id('defaultIsCircular').checked, defaultIsCircular)
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotificationCheckbox').checked, defaultAlignResultNotification)
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrlCheckbox').checked, defaultAlignShowResultUrl)
        self.browser.find_by_id('defaultK').fill(int(k)+1)
        self.browser.find_by_id('defaultT').fill(int(t)+1)
        self.browser.find_by_id('defaultInsertSizeMeanInward').fill(str(float(insertSizeMeanInward)+1.0))
        self.browser.find_by_id('defaultInsertSizeStdDevInward').fill(str(float(insertSizeStdDevInward)+1.0))
        self.browser.find_by_id('defaultInsertSizeMeanOutward').fill(str(float(insertSizeMeanOutward)+1.0))
        self.browser.find_by_id('defaultInsertSizeStdDevOutward').fill(str(float(insertSizeStdDevOutward)+1.0))
        self.browser.find_by_id('defaultGenomeLength').fill(int(genomeLength)+1)
        self.browser.find_by_id('defaultBfcounterThreshold').fill(int(bfcounterThreshold)+1)
        self.browser.find_by_id('defaultSingleEdgeCounterThreshold').fill(int(singleEdgeCounterThreshold)+1)
        self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').fill(int(pairedReadsPetThresholdFrom)+1)
        self.browser.find_by_id('defaultPairedReadsPetThresholdTo').fill(int(pairedReadsPetThresholdTo)+1)
        self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').fill(int(pairedReadsMpThresholdFrom)+1)
        self.browser.find_by_id('defaultPairedReadsMpThresholdTo').fill(int(pairedReadsMpThresholdTo)+1)
        self.browser.check('defaultAssemblyResultNotificationCheckbox')
        self.browser.check('defaultAssemblyShowResultUrlCheckbox')
        self.browser.find_by_id('defaultGapPenalty').fill(int(d)+1)
        self.browser.find_by_id('defaultAA').fill(int(AA)+1)
        self.browser.find_by_id('defaultAC').fill(int(AC)+1)
        self.browser.find_by_id('defaultAG').fill(int(AG)+1)
        self.browser.find_by_id('defaultAT').fill(int(AT)+1)
        self.browser.find_by_id('defaultCA').fill(int(CA)+1)
        self.browser.find_by_id('defaultCC').fill(int(CC)+1)
        self.browser.find_by_id('defaultCG').fill(int(CG)+1)
        self.browser.find_by_id('defaultCT').fill(int(CT)+1)
        self.browser.find_by_id('defaultGA').fill(int(GA)+1)
        self.browser.find_by_id('defaultGC').fill(int(GC)+1)
        self.browser.find_by_id('defaultGG').fill(int(GG)+1)
        self.browser.find_by_id('defaultGT').fill(int(GT)+1)
        self.browser.find_by_id('defaultTA').fill(int(TA)+1)
        self.browser.find_by_id('defaultTC').fill(int(TC)+1)
        self.browser.find_by_id('defaultTG').fill(int(TG)+1)
        self.browser.find_by_id('defaultTT').fill(int(TT)+1)
        self.browser.check('defaultIsCircular')
        self.browser.check('defaultAlignResultNotificationCheckbox')
        self.browser.check('defaultAlignShowResultUrlCheckbox')
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.waitForElement('addTask_velvet')
        time.sleep(1)
        self.browser.select('addPairedReadsAlgorithm', '1')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanInward').value, insertSizeMeanInward)
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevInward').value, insertSizeStdDevInward)
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanOutward').value, insertSizeMeanOutward)
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevOutward').value, insertSizeStdDevOutward)
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdFrom').value, pairedReadsPetThresholdFrom)
        self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdTo').value, pairedReadsPetThresholdTo)
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdFrom').value, pairedReadsMpThresholdFrom)
        self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdTo').value, pairedReadsMpThresholdTo)
        self.clickCssLink('#a_user_tab_ALIGNMENT')
        self.waitForElement('newAlignTaskName')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('gapPenalty').value, d)
        self.assertEqual(self.browser.find_by_id('AA').value, AA)
        self.assertEqual(self.browser.find_by_id('AC').value, AC)
        self.assertEqual(self.browser.find_by_id('AG').value, AG)
        self.assertEqual(self.browser.find_by_id('AT').value, AT)
        self.assertEqual(self.browser.find_by_id('CA').value, CA)
        self.assertEqual(self.browser.find_by_id('CC').value, CC)
        self.assertEqual(self.browser.find_by_id('CG').value, CG)
        self.assertEqual(self.browser.find_by_id('CT').value, CT)
        self.assertEqual(self.browser.find_by_id('GA').value, GA)
        self.assertEqual(self.browser.find_by_id('GC').value, GC)
        self.assertEqual(self.browser.find_by_id('GG').value, GG)
        self.assertEqual(self.browser.find_by_id('GT').value, GT)
        self.assertEqual(self.browser.find_by_id('TA').value, TA)
        self.assertEqual(self.browser.find_by_id('TC').value, TC)
        self.assertEqual(self.browser.find_by_id('TG').value, TG)
        self.assertEqual(self.browser.find_by_id('TT').value, TT)
        self.assertEqual(self.browser.find_by_id('circularCheckbox').checked, defaultIsCircular)
        self.assertEqual(self.browser.find_by_id('alignResultNotificationCheckbox').checked, defaultAlignResultNotification)
        self.assertEqual(self.browser.find_by_id('alignShowResultUrlCheckbox').checked, defaultAlignShowResultUrl)
        self.clickCssLink('#a_user_tab_SETTINGS')
        self.waitForElement('defaultK')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('defaultK').value, k)
        self.assertEqual(self.browser.find_by_id('defaultT').value, t)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanInward').value, insertSizeMeanInward)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevInward').value, insertSizeStdDevInward)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanOutward').value, insertSizeMeanOutward)
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevOutward').value, insertSizeStdDevOutward)
        self.assertEqual(self.browser.find_by_id('defaultGenomeLength').value, genomeLength)
        self.assertEqual(self.browser.find_by_id('defaultBfcounterThreshold').value, bfcounterThreshold)
        self.assertEqual(self.browser.find_by_id('defaultSingleEdgeCounterThreshold').value, singleEdgeCounterThreshold)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').value, pairedReadsPetThresholdFrom)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThresholdTo').value, pairedReadsPetThresholdTo)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').value, pairedReadsMpThresholdFrom)
        self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThresholdTo').value, pairedReadsMpThresholdTo)
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotificationCheckbox').checked, defaultAssemblyResultNotification)
        self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrlCheckbox').checked, defaultAssemblyShowResultUrl)
        self.assertEqual(self.browser.find_by_id('defaultGapPenalty').value, d)
        self.assertEqual(self.browser.find_by_id('defaultAA').value, AA)
        self.assertEqual(self.browser.find_by_id('defaultAC').value, AC)
        self.assertEqual(self.browser.find_by_id('defaultAG').value, AG)
        self.assertEqual(self.browser.find_by_id('defaultAT').value, AT)
        self.assertEqual(self.browser.find_by_id('defaultCA').value, CA)
        self.assertEqual(self.browser.find_by_id('defaultCC').value, CC)
        self.assertEqual(self.browser.find_by_id('defaultCG').value, CG)
        self.assertEqual(self.browser.find_by_id('defaultCT').value, CT)
        self.assertEqual(self.browser.find_by_id('defaultGA').value, GA)
        self.assertEqual(self.browser.find_by_id('defaultGC').value, GC)
        self.assertEqual(self.browser.find_by_id('defaultGG').value, GG)
        self.assertEqual(self.browser.find_by_id('defaultGT').value, GT)
        self.assertEqual(self.browser.find_by_id('defaultTA').value, TA)
        self.assertEqual(self.browser.find_by_id('defaultTC').value, TC)
        self.assertEqual(self.browser.find_by_id('defaultTG').value, TG)
        self.assertEqual(self.browser.find_by_id('defaultTT').value, TT)
        self.assertEqual(self.browser.find_by_id('defaultIsCircular').checked, defaultIsCircular)
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotificationCheckbox').checked, defaultAlignResultNotification)
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrlCheckbox').checked, defaultAlignShowResultUrl)
        self.browser.find_by_id('defaultK').fill(int(k)+1)
        self.browser.find_by_id('defaultT').fill(int(t)+1)
        self.browser.find_by_id('defaultInsertSizeMeanInward').fill(str(float(insertSizeMeanInward)+1.0))
        self.browser.find_by_id('defaultInsertSizeStdDevInward').fill(str(float(insertSizeStdDevInward)+1.0))
        self.browser.find_by_id('defaultInsertSizeMeanOutward').fill(str(float(insertSizeMeanOutward)+1.0))
        self.browser.find_by_id('defaultInsertSizeStdDevOutward').fill(str(float(insertSizeStdDevOutward)+1.0))
        self.browser.find_by_id('defaultGenomeLength').fill(int(genomeLength)+1)
        self.browser.find_by_id('defaultBfcounterThreshold').fill(int(bfcounterThreshold)+1)
        self.browser.find_by_id('defaultSingleEdgeCounterThreshold').fill(int(singleEdgeCounterThreshold)+1)
        self.browser.find_by_id('defaultPairedReadsPetThresholdFrom').fill(int(pairedReadsPetThresholdFrom)+1)
        self.browser.find_by_id('defaultPairedReadsPetThresholdTo').fill(int(pairedReadsPetThresholdTo)+1)
        self.browser.find_by_id('defaultPairedReadsMpThresholdFrom').fill(int(pairedReadsMpThresholdFrom)+1)
        self.browser.find_by_id('defaultPairedReadsMpThresholdTo').fill(int(pairedReadsMpThresholdTo)+1)
        self.browser.check('defaultAssemblyResultNotificationCheckbox')
        self.browser.check('defaultAssemblyShowResultUrlCheckbox')
        self.browser.find_by_id('settingsSubmitButton').click()
        self.browser.find_by_id('defaultGapPenalty').fill(int(d)+1)
        self.browser.find_by_id('defaultAA').fill(int(AA)+1)
        self.browser.find_by_id('defaultAC').fill(int(AC)+1)
        self.browser.find_by_id('defaultAG').fill(int(AG)+1)
        self.browser.find_by_id('defaultAT').fill(int(AT)+1)
        self.browser.find_by_id('defaultCA').fill(int(CA)+1)
        self.browser.find_by_id('defaultCC').fill(int(CC)+1)
        self.browser.find_by_id('defaultCG').fill(int(CG)+1)
        self.browser.find_by_id('defaultCT').fill(int(CT)+1)
        self.browser.find_by_id('defaultGA').fill(int(GA)+1)
        self.browser.find_by_id('defaultGC').fill(int(GC)+1)
        self.browser.find_by_id('defaultGG').fill(int(GG)+1)
        self.browser.find_by_id('defaultGT').fill(int(GT)+1)
        self.browser.find_by_id('defaultTA').fill(int(TA)+1)
        self.browser.find_by_id('defaultTC').fill(int(TC)+1)
        self.browser.find_by_id('defaultTG').fill(int(TG)+1)
        self.browser.find_by_id('defaultTT').fill(int(TT)+1)
        self.browser.check('defaultIsCircular')
        self.browser.check('defaultAlignResultNotificationCheckbox')
        self.browser.check('defaultAlignShowResultUrlCheckbox')
        self.browser.find_by_id('settingsAlignSubmitButton').click()
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.waitForElement('addTask_velvet')
        time.sleep(1)
        self.browser.select('addPairedReadsAlgorithm', '1')
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanInward').value, str(float(insertSizeMeanInward)+1.0))
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevInward').value, str(float(insertSizeStdDevInward)+1.0))
        self.assertEqual(self.browser.find_by_id('addInsertSizeMeanOutward').value, str(float(insertSizeMeanOutward)+1.0))
        self.assertEqual(self.browser.find_by_id('addInsertSizeStdDevOutward').value, str(float(insertSizeStdDevOutward)+1.0))
        #self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdFrom').value, str(int(pairedReadsPetThresholdFrom)+1))
        #self.assertEqual(self.browser.find_by_id('addPairedReadsPetThresholdTo').value, str(int(pairedReadsPetThresholdTo)+1))
        #self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdFrom').value, str(int(pairedReadsMpThresholdFrom)+1))
        #self.assertEqual(self.browser.find_by_id('addPairedReadsMpThresholdTo').value, str(int(pairedReadsMpThresholdTo)+1))
        self.clickCssLink('#a_user_tab_ALIGNMENT')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('gapPenalty').value, str(int(d)+1))
        self.assertEqual(self.browser.find_by_id('AA').value, str(int(AA)+1))
        self.assertEqual(self.browser.find_by_id('AC').value, str(int(AC)+1))
        self.assertEqual(self.browser.find_by_id('AG').value, str(int(AG)+1))
        self.assertEqual(self.browser.find_by_id('AT').value, str(int(AT)+1))
        self.assertEqual(self.browser.find_by_id('CA').value, str(int(CA)+1))
        self.assertEqual(self.browser.find_by_id('CC').value, str(int(CC)+1))
        self.assertEqual(self.browser.find_by_id('CG').value, str(int(CG)+1))
        self.assertEqual(self.browser.find_by_id('CT').value, str(int(CT)+1))
        self.assertEqual(self.browser.find_by_id('GA').value, str(int(GA)+1))
        self.assertEqual(self.browser.find_by_id('GC').value, str(int(GC)+1))
        self.assertEqual(self.browser.find_by_id('GG').value, str(int(GG)+1))
        self.assertEqual(self.browser.find_by_id('GT').value, str(int(GT)+1))
        self.assertEqual(self.browser.find_by_id('TA').value, str(int(TA)+1))
        self.assertEqual(self.browser.find_by_id('TC').value, str(int(TC)+1))
        self.assertEqual(self.browser.find_by_id('TG').value, str(int(TG)+1))
        self.assertEqual(self.browser.find_by_id('TT').value, str(int(TT)+1))
        self.assertEqual(self.browser.find_by_id('circularCheckbox').checked, True)
        self.assertEqual(self.browser.find_by_id('alignResultNotificationCheckbox').checked, True)
        self.assertEqual(self.browser.find_by_id('alignShowResultUrlCheckbox').checked, True)
        self.clickCssLink('#a_user_tab_SETTINGS')
        self.waitForElement('defaultK')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('defaultK').value, str(int(k)+1))
        self.assertEqual(self.browser.find_by_id('defaultT').value, str(int(t)+1))
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanInward').value, str(float(insertSizeMeanInward)+1.0))
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevInward').value, str(float(insertSizeStdDevInward)+1.0))
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeMeanOutward').value, str(float(insertSizeMeanOutward)+1.0))
        self.assertEqual(self.browser.find_by_id('defaultInsertSizeStdDevOutward').value, str(float(insertSizeStdDevOutward)+1.0))
        self.assertEqual(self.browser.find_by_id('defaultGenomeLength').value, str(int(genomeLength)+1))
        self.assertEqual(self.browser.find_by_id('defaultBfcounterThreshold').value, str(int(bfcounterThreshold)+1))
        self.assertEqual(self.browser.find_by_id('defaultSingleEdgeCounterThreshold').value, str(int(singleEdgeCounterThreshold)+1))
        #self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThreshold').value, str(int(pairedReadsPetThreshold)+1))
        #self.assertEqual(self.browser.find_by_id('defaultPairedReadsPetThreshold').value, str(int(pairedReadsPetThreshold)+1))
        #self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThreshold').value, str(int(pairedReadsMpThreshold)+1))
        #self.assertEqual(self.browser.find_by_id('defaultPairedReadsMpThreshold').value, str(int(pairedReadsMpThreshold)+1))
        self.assertEqual(self.browser.find_by_id('defaultAssemblyResultNotificationCheckbox').checked, True)
        #self.assertEqual(self.browser.find_by_id('defaultAssemblyShowResultUrlCheckbox').checked, True)
        self.assertEqual(self.browser.find_by_id('defaultGapPenalty').value, str(int(d)+1))
        self.assertEqual(self.browser.find_by_id('defaultAA').value, str(int(AA)+1))
        self.assertEqual(self.browser.find_by_id('defaultAC').value, str(int(AC)+1))
        self.assertEqual(self.browser.find_by_id('defaultAG').value, str(int(AG)+1))
        self.assertEqual(self.browser.find_by_id('defaultAT').value, str(int(AT)+1))
        self.assertEqual(self.browser.find_by_id('defaultCA').value, str(int(CA)+1))
        self.assertEqual(self.browser.find_by_id('defaultCC').value, str(int(CC)+1))
        self.assertEqual(self.browser.find_by_id('defaultCG').value, str(int(CG)+1))
        self.assertEqual(self.browser.find_by_id('defaultCT').value, str(int(CT)+1))
        self.assertEqual(self.browser.find_by_id('defaultGA').value, str(int(GA)+1))
        self.assertEqual(self.browser.find_by_id('defaultGC').value, str(int(GC)+1))
        self.assertEqual(self.browser.find_by_id('defaultGG').value, str(int(GG)+1))
        self.assertEqual(self.browser.find_by_id('defaultGT').value, str(int(GT)+1))
        self.assertEqual(self.browser.find_by_id('defaultTA').value, str(int(TA)+1))
        self.assertEqual(self.browser.find_by_id('defaultTC').value, str(int(TC)+1))
        self.assertEqual(self.browser.find_by_id('defaultTG').value, str(int(TG)+1))
        self.assertEqual(self.browser.find_by_id('defaultTT').value, str(int(TT)+1))
        self.assertEqual(self.browser.find_by_id('defaultIsCircular').checked, True)
        self.assertEqual(self.browser.find_by_id('defaultAlignResultNotificationCheckbox').checked, True)
        self.assertEqual(self.browser.find_by_id('defaultAlignShowResultUrlCheckbox').checked, True)
        self.clickCssLink('#a_user_tab_SETTINGS')
        self.waitForElement('defaultK')
        time.sleep(1)
        self.browser.find_by_id('logNumberLines').fill(5)
        self.browser.find_by_id('showLogsButton').click()
        time.sleep(1.0)
        self.assertEqual(len(self.browser.find_by_id('logs').value) > 0, True)
        oldLen = len(self.browser.find_by_id('logs').value)
        self.browser.find_by_id('logNumberLines').fill(10)
        self.browser.find_by_id('showLogsButton').click()
        time.sleep(1.0)
        self.assertEqual(len(self.browser.find_by_id('logs').value) > 0, True)
        self.assertEqual(len(self.browser.find_by_id('logs').value) > oldLen, True)

    def test10StartPageTranslations(self):
        """test 'start_page' page translations"""
        self.browser.reload()
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text(u'Welcome to DnaAssembler application')), 1)
        self.assertEqual(self.browser.find_by_id('loginAsGuestButton').first.text, u'Log in as guest')
        self.assertEqual(self.browser.find_by_id('loginAsGuestButton').first['title'], u"Click to log in as guest")
        self.assertEqual(self.browser.find_by_id('showLoginWindowButton').first.text, u'Log in')
        self.assertEqual(self.browser.find_by_id('showLoginWindowButton').first['title'], u"Click to log in")
        self.assertEqual(self.browser.find_by_id('showNewUserWindowButton').first.text, u'Create new user')
        self.assertEqual(self.browser.find_by_id('showNewUserWindowButton').first['title'], u"Click to create new user")
        self.assertEqual(self.browser.find_by_id('showHelpWindowButton').first.text, u'Help')
        self.assertEqual(self.browser.find_by_id('showHelpWindowButton').first['title'], u"Click to view help page")
        self.assertEqual(self.browser.find_by_id('a_lang_en').first['title'], u"Click to change language to english")
        self.assertEqual(self.browser.find_by_id('a_lang_pl').first['title'], u"Click to change language to polish")
        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text(u'Witaj w aplikacji DnaAssembler')), 1)
        self.assertEqual(self.browser.find_by_id('loginAsGuestButton').first.text, u'Zaloguj się jako gość')
        self.assertEqual(self.browser.find_by_id('loginAsGuestButton').first['title'], u"Kliknij, aby zalogować się do aplikacji jako gość")
        self.assertEqual(self.browser.find_by_id('showLoginWindowButton').first.text, u'Zaloguj się')
        self.assertEqual(self.browser.find_by_id('showLoginWindowButton').first['title'], u"Kliknij, aby zalogować się do aplikacji")
        self.assertEqual(self.browser.find_by_id('showNewUserWindowButton').first.text, u'Dodaj użytkownika')
        self.assertEqual(self.browser.find_by_id('showNewUserWindowButton').first['title'], u"Kliknij, aby dodać nowego użytkownika")
        self.assertEqual(self.browser.find_by_id('showHelpWindowButton').first.text, u'Pomoc')
        self.assertEqual(self.browser.find_by_id('showHelpWindowButton').first['title'], u"Kliknij, aby zobaczyć pomoc dla aplikacji")
        self.assertEqual(self.browser.find_by_id('a_lang_en').first['title'], u"Kliknij, aby zmienić język na angielski")
        self.assertEqual(self.browser.find_by_id('a_lang_pl').first['title'], u"Kliknij, aby zmienić język na polski")

    def test11HelpTranslations(self):
        """test 'help' page translations"""
        self.browser.find_by_id('showHelpWindowButton').click()
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Help')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'For more information send an email:')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Authors')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Robert Nowak - r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Wiktor Kuśmirek')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Warsaw University of Technology,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Faculty of Electronics and Information Technology,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Warsaw 2015')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Application parameters')), 1)
        self.assertEqual(self.browser.find_by_id('algorithms_href').first.text, u"Parameters and algorithms used in application")
        self.assertEqual(self.browser.find_by_id('algorithms_href').first['title'], u"Click to view description of parameters and algorithms used in application")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first.text, u"Input and output file formats")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first['title'], u"Click to view description of input file formats accepted by application and output file formats produced by application")
        self.assertEqual(self.browser.find_by_id('demo_files_legend').first.text, u"Files from demo")
        self.assertEqual(self.browser.find_by_id('reads_PET_R1.fq_href').first['title'], u"Click to download reads_PET_R1.fq file")
        self.assertEqual(self.browser.find_by_id('reads_PET_R2.fq_href').first['title'], u"Click to download reads_PET_R2.fq file")
        self.assertEqual(self.browser.find_by_id('ref.fa_href').first['title'], u"Click to download ref.fa file")
        self.assertEqual(self.browser.find_by_id('seq.fa_href').first['title'], u"Click to download seq.fa file")
        self.assertEqual(self.browser.find_by_id('cmp.vcf_href').first['title'], u"Click to download cmp.vcf file")
        server_time = self.browser.find_by_id('server_time_val')     #.first.text
        self.assertTrue(len(server_time) > 0)
        self.assertTrue(len(self.browser.find_by_id('server_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('db_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('client_version_val')) > 0)
        server_time_after = server_time
        counter = 0
        while server_time_after == server_time and counter < 10:
            server_time_after = self.browser.find_by_id('server_time_val').first.text
            time.sleep(1)
            counter += 1
        self.assertNotEqual(server_time, server_time_after)

        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Pomoc')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Uzyskaj więcej informacji wysyłając wiadomość:')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Autorzy')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Robert Nowak - r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Wiktor Kuśmirek')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Politechnika Warszawska,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Wydział Elektroniki i Technik Informacyjnych,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Warszawa 2015')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Parametry aplikacji')), 1)
        self.assertEqual(self.browser.find_by_id('algorithms_href').first.text, u"Parametry i algorytmy wykorzystane w aplikacji")
        self.assertEqual(self.browser.find_by_id('algorithms_href').first['title'], u"Kliknij, aby zobaczyć opis parametrów i algorytmów wykorzystanych w aplikacji")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first.text, u"Formaty plików wejściowych i wyjściowych")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first['title'], u"Kliknij, aby zobaczyć opis formatów plików wejściowych akceptowanych przez aplikację i opis formatów plików wyjściowych produkowanych przez aplikację")
        self.assertEqual(self.browser.find_by_id('demo_files_legend').first.text, u"Pliki z filmu")
        self.assertEqual(self.browser.find_by_id('reads_PET_R1.fq_href').first['title'], u"Kliknij, aby pobrać plik reads_PET_R1.fq")
        self.assertEqual(self.browser.find_by_id('reads_PET_R2.fq_href').first['title'], u"Kliknij, aby pobrać plik reads_PET_R2.fq")
        self.assertEqual(self.browser.find_by_id('ref.fa_href').first['title'], u"Kliknij, aby pobrać plik ref.fa")
        self.assertEqual(self.browser.find_by_id('seq.fa_href').first['title'], u"Kliknij, aby pobrać plik seq.fa")
        self.assertEqual(self.browser.find_by_id('cmp.vcf_href').first['title'], u"Kliknij, aby pobrać plik cmp.vcf")
        server_time = self.browser.find_by_id('server_time_val')
        self.assertTrue(len(server_time) > 0)
        self.assertTrue(len(self.browser.find_by_id('server_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('db_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('client_version_val')) > 0)
        server_time_after = server_time
        counter = 0
        while server_time_after == server_time and counter < 10:
            server_time_after = self.browser.find_by_id('server_time_val').first.text
            time.sleep(1)
            counter += 1
        self.assertNotEqual(server_time, server_time_after)

        self.browser.reload()
        self.browser.find_by_id('showHelpWindowButton').click()
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Help')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'For more information send an email:')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Authors')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Robert Nowak - r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Wiktor Kuśmirek')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Warsaw University of Technology,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Faculty of Electronics and Information Technology,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Warsaw 2015')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Application parameters')), 1)
        self.assertEqual(self.browser.find_by_id('algorithms_href').first.text, u"Parameters and algorithms used in application")
        self.assertEqual(self.browser.find_by_id('algorithms_href').first['title'], u"Click to view description of parameters and algorithms used in application")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first.text, u"Input and output file formats")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first['title'], u"Click to view description of input file formats accepted by application and output file formats produced by application")
        self.assertEqual(self.browser.find_by_id('demo_files_legend').first.text, u"Files from demo")
        self.assertEqual(self.browser.find_by_id('reads_PET_R1.fq_href').first['title'], u"Click to download reads_PET_R1.fq file")
        self.assertEqual(self.browser.find_by_id('reads_PET_R2.fq_href').first['title'], u"Click to download reads_PET_R2.fq file")
        self.assertEqual(self.browser.find_by_id('ref.fa_href').first['title'], u"Click to download ref.fa file")
        self.assertEqual(self.browser.find_by_id('seq.fa_href').first['title'], u"Click to download seq.fa file")
        self.assertEqual(self.browser.find_by_id('cmp.vcf_href').first['title'], u"Click to download cmp.vcf file")
        server_time = self.browser.find_by_id('server_time_val')
        self.assertTrue(len(server_time) > 0)
        self.assertTrue(len(self.browser.find_by_id('server_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('db_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('client_version_val')) > 0)
        server_time_after = server_time
        counter = 0
        while server_time_after == server_time and counter < 10:
            server_time_after = self.browser.find_by_id('server_time_val').first.text
            time.sleep(1)
            counter += 1
        self.assertNotEqual(server_time, server_time_after)

        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Pomoc')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Uzyskaj więcej informacji wysyłając wiadomość:')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Autorzy')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Robert Nowak - r.m.nowak@elka.pw.edu.pl')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Wiktor Kuśmirek')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Politechnika Warszawska,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Wydział Elektroniki i Technik Informacyjnych,')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Warszawa 2015')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Parametry aplikacji')), 1)
        self.assertEqual(self.browser.find_by_id('algorithms_href').first.text, u"Parametry i algorytmy wykorzystane w aplikacji")
        self.assertEqual(self.browser.find_by_id('algorithms_href').first['title'], u"Kliknij, aby zobaczyć opis parametrów i algorytmów wykorzystanych w aplikacji")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first.text, u"Formaty plików wejściowych i wyjściowych")
        self.assertEqual(self.browser.find_by_id('file_formats_href').first['title'], u"Kliknij, aby zobaczyć opis formatów plików wejściowych akceptowanych przez aplikację i opis formatów plików wyjściowych produkowanych przez aplikację")
        self.assertEqual(self.browser.find_by_id('demo_files_legend').first.text, u"Pliki z filmu")
        self.assertEqual(self.browser.find_by_id('reads_PET_R1.fq_href').first['title'], u"Kliknij, aby pobrać plik reads_PET_R1.fq")
        self.assertEqual(self.browser.find_by_id('reads_PET_R2.fq_href').first['title'], u"Kliknij, aby pobrać plik reads_PET_R2.fq")
        self.assertEqual(self.browser.find_by_id('ref.fa_href').first['title'], u"Kliknij, aby pobrać plik ref.fa")
        self.assertEqual(self.browser.find_by_id('seq.fa_href').first['title'], u"Kliknij, aby pobrać plik seq.fa")
        self.assertEqual(self.browser.find_by_id('cmp.vcf_href').first['title'], u"Kliknij, aby pobrać plik cmp.vcf")
        server_time = self.browser.find_by_id('server_time_val')     #.first.text
        self.assertTrue(len(server_time) > 0)
        self.assertTrue(len(self.browser.find_by_id('server_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('db_version_val')) > 0)
        self.assertTrue(len(self.browser.find_by_id('client_version_val')) > 0)
        server_time_after = server_time
        counter = 0
        while server_time_after == server_time and counter < 10:
            server_time_after = self.browser.find_by_id('server_time_val').first.text
            time.sleep(1)
            counter += 1
        self.assertNotEqual(server_time, server_time_after)

    def test12AlgorithmsTranslations(self):
        """test 'algorithms' page translations"""
        self.browser.find_by_id('showHelpWindowButton').click()
        self.browser.find_by_id('algorithms_href').click()

        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Parameters and algorithms used in application')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'It is recommended to read mentioned below articles, which contain descriptions of algorithms used in application:')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Application parameters:')), 1)
        self.assertEqual(self.browser.find_by_id('main_algorithms_article').first.text, u"Nowak R. Assembly of repetitive regions using next-generation sequencing data. Biocybern Biomed Eng (2015).")
        self.assertEqual(self.browser.find_by_id('velvet_paired_reads_article').first.text, u"Zerbino DR, Birney E. Velvet: Algorithms for de novo short read assembly using de Bruijn graphs. Genome Research. 2008;18(5):821-829. doi:10.1101/gr.074492.107.")
        self.assertEqual(self.browser.find_by_id('needleman_wunsch_article').first.text, u'Needleman, Saul B.; and Wunsch, Christian D. (1970). "A general method applicable to the search for similarities in the amino acid sequence of two proteins". Journal of Molecular Biology 48 (3): 443–53.')
        self.assertEqual(self.browser.find_by_id('hirschberg_article').first.text, u"D. S. Hirschberg. A linear space algorithm for computing maximal common subsequences. Comm. A.C.M. 18(6) p341-343, 1975.")
        self.assertEqual(self.browser.find_by_id('assembling_alg').first.text, u"Assembling:")
        self.assertEqual(self.browser.find_by_id('k_alg').first.text, u"k: de Bruijn graph dimension. It should be an odd number and k < L, where L is the average length of read.")
        self.assertEqual(self.browser.find_by_id('insert_size_mean_inward_alg').first.text, u"insert size mean for paired-end tags: the value associated with paired-end tags (the distance between the two reads in each pair is only known to lie within some range - normal distribution). Value of this parameter can be estimated based on the library.")
        self.assertEqual(self.browser.find_by_id('insert_size_std_dev_inward_alg').first.text, u"insert size std dev for paired-end tags: the value associated with paired-end tags (the distance between the two reads in each pair is only known to lie within some range - normal distribution). Value of this parameter can be estimated based on the library.")
        self.assertEqual(self.browser.find_by_id('insert_size_mean_outward_alg').first.text, u"insert size mean for mate-pairs: the value associated with mate-pairs (the distance between the two reads in each pair is only known to lie within some range - normal distribution). Value of this parameter can be estimated based on the library.")
        self.assertEqual(self.browser.find_by_id('insert_size_std_dev_outward_alg').first.text, u"insert size std dev for mate-pairs: the value associated with mate-pairs (the distance between the two reads in each pair is only known to lie within some range - normal distribution). Value of this parameter can be estimated based on the library.")
        self.assertEqual(self.browser.find_by_id('quality_threshold_alg').first.text, u"quality threshold: the quality threshold value (0-93) for reads from FASTQ files (reads will be trimmed to first symbol with quality less than this quality threshold value). For reads from file in FASTA format this parameter is nonessential - reads are not trimmed.")
        self.assertEqual(self.browser.find_by_id('bfcounter_threshold_alg').first.text, u"k-mer coverage threshold for occurrence table: the threshold of k-mer in occurrence table (each k-mer with counter less than this threshold will not be considered). This parameter is important in low-coverage set of reads (shuld be set to 0).")
        self.assertEqual(self.browser.find_by_id('single_edge_counter_threshold_alg').first.text, u"single graph edges coverage threshold: the threshold of edge counter in single (without paired-end tags) de Bruijn graph (each edge with counter less than this threshold will be deleted from single de Bruijn graph). This parameter is important in both assembly modes - for paired reads and for independent (not paired) reads.")
        self.assertEqual(self.browser.find_by_id('paired_reads_pet_threshold_from_alg').first.text, u"begin of interval of paired reads threshold for paired-end tags: the begin of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph). If reads are not paired, this parameter is nonessential.")
        self.assertEqual(self.browser.find_by_id('paired_reads_pet_threshold_to_alg').first.text, u"end of interval of paired reads threshold for paired-end tags: the end of interval of threshold of edge counter for paired-end tags (each paired-end tags increment specified counter) in unitigs graph (each edge with counter less than this threshold will be deleted from unitigs graph). If reads are not paired, this parameter is nonessential.")
        self.assertEqual(self.browser.find_by_id('paired_reads_mp_threshold_from_alg').first.text, u"begin of interval of paired reads threshold for mate-pairs: the begin of interval of threshold of edge counter for mate-pairs (each mate-pairs increment specified counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph).")
        self.assertEqual(self.browser.find_by_id('paired_reads_mp_threshold_to_alg').first.text, u"end of interval of paired reads threshold for mate-pairs: the end of interval of threshold of edge counter for mate-pairs (each mate-pairs increment specified counter) in contigs graph (each edge with counter less than this threshold will be deleted from contigs graph).")
        self.assertEqual(self.browser.find_by_id('correction_alg').first.text, u"correcting errors in graph: removing incorrect edges and vertices from de Bruijn graph. Algorithm iteratively removes tips shorter than 2*k from graph, where k is de Bruijn graph dimension.")
        self.assertEqual(self.browser.find_by_id('paired_reads_algorithm_alg').first.text, u"algorithm for paired reads: determine if paired-end tags should be considered until assembling process. Choose '-' if paired-end tags shouldn't be considered until assembling process, 'Velvet-Breadcrumb' otherwise. Option '-' can also be used for paired reads - then each read will be treated independently.Option 'Velvet-Breadcrumb' means that in assembling process Breadcrumb algorithm from Velvet assembler will be used.")
        self.assertEqual(self.browser.find_by_id('input_file_i1_1_alg').first.text, u"input file 1 (PET): file with reads for first end (if reads are paired and each end is stored in separate file, file name will propably contain 'R1' for Illumina) or file with all reads (if reads are not paired or if reads are paired and stored interleaved in one file). Inward orientation.")
        self.assertEqual(self.browser.find_by_id('input_file_i1_2_alg').first.text, u"input file 2 (PET): file with reads for second end (if reads are paired and each end is stored in separete file, file name will propably contain 'R2' for Illumina). This input file could be not choosen - if reads are not paired or if reads are paired and stored interleaved in one file. Inward orientation.")
        self.assertEqual(self.browser.find_by_id('input_file_o1_1_alg').first.text, u"input file 1 (MP): file with reads for first end (if reads are paired and each end is stored in separate file, file name will propably contain 'R1' for Illumina) or file with all reads (if reads are not paired or if reads are paired and stored interleaved in one file). Outward orientation.")
        self.assertEqual(self.browser.find_by_id('input_file_o1_2_alg').first.text, u"input file 2 (MP): file with reads for second end (if reads are paired and each end is stored in separete file, file name will propably contain 'R2' for Illumina). This input file could be not choosen - if reads are not paired or if reads are paired and stored interleaved in one file. Outward orientation.")
        self.assertEqual(self.browser.find_by_id('alignment_alg').first.text, u"Alignment:")
        self.assertEqual(self.browser.find_by_id('gap_penalty_alg').first.text, u"gap penalty: penalty when one character aligns to a gap in the other string.")
        self.assertEqual(self.browser.find_by_id('similarity_matrix_alg').first.text, u"similarity matrix: similarity between two objects (two characters). Higher scores are given to more-similar characters, and lower or negative scores for dissimilar characters.")
        self.assertEqual(self.browser.find_by_id('align_algorithm_alg').first.text, u"align algorithm: determine algorithm for alignment two sequence. Hirschberg's algorithm is recommended for large genomes, Needleman-Wunsch for small genomes.")
        self.assertEqual(self.browser.find_by_id('circular_alg').first.text, u"circular genome: determine if penalties for both ends of sequence will (not) be added.")
        self.assertEqual(self.browser.find_by_id('sequence_file_alg').first.text, u"sequence to align: file with sequence to align (file should contain single sequence or sequences in FASTA format).")
        self.assertEqual(self.browser.find_by_id('reference_file_alg').first.text, u"reference genome: file with reference genome (file should contain only one sequence in FASTA format).")

        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Parametry i algorytmy wykorzystane w aplikacji')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Zaleca się przeczytanie poniższych artykułów opisujących wykorzystane w aplikacji algorytmy:')), 1)
        self.assertEqual(len(self.browser.find_by_text(u'Parametry aplikacji:')), 1)
        self.assertEqual(self.browser.find_by_id('main_algorithms_article').first.text, u"Nowak R. Assembly of repetitive regions using next-generation sequencing data. Biocybern Biomed Eng (2015).")
        self.assertEqual(self.browser.find_by_id('velvet_paired_reads_article').first.text, u"Zerbino DR, Birney E. Velvet: Algorithms for de novo short read assembly using de Bruijn graphs. Genome Research. 2008;18(5):821-829. doi:10.1101/gr.074492.107.")
        self.assertEqual(self.browser.find_by_id('needleman_wunsch_article').first.text, u'Needleman, Saul B.; and Wunsch, Christian D. (1970). "A general method applicable to the search for similarities in the amino acid sequence of two proteins". Journal of Molecular Biology 48 (3): 443–53.')
        self.assertEqual(self.browser.find_by_id('hirschberg_article').first.text, u"D. S. Hirschberg. A linear space algorithm for computing maximal common subsequences. Comm. A.C.M. 18(6) p341-343, 1975.")
        self.assertEqual(self.browser.find_by_id('assembling_alg').first.text, u"Generacja kontigów:")
        self.assertEqual(self.browser.find_by_id('k_alg').first.text, u"k: wymiar grafu de Bruijn'a. Wartość k powinna być liczbą nieparzystą oraz k < L, gdzie L jest średnią długością odczytu.")
        self.assertEqual(self.browser.find_by_id('genome_length_alg').first.text, u"oryginalna długość genomu: długość badanego genomu (jednostką jest bp). Wartość długości badanego genomu nie powinna brać pod uwagę nici komplementarnej, np. dla bakterii E. coli wartość oryginalnej długości genomu powinna wynosić około 4000000.")
        self.assertEqual(self.browser.find_by_id('insert_size_mean_inward_alg').first.text, u"moda odległości pomiędzy odczytami (PET): wartość związana z assemblingiem wykorzystującym sparowane końce (PET) (odległość pomiędzy odczytami w każdej parze sparowanych odczytów należy do przedziału o rozkładzie normalnym). Wartość tego parametru może zostać oszacowana na podstawie użytej technologii sekwencjonowania badanej próbki DNA.")
        self.assertEqual(self.browser.find_by_id('insert_size_std_dev_inward_alg').first.text, u"odchylenie standardowe odległości pomiędzy odczytami (PET): wartość związana z assemblingiem wykorzystującym sparowane końce (PET) (odległość pomiędzy odczytami w każdej parze sparowanych odczytów należy do przedziału o rozkładzie normalnym). Wartość tego parametru może zostać oszacowana na podstawie użytej technologii sekwencjonowania badanej próbki DNA.")
        self.assertEqual(self.browser.find_by_id('insert_size_mean_outward_alg').first.text, u"moda odległości pomiędzy odczytami (MP): wartość związana z assemblingiem wykorzystującym sparowane końce (MP) (odległość pomiędzy odczytami w każdej parze sparowanych odczytów należy do przedziału o rozkładzie normalnym). Wartość tego parametru może zostać oszacowana na podstawie użytej technologii sekwencjonowania badanej próbki DNA.")
        self.assertEqual(self.browser.find_by_id('insert_size_std_dev_outward_alg').first.text, u"odchylenie standardowe odległości pomiędzy odczytami (MP): wartość związana z assemblingiem wykorzystującym sparowane końce (MP) (odległość pomiędzy odczytami w każdej parze sparowanych odczytów należy do przedziału o rozkładzie normalnym). Wartość tego parametru może zostać oszacowana na podstawie użytej technologii sekwencjonowania badanej próbki DNA.")
        self.assertEqual(self.browser.find_by_id('quality_threshold_alg').first.text, u"próg jakości: wartość progu jakości (0-93) dla odczytów z plików w formacie FASTQ (w assemblingu będą brane pod uwagę fragmenty odczytów od początku odczytu do pierwszego symbolu, którego jakość odczytu jest mniejsza niż wartość progu jakości). Dla odczytów z pliku w formacie FASTA ten parametr jest nieistotny - odczyty nie są skracane.")
        self.assertEqual(self.browser.find_by_id('bfcounter_threshold_alg').first.text, u"próg pokrycia k-meru w tabeli wystąpień: wartość progu występień k-meru w tablicy wystąpień (każdy k-mer z liczbą wystąpień mniejszą od tego progu nie zostanie rozpatrzony). Ten parametr jest ważny w przypadku niskiego pokrycia genomu odczytami (wówczas parametr powinien zostać ustawiony na 0).")
        self.assertEqual(self.browser.find_by_id('single_edge_counter_threshold_alg').first.text, u"próg pokrycia krawędzi dla pojedyńczego grafu: wartość progu wagi krawędzi w grafie de Bruijn'a nie uwzględniającym sparowanych końców (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu). Ten parametr jest ważny w obu trybach assemblingu - w trybie wykorzystującym sparowane końce i w trybie traktującym każdy odczyt niezależnie.")
        self.assertEqual(self.browser.find_by_id('paired_reads_pet_threshold_from_alg').first.text, u"początek przedziału progu połączeń sparowanymi końcami (PET): wartość początku przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu). Jeśli odczyty nie są sparowane, ten parametr jest nieistotny.")
        self.assertEqual(self.browser.find_by_id('paired_reads_pet_threshold_to_alg').first.text, u"koniec przedziału progu połączeń sparowanymi końcami (PET): wartość końca przedziału progu wagi krawędzi (PET) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie niesparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu). Jeśli odczyty nie są sparowane, ten parametr jest nieistotny.")
        self.assertEqual(self.browser.find_by_id('paired_reads_mp_threshold_from_alg').first.text, u"początek przedziału progu połączeń sparowanymi końcami (MP): wartość początku przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu).")
        self.assertEqual(self.browser.find_by_id('paired_reads_mp_threshold_to_alg').first.text, u"koniec przedziału progu połączeń sparowanymi końcami (MP): wartość końca przedziału progu wagi krawędzi (MP) (każda para sparowanych odczytów zwiększa wagę odpowiedniej krawędzi) w grafie sparowanych kontigów (każda krawędź z wagą mniejszą od tego progu zostanie usunięta z grafu).")
        self.assertEqual(self.browser.find_by_id('correction_alg').first.text, u"poprawianie błędów w grafie: usuwanie niepoprawnych krawędzi i wierzchołków z grafu de Bruijn'a. Algorytm usuwa martwe końce grafu krótsze niż 2*k, gdzie k to wymiar grafu de Bruijn'a.")
        self.assertEqual(self.browser.find_by_id('paired_reads_algorithm_alg').first.text, u"algorytm wykorzystywania sparowanych końców: określa algorytm wykorzystywania sparowanych końców. Wybierz '-' jeśli sparowane końce nie powinny być brane pod uwagę w procesie assemblingu, w przeciwnym wypadku wybierz 'Velvet-Breadcrumb'. Opcja '-' może zostać również użyta dla sparowanych odczytów - wówczas każdy odczyt zostanie potraktowany niezależnie. Opcja 'Velvet-Breadcrumb' oznacza, że podczas procesu assemblingu zostanie wykorzystany algorytm Breadcrumb z assemblera Velvet.")
        self.assertEqual(self.browser.find_by_id('input_file_i1_1_alg').first.text, u"plik wejściowy 1 (PET): plik z odczytami dla pierwszego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku, nazwa pliku powinna prawdopodobnie zawierać 'R1' dla odczytów z sekwencera Illumina) lub plik z wszystkimi odczytami (jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku). Orientacja inward.")
        self.assertEqual(self.browser.find_by_id('input_file_i1_2_alg').first.text, u"plik wejściowy 2 (PET): plik z odczytami dla drugiego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku, nazwa pliku powinna prawdopodobnie zawierać 'R2' dla odczytów z sekwencera Illumina). Ten plik wejściowy może pozostać pusty - jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku. Orientacja inward.")
        self.assertEqual(self.browser.find_by_id('input_file_o1_1_alg').first.text, u"plik wejściowy 1 (MP): plik z odczytami dla pierwszego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku, nazwa pliku powinna prawdopodobnie zawierać 'R1' dla odczytów z sekwencera Illumina) lub plik z wszystkimi odczytami (jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku). Orientacja outward.")
        self.assertEqual(self.browser.find_by_id('input_file_o1_2_alg').first.text, u"plik wejściowy 2 (MP): plik z odczytami dla drugiego końca (jeśli odczyty są sparowane i każdy koniec znajduje się w oddzielnym pliku, nazwa pliku powinna prawdopodobnie zawierać 'R2' dla odczytów z sekwencera Illumina). Ten plik wejściowy może pozostać pusty - jeśli odczyty nie są sparowane lub odczyty są sparowane i umieszczone naprzemiennie w jednym pliku. Orientacja outward.")
        self.assertEqual(self.browser.find_by_id('alignment_alg').first.text, u"Uliniowienie:")
        self.assertEqual(self.browser.find_by_id('gap_penalty_alg').first.text, u"kara za przerwę: kara za dopasowanie znaku z jednej sekwencji do przerwy w drugiej sekwencji.")
        self.assertEqual(self.browser.find_by_id('similarity_matrix_alg').first.text, u"macierz podobieństwa: podobieństwo pomiędzy dwoma obiektami (dwoma znakami). Wyższa wartość powinna zostać dana dla bardziej podobnych znaków, niższa lub negatywna dla mniej podobnych znaków.")
        self.assertEqual(self.browser.find_by_id('align_algorithm_alg').first.text, u"algorytm uliniowienia: określa algorytm dla uliniowienia dwóch sekwencji. Algorytm Hirschberg jest zalecany dla dużych genomów, algorytm Needleman-Wunsch dla małych genomów.")
        self.assertEqual(self.browser.find_by_id('circular_alg').first.text, u"genom kołowy: określa czy kary dla obu końców sekwencji (nie) będą uwzględniane.")
        self.assertEqual(self.browser.find_by_id('sequence_file_alg').first.text, u"porównywana sekwencja: plik z sekwencją do uliniowienia (plik powinien zawierać pojedyńczą lub kilka sekwencji w formacie FASTA).")
        self.assertEqual(self.browser.find_by_id('reference_file_alg').first.text, u"genom referencyjny: plik z genomem referencyjnym (plik powinien zawierać tylko jedną sekwencję w formacie FASTA).")

    def test13FileFormatsTranslations(self):
        """test 'file_formats' page translations"""
        self.browser.find_by_id('showHelpWindowButton').click()
        self.browser.find_by_id('file_formats_href').click()

        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Input and output file formats')), 1)
        self.assertEqual(self.browser.find_by_id('assembling_file_formats_section').first.text, u"Assembling")
        self.assertEqual(self.browser.find_by_id('alignment_file_formats_section').first.text, u"Alignment")
        self.assertEqual(len(self.browser.find_by_text(u'Input files')), 2)
        self.assertEqual(len(self.browser.find_by_text(u'Output files')), 2)

        self.assertEqual(self.browser.find_by_id('assembling_in_fasta_file_format').first.text, u"FASTA: Text-based format for representing nucleotide sequence in which single nucleotide is represented by single letter. Each sequence in FASTA format begins with a single-line description, followed by lines of sequence data. The description line is distinguished from the sequence data by a greater-than ('>') symbol in the first column. The word following the '>' symbol is the identifier of the sequence, and the rest of the line is the description (both are optional). There should be no space between the '>' and the first letter of the identifier. The sequence ends if another line starting with a '>' appears; this indicates the start of another sequence. A simple example of FASTA format:")
        self.assertEqual(self.browser.find_by_id('assembling_in_fastq_file_format').first.text, u"FASTQ: Text-based format for storing both a biological sequence (usually nucleotide sequence) and its corresponding quality scores. Both the sequence letter and quality score are each encoded with a single ASCII character for brevity. A FASTQ file normally uses four lines per sequence. First line begins with a '@' character and is followed by a sequence identifier and an optional description (like a FASTA title line). Second line is the raw sequence letters (one letter for each nucleotide). Third line begins with a '+' character and is optionally followed by the same sequence identifier (and any description) again. Last (fourth) line encodes the quality values for the sequence in second line, and must contain the same number of symbols as letters in the sequence. A simple example of FASTQ format:")
        self.assertEqual(self.browser.find_by_id('assembling_out_fasta_file_format').first.text, u"FASTA: Text-based format for representing nucleotide sequence in which single nucleotide is represented by single letter. Each sequence in FASTA format begins with a single-line description, followed by lines of sequence data. The description line is distinguished from the sequence data by a greater-than ('>') symbol in the first column. The word following the '>' symbol in assembling output FASTA format contains three elements separated by '_' symbol. First element is equal to assembly task name (output file name). Second element is sequence record number (sequences are records from 0). Third (last) element is equal to sequence length. There should be no space between the '>' and the first letter of the sequence description. The sequence ends if another line starting with a '>' appears; this indicates the start of another sequence. A simple example of assembling task result in FASTA format:")
        self.assertEqual(self.browser.find_by_id('assem_result_interpret').first.text, u"Above example shows the result of exemplary assembling task. The result contains two sequences with lengths equal to 60 and 55 nucleotides (last element of description lines). Task name (output file name) is equal to 'out' - first element of description lines.")
        self.assertEqual(self.browser.find_by_id('alignment_in_fasta_file_format').first.text, u"FASTA: Text-based format for representing nucleotide sequence in which single nucleotide is represented by single letter. Each sequence in FASTA format begins with a single-line description, followed by lines of sequence data. The description line is distinguished from the sequence data by a greater-than ('>') symbol in the first column. The word following the '>' symbol is the identifier of the sequence, and the rest of the line is the description (both are optional). There should be no space between the '>' and the first letter of the identifier. The sequence ends if another line starting with a '>' appears; this indicates the start of another sequence. It is important that file with reference genome sequence for alignment task should contain only one sequence. A simple example of FASTA format:")
        self.assertEqual(self.browser.find_by_id('alignment_out_fasta_file_format').first.text, u"VCF: The Variant Call Format in version 4.0 is text-based format for storing gene sequence variations. VCF format for alignment task result starts with one line with meta-information (this line starts with double '#' sign) which describes VCF format version. Second line (this line starts with single '#' sign) is the header for table with gene sequence variations (next lines are optional, they represent variations, each line for single variation). Original VCF format in version 4.0 contains 8 columns, for alignment task result we use only 4 of them: POS - position in reference genome, ID - sequence id, REF - nucleotides in reference genome start in reference genome with position POS, ALT - certain (the same position) nucleotides in sequence. A simple example of alignment task result in VCF format:")
        self.assertEqual(self.browser.find_by_id('align_result_interpret').first.text, u"Above example shows the result of exemplary alignment task. There are three differences between reference genome and input sequence: there is one SNP ( Single Nucleotide Polymorphism), one insertion mutation and one deletion mutation.")
        self.assertEqual(self.browser.find_by_id('assembling_in_fasta_file_format_example').first.text, u">gi|31563518|ref|NP_852610.1| [Homo sapiens]\nAACTCATCTCATCGACATACTCATCATCCGACGACGACTCTCTCTGCAGCAGCATCCCCC\n>gi|31563518|ref|NP_852610.1| [Homo sapiens]\nTCTCAGCAGCATCATCATCAGCGCGCATCATCGCGCGACTCATCGGGCATACTCAGGCCA")
        self.assertEqual(self.browser.find_by_id('assembling_in_fastq_file_format_example').first.text, u"@HWUSI-EAS100R:5:72:940:1973#0/1\nACTACGCGACTACTACTCGCGCATCATCATCATCTCTCAGGGCGCGACTAATCTCGCGCC\n+\nFFFFFFFFBFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFAFFFFFF?<?BBBBBBB\n@HWUSI-EAS100R:5:72:940:1973#0/2\nACACTCTCAGCGCGCGCATCACACACCTCATCATCATCGCGCAGCATCATCTACAGCGCC\n+\nAAAAAAACCCCBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFF<>>>>>>>>>>AA")
        self.assertEqual(self.browser.find_by_id('assembling_out_fasta_file_format_example').first.text, u">out_0_60\nAACTACTCATGACTCGCGCATCATCAGCGCGCGCGCTACTACGACGACAGCACCCGCGGA\n>out_1_55\nACTCGCTCTACATCGACGACGACTACTCAGCGCGCTACAACATCACCATTTACCC")
        self.assertEqual(self.browser.find_by_id('alignment_in_fasta_file_format_example').first.text, u">gi|31563518|ref|NP_852610.1| [Homo sapiens]\nAACTACTCTCTACTCTCATCTCTCTCATCAATGGGCGCTCTGGGGCATCAGCGCGGCAT")

        self.assertEqual(len(self.browser.find_by_text(u'References')), 1)
        self.assertEqual(self.browser.find_by_id('fasta_wiki_reference').first.text, u"wikipedia.org/wiki/FASTA_format")
        self.assertEqual(self.browser.find_by_id('fastq_wiki_reference').first.text, u"wikipedia.org/wiki/FASTQ_format")
        self.assertEqual(self.browser.find_by_id('vcf_wiki_reference').first.text, u"wikipedia.org/wiki/Variant_Call_Format")
        self.assertEqual(self.browser.find_by_id('vcf_1000genomes_reference').first.text, u"1000genomes.org/wiki/Analysis/Variant Call Format/vcf-variant-call-format-version-40")

        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text(u'DnaAssembler - Formaty plików wejściowych i wyjściowych')), 1)
        self.assertEqual(self.browser.find_by_id('assembling_file_formats_section').first.text, u"Generacja kontigów")
        self.assertEqual(self.browser.find_by_id('alignment_file_formats_section').first.text, u"Uliniowienie")
        self.assertEqual(len(self.browser.find_by_text(u'Pliki wejściowe')), 2)
        self.assertEqual(len(self.browser.find_by_text(u'Pliki wyjściowe')), 2)

        self.assertEqual(self.browser.find_by_id('assembling_in_fasta_file_format').first.text, u"FASTA: Tekstowy format reprezentacji sekwencji nukleotydów, w którym każdy nukleotyd reprezentowany jest przez pojedyńczą literę. Każda sekwencja w formacie FASTA rozpoczyna się od pojedyńczej linii opisu, po której następują linie z daną sekwencją. Linia oznaczająca opis sekwencji jest wyróżniana znakiem większości ('>') w pierwszej kolumnie. Słowo po znaku większości oznacza identyfikator sekwencji, reszta linii to jej opis (oba elementy są opcjonalne). Nie powinno być przerwy pomiędzy znakiem '>' a pierwszą literą identyfikatora sekwencji. Sekwencja kończy się, jeśli kolejna linia zaczyna się od znaku '>', co oznacza początek nowej sekwencji. Prosty przykład formatu FASTA:")
        self.assertEqual(self.browser.find_by_id('assembling_in_fastq_file_format').first.text, u"FASTQ: Tekstowy format przechowywania biologicznej sekwencji (najczęściej sekwencji nukleotydów) i odpowiadającej jej ocenie jakości. Każda litera sekwencji i znak jakości są pojedyńczymi znakami kodu ASCII. Format FASTQ używa czterech linii dla pojedyńczej sekwencji. Pierwsza linia zaczyna się znakiem '@', po której następuje identyfikator sekwencji i opcjonalny opis (podobnie jak w linii tytułowej formatu FASTA). Druga linia zawiera ciąg liter dla danej sekwencji (jedna litera dla pojedyńczego nukleotydu). Trzecia linia rozpoczyna się znakiem '+' po którym może opcjonalnie występować identyfikator i opis sekwencji. Ostatnia (czwarta) linia zawiera ciąg znaków jakości dla sekwencji z drugiej linii, czwarta linia musi zawierać tyle samo symboli co druga. Prosty przykład formatu FASTQ:")
        self.assertEqual(self.browser.find_by_id('assembling_out_fasta_file_format').first.text, u"FASTA: Tekstowy format reprezentacji sekwencji nukleotydów, w którym każdy nukleotyd reprezentowany jest przez pojedyńczą literę. Każda sekwencja w formacie FASTA rozpoczyna się od pojedyńczej linii opisu, po której następują linie z daną sekwencją. Linia oznaczająca opis sekwencji jest wyróżniana znakiem większości ('>') w pierwszej kolumnie. Słowo po znaku większości w formacie FASTA dla sekwencji wynikowych generacji kontigów zawiera trzy elementy oddzielone znakiem '_'. Pierwszy element stanowi nazwę zadania generacji kontigów (nazwę pliku wyjściowego). Drugi element jest numerem porządkowym sekwencji (sekwencje są numerowane od 0). Trzeci (ostatni) element to długość opisywaniej sekwencji. Nie powinno być przerwy pomiędzy znakiem '>' a pierwszą literą identyfikatora sekwencji. Sekwencja kończy się, jeśli kolejna linia zaczyna się od znaku '>', co oznacza początek nowej sekwencji. Prosty przykład formatu FASTA dla wyniku zadania generacji kontigów:")
        self.assertEqual(self.browser.find_by_id('assem_result_interpret').first.text, u"Powyższy przykład prezentuje wynik przykładowego zadania generacji kontigów. Wynik zawiera dwie sekwencje o długości 60 i 55 nukleotydów (ostatnie elementy linii opisujących sekwencje). Nazwa zadania (nazwa pliku wynikowego) to 'out' - pierwsze elementy linii opisujących sekwencje.")
        self.assertEqual(self.browser.find_by_id('alignment_in_fasta_file_format').first.text, u"FASTA: Tekstowy format reprezentacji sekwencji nukleotydów, w którym każdy nukleotyd reprezentowany jest przez pojedyńczą literę. Każda sekwencja w formacie FASTA rozpoczyna się od pojedyńczej linii opisu, po której następują linie z daną sekwencją. Linia oznaczająca opis sekwencji jest wyróżniana znakiem większości ('>') w pierwszej kolumnie. Słowo po znaku większości oznacza identyfikator sekwencji, reszta linii to jej opis (oba elementy są opcjonalne). Nie powinno być przerwy pomiędzy znakiem '>' a pierwszą literą identyfikatora sekwencji. Sekwencja kończy się, jeśli kolejna linia zaczyna się od znaku '>', co oznacza początek nowej sekwencji. Ważne jest, aby plik z genomem referencyjnym dla zadań uliniowienia zawierał jedną sekwencję. Prosty przykład formatu FASTA:")
        self.assertEqual(self.browser.find_by_id('alignment_out_fasta_file_format').first.text, u"VCF: Variant Call Format w wersji 4.0, tekstowy format przechowywania różnic pomiędzy sekwencjami. Format VCF dla wyniku zadań uliniowienia sekwencji rozpoczyna się linią zawierającą meta-informacje (ta linia rozpoczyna się podwójnym znakiem '#'), która opisuje wersję formatu VCF. Druga linia (ta linia rozpoczyna się pojedyńczym znakiem '#') jest nagłówkiem tabeli w różnicami w sekwencjach (następne linię są opcjonalne, opisują różnicę w badanych sekwencjach, każda linia dla pojedyńczej różnicy). Oryginalny format w wersji VCF zawiera 8 kolumn, dla wyników zadania uliniowienia zostały użyte 4 z nich: POS - pozycja w referencyjnym genomie, ID - identyfikator sekwencji, REF - ciąg nukleotydów rozpoczynających się w referencyjnym genomie od pozycji POS, ALT - odpowiednie (ta sama pozycja) nukleotydy w sekwencji. Prosty przykład wyniku zadania uliniowienia w formacie VCF:")
        self.assertEqual(self.browser.find_by_id('align_result_interpret').first.text, u"Powyższy przykład prezentuje wynik przykładowego zadania uliniowienia sekwencji. Występują trzy różnice pomiędzy referencyjnym genomem i wejściową sekwencją: jeden SNP (polimorfizm pojedynczego nukleotydu), jedna insercja i jedna delecja.")
        self.assertEqual(self.browser.find_by_id('assembling_in_fasta_file_format_example').first.text, u">gi|31563518|ref|NP_852610.1| [Homo sapiens]\nAACTCATCTCATCGACATACTCATCATCCGACGACGACTCTCTCTGCAGCAGCATCCCCC\n>gi|31563518|ref|NP_852610.1| [Homo sapiens]\nTCTCAGCAGCATCATCATCAGCGCGCATCATCGCGCGACTCATCGGGCATACTCAGGCCA")
        self.assertEqual(self.browser.find_by_id('assembling_in_fastq_file_format_example').first.text, u"@HWUSI-EAS100R:5:72:940:1973#0/1\nACTACGCGACTACTACTCGCGCATCATCATCATCTCTCAGGGCGCGACTAATCTCGCGCC\n+\nFFFFFFFFBFFFFFFFFFFFFFCFFFFFFFFFFFFFFFFFFFFAFFFFFF?<?BBBBBBB\n@HWUSI-EAS100R:5:72:940:1973#0/2\nACACTCTCAGCGCGCGCATCACACACCTCATCATCATCGCGCAGCATCATCTACAGCGCC\n+\nAAAAAAACCCCBBBBBBBBBBFFFFFFFFFFFFFFFFFFFFFFFFFF<>>>>>>>>>>AA")
        self.assertEqual(self.browser.find_by_id('assembling_out_fasta_file_format_example').first.text, u">out_0_60\nAACTACTCATGACTCGCGCATCATCAGCGCGCGCGCTACTACGACGACAGCACCCGCGGA\n>out_1_55\nACTCGCTCTACATCGACGACGACTACTCAGCGCGCTACAACATCACCATTTACCC")
        self.assertEqual(self.browser.find_by_id('alignment_in_fasta_file_format_example').first.text, u">gi|31563518|ref|NP_852610.1| [Homo sapiens]\nAACTACTCTCTACTCTCATCTCTCTCATCAATGGGCGCTCTGGGGCATCAGCGCGGCAT")

        self.assertEqual(len(self.browser.find_by_text(u'Źródła')), 1)
        self.assertEqual(self.browser.find_by_id('fasta_wiki_reference').first.text, u"wikipedia.org/wiki/FASTA_format")
        self.assertEqual(self.browser.find_by_id('fastq_wiki_reference').first.text, u"wikipedia.org/wiki/FASTQ_format")
        self.assertEqual(self.browser.find_by_id('vcf_wiki_reference').first.text, u"wikipedia.org/wiki/Variant_Call_Format")
        self.assertEqual(self.browser.find_by_id('vcf_1000genomes_reference').first.text, u"1000genomes.org/wiki/Analysis/Variant Call Format/vcf-variant-call-format-version-40")

    def test14FilesTranslations(self):
        """test 'files' page translations"""
        self.clickCssLink('#a_user_tab_FILES')
        self.waitForElement('chooseUploadFile')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        self.waitForElement('addTaskButton')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.browser.find_by_id('addTaskName').fill('testOutput')
        self.waitForElement('add_i1_2_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('add_i1_2', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        self.clickCssLink('#a_user_tab_FILES')
        self.waitForElement('deleteFileButton_private/functional_test_user/functional_test_input.fasta')
        time.sleep(1)
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Files')), 1)
        self.assertEqual(self.browser.find_by_id('chooseUploadFile').first['title'], u"Click to choose file to upload on server")
        self.assertEqual(self.browser.find_by_id('uploadFileButton').first.text, u'Upload!')
        self.assertEqual(self.browser.find_by_id('uploadFileButton').first['title'], u"Click to upload file on server")
        self.assertEqual(self.browser.find_by_id('uploadExampleFilesButton').first.text, u'Upload example files!')
        self.assertEqual(self.browser.find_by_id('uploadExampleFilesButton').first['title'], u"Click to upload example files on server")
        self.assertEqual(self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Click to delete file")
        self.assertEqual(self.browser.find_by_id('seeFileContentsButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Click to see file contents")
        self.assertEqual(self.browser.find_by_id('downloadFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Click to download file")
        self.assertEqual(len(self.browser.find_by_text('Upload file')), 1)
        self.assertEqual(len(self.browser.find_by_text('FASTA format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('FASTQ format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('VCF format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('Unknown format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('File name')), 4)
        self.assertEqual(len(self.browser.find_by_text('Upload date')), 4)
        self.assertEqual(len(self.browser.find_by_text('Delete file')), 4)
        self.assertEqual(len(self.browser.find_by_text('See file contents')), 4)
        self.assertEqual(len(self.browser.find_by_text('Download file')), 4)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'File is used by some task, delete this task firstly.', alert.text)
        alert.accept()
        time.sleep(2.5)
        self.clickCssLink('#a_lang_pl')
        self.waitForElement('chooseUploadFile')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Pliki')), 1)
        self.assertEqual(self.browser.find_by_id('chooseUploadFile').first['title'], u"Kliknij, aby wybrać plik, który zostanie załadowany na serwer")
        self.assertEqual(self.browser.find_by_id('uploadFileButton').first.text, u'Załaduj na serwer!')
        self.assertEqual(self.browser.find_by_id('uploadFileButton').first['title'], u"Kliknij, aby załadować plik na serwer")
        self.assertEqual(self.browser.find_by_id('uploadExampleFilesButton').first.text, u'Załaduj przykładowe pliki na serwer!')
        self.assertEqual(self.browser.find_by_id('uploadExampleFilesButton').first['title'], u"Kliknij, aby załadować przykładowe pliki na serwer")
        self.assertEqual(self.browser.find_by_id('seeFileContentsButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Kliknij, aby zobaczyć zawartość pliku")
        self.assertEqual(self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Kliknij, aby usunąć plik")
        self.assertEqual(self.browser.find_by_id('downloadFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Kliknij, aby pobrać plik")
        self.assertEqual(len(self.browser.find_by_text('Ładowanie pliku na serwer')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w formacie FASTA')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w formacie FASTQ')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w formacie VCF')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w nieznanym formacie')), 1)
        self.assertEqual(len(self.browser.find_by_text('Nazwa pliku')), 4)
        self.assertEqual(len(self.browser.find_by_text('Data załadowania na serwer')), 4)
        self.assertEqual(len(self.browser.find_by_text('Usuń plik')), 4)
        self.assertEqual(len(self.browser.find_by_text('Zobacz zawartość pliku')), 4)
        self.assertEqual(len(self.browser.find_by_text('Pobierz plik')), 4)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Plik jest używany przez zadanie, usuń najpierw to zadanie.', alert.text)
        alert.accept()
        time.sleep(1.5)

    def test15Files(self):
        """test 'files' page"""
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 0)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 0)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 0)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fastq")
        self.browser.find_by_id('uploadFileButton').click()
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 1)
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.browser.find_by_id('addTaskName').fill('testOut.fa')
        self.waitForElement('add_i1_2_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('add_i1_2', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 1)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        alert.accept()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 1)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fastq').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 0)
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(3)
        self.browser.find_by_id('deleteTaskButton').click()
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 0)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 0)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 0)
        self.browser.find_by_id('uploadExampleFilesButton').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('ref.fa')), 1)
        self.assertEqual(len(self.browser.find_by_text('seq.fa')), 1)
        self.assertEqual(len(self.browser.find_by_text('cmp.vcf')), 1)
        self.assertEqual(len(self.browser.find_by_text('reads_R1.fq')), 1)
        self.assertEqual(len(self.browser.find_by_text('reads_R2.fq')), 1)

    def test16Alignment(self):
        """test 'alignment' page"""
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        self.clickCssLink('#a_user_tab_ALIGNMENT')
        self.waitForElement('newAlignTaskName')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 0)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 0)
        self.browser.find_by_id('newAlignTaskName').fill('testAlignTask')
        time.sleep(3)
        self.waitForElement('sequenceFile_option_functional_test_input.fasta')
        self.waitForElement('referenceFile_option_functional_test_input.fasta')
        time.sleep(1.5)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        self.browser.select('alignAlgorithmSelect', 'nw')
        self.browser.check('circularCheckbox')
        self.browser.check('alignShowResultUrlCheckbox')
        self.browser.find_by_id('gapPenalty').fill(0)
        self.browser.find_by_id('AA').fill(1)
        self.browser.find_by_id('AC').fill(2)
        self.browser.find_by_id('AG').fill(3)
        self.browser.find_by_id('AT').fill(4)
        self.browser.find_by_id('CA').fill(5)
        self.browser.find_by_id('CC').fill(6)
        self.browser.find_by_id('CG').fill(7)
        self.browser.find_by_id('CT').fill(8)
        self.browser.find_by_id('GA').fill(9)
        self.browser.find_by_id('GC').fill(10)
        self.browser.find_by_id('GG').fill(11)
        self.browser.find_by_id('GT').fill(12)
        self.browser.find_by_id('TA').fill(13)
        self.browser.find_by_id('TC').fill(14)
        self.browser.find_by_id('TG').fill(15)
        self.browser.find_by_id('TT').fill(16)
        self.browser.find_by_id('alignButton').click()
        time.sleep(2.0)
        alert = self.browser.get_alert()    # alert with url to result
        alert.accept()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_text('testAlignTask')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 4)    # 2 for alignment task + 2 for choosing sequence/reference file for new task
        self.assertEqual(len(self.browser.find_by_text('NW')), 1)
        self.assertEqual(len(self.browser.find_by_text('true')), 1)
        self.assertTrue(len(self.browser.find_by_text('0')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('1')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('2')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('3')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('4')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('5')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('6')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('7')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('8')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('9')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('10')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('11')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('12')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('13')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('14')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('15')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('16')) >= 1)
        time.sleep(5.0)
        self.browser.find_by_id('deleteAlignTaskButton').click()
        time.sleep(1.5)
        self.browser.find_by_id('newAlignTaskName').fill('testAlignTask2')
        self.waitForElement('sequenceFile_option_functional_test_input.fasta')
        self.waitForElement('referenceFile_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        self.browser.select('alignAlgorithmSelect', 'h')
        self.browser.uncheck('circularCheckbox')
        self.browser.uncheck('alignShowResultUrlCheckbox')
        self.browser.find_by_id('gapPenalty').fill(0)
        self.browser.find_by_id('AA').fill(1)
        self.browser.find_by_id('AC').fill(2)
        self.browser.find_by_id('AG').fill(3)
        self.browser.find_by_id('AT').fill(4)
        self.browser.find_by_id('CA').fill(5)
        self.browser.find_by_id('CC').fill(6)
        self.browser.find_by_id('CG').fill(7)
        self.browser.find_by_id('CT').fill(8)
        self.browser.find_by_id('GA').fill(9)
        self.browser.find_by_id('GC').fill(10)
        self.browser.find_by_id('GG').fill(11)
        self.browser.find_by_id('GT').fill(12)
        self.browser.find_by_id('TA').fill(13)
        self.browser.find_by_id('TC').fill(14)
        self.browser.find_by_id('TG').fill(15)
        self.browser.find_by_id('TT').fill(16)
        self.browser.find_by_id('alignButton').click()
        time.sleep(3.0)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_text('testAlignTask2')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 4)    # 2 for alignment task + 2 for choosing sequence/reference file for new task
        self.assertEqual(len(self.browser.find_by_text('H')), 1)
        self.assertEqual(len(self.browser.find_by_text('false')), 1)
        self.assertTrue(len(self.browser.find_by_text('0')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('1')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('2')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('3')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('4')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('5')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('6')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('7')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('8')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('9')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('10')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('11')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('12')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('13')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('14')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('15')) >= 1)
        self.assertTrue(len(self.browser.find_by_text('16')) >= 1)

        self.browser.find_by_id('deleteAlignTaskButton').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 0)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 0)

    def test17AlignmentTranslations(self):
        """test 'alignment' page translations"""
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        self.clickCssLink('#a_user_tab_ALIGNMENT')
        self.waitForElement('newAlignTaskName')
        time.sleep(1)
        self.browser.find_by_id('newAlignTaskName').fill('testAlignTask')
        self.waitForElement('sequenceFile_option_functional_test_input.fasta')
        self.waitForElement('referenceFile_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        self.browser.find_by_id('alignButton').click()
        time.sleep(3)
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Alignment')), 1)
        self.assertEqual(len(self.browser.find_by_text('Align sequence to DNA reference genome')), 1)
        self.assertEqual(len(self.browser.find_by_text('task name:')), 1)
        self.assertEqual(self.browser.find_by_id('newAlignTaskName').first['title'], u"result of this task will be stored in the file which name will be same like task name")
        self.assertEqual(len(self.browser.find_by_text('align algorithm:')), 1)
        self.assertEqual(self.browser.find_by_id('alignAlgorithmSelect').first['title'], u"choose align algorithm")
        self.assertEqual(len(self.browser.find_by_text('circular genome:')), 1)
        self.assertEqual(self.browser.find_by_id('circularCheckbox').first['title'], u"check, if genome is circular - penalties for both ends will not be added")
        self.assertEqual(len(self.browser.find_by_text('email notification:')), 1)
        self.assertEqual(self.browser.find_by_id('alignResultNotificationCheckbox').first['title'], u"check, if you are submitting a long task and would like to be informed by email when it finishes")
        self.assertEqual(len(self.browser.find_by_text('email address:')), 1)
        self.assertEqual(self.browser.find_by_id('alignMailAddress').first['title'], u"Enter email address")
        self.assertEqual(len(self.browser.find_by_text('show url to result:')), 1)
        self.assertEqual(self.browser.find_by_id('alignShowResultUrlCheckbox').first['title'], u"check, if you want url to result")
        self.assertEqual(len(self.browser.find_by_text('gap penalty:')), 1)
        self.assertEqual(self.browser.find_by_id('gapPenalty').first['title'], u"penalty for gap in sequence/reference")
        self.assertEqual(len(self.browser.find_by_text('sequence to align:')), 1)
        self.assertEqual(self.browser.find_by_id('sequenceFile').first['title'], u"Click to choose file with sequence to align (file should be in FASTA format)")
        self.assertEqual(len(self.browser.find_by_text('reference genome:')), 1)
        self.assertEqual(self.browser.find_by_id('referenceFile').first['title'], u"Click to choose file with reference genome (file should be in FASTA format)")
        self.assertEqual(self.browser.find_by_id('alignButton').first.text, u'Align!')
        self.assertEqual(self.browser.find_by_id('alignButton').first['title'], u"Click to align sequences")
        self.assertEqual(len(self.browser.find_by_text('A')), 2)
        self.assertEqual(len(self.browser.find_by_text('C')), 2)
        self.assertEqual(len(self.browser.find_by_text('G')), 2)
        self.assertEqual(len(self.browser.find_by_text('T')), 2)
        self.assertEqual(len(self.browser.find_by_text('id')), 1)
        self.assertEqual(len(self.browser.find_by_text('task name')), 1)
        self.assertEqual(len(self.browser.find_by_text('sequence file name')), 1)
        self.assertEqual(len(self.browser.find_by_text('reference file name')), 1)
        self.assertEqual(len(self.browser.find_by_text('align algorithm')), 1)
        self.assertEqual(len(self.browser.find_by_text('circular genome')), 1)
        self.assertEqual(len(self.browser.find_by_text('gap penalty')), 1)
        self.assertEqual(len(self.browser.find_by_text('AA')), 1)
        self.assertEqual(len(self.browser.find_by_text('AC')), 1)
        self.assertEqual(len(self.browser.find_by_text('AG')), 1)
        self.assertEqual(len(self.browser.find_by_text('AT')), 1)
        self.assertEqual(len(self.browser.find_by_text('CA')), 1)
        self.assertEqual(len(self.browser.find_by_text('CC')), 1)
        self.assertEqual(len(self.browser.find_by_text('CG')), 1)
        self.assertEqual(len(self.browser.find_by_text('CT')), 1)
        self.assertEqual(len(self.browser.find_by_text('GA')), 1)
        self.assertEqual(len(self.browser.find_by_text('GC')), 1)
        self.assertEqual(len(self.browser.find_by_text('GG')), 1)
        self.assertEqual(len(self.browser.find_by_text('GT')), 1)
        self.assertEqual(len(self.browser.find_by_text('TA')), 1)
        self.assertEqual(len(self.browser.find_by_text('TC')), 1)
        self.assertEqual(len(self.browser.find_by_text('TG')), 1)
        self.assertEqual(len(self.browser.find_by_text('TT')), 1)
        self.assertEqual(len(self.browser.find_by_text('input provide time')), 1)
        self.assertEqual(len(self.browser.find_by_text('output provide time')), 1)
        self.assertEqual(len(self.browser.find_by_text('see result')), 1)
        self.assertEqual(len(self.browser.find_by_text('download result')), 1)
        self.assertEqual(len(self.browser.find_by_text('delete')), 1)
        self.assertEqual(len(self.browser.find_by_text('break')), 1)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('breakAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 1)
        self.assertEqual(self.browser.find_by_id('deleteAlignTaskButton').first['title'], u"Click to delete this task")
        self.assertEqual(self.browser.find_by_id('breakAlignTaskButton').first['title'], u"Click to break this task")
        self.assertEqual(self.browser.find_by_id('seeAlignTaskResultButton').first['title'], u"Click to see task result")
        self.assertEqual(self.browser.find_by_id('downloadAlignTaskResultButton').first['title'], u"Click to download task result")
        self.browser.find_by_id('newAlignTaskName').fill('testAlignTask')    # the same task name - alert
        self.waitForElement('sequenceFile_option_functional_test_input.fasta')
        self.waitForElement('referenceFile_option_functional_test_input.fasta')
        time.sleep(1.5)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        time.sleep(1.5)
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        self.browser.find_by_id('alignButton').click()
        time.sleep(1.5)
        alert = self.browser.get_alert()
        self.assertEqual(u'Incorrect task name, file with this name exists.', alert.text)
        alert.accept()
        time.sleep(3)
        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Uliniowienie')), 1)
        self.assertEqual(len(self.browser.find_by_text('Badanie podobieństwa sekwencji z referencyjnym genomem DNA')), 1)
        self.assertEqual(len(self.browser.find_by_text('nazwa zadania:')), 1)
        self.assertEqual(self.browser.find_by_id('newAlignTaskName').first['title'], u"wynik zadania zostanie zapisany do pliku o nazwie takiej samej jak nazwa zadania")
        self.assertEqual(len(self.browser.find_by_text('algorytm uliniowienia:')), 1)
        self.assertEqual(self.browser.find_by_id('alignAlgorithmSelect').first['title'], u"wybierz algorytm uliniowienia")
        self.assertEqual(len(self.browser.find_by_text('genom kołowy:')), 1)
        self.assertEqual(self.browser.find_by_id('circularCheckbox').first['title'], u"zaznacz, jeśli genom jest kołowy - kary dla obu końców sekwencji nie zostaną dodane")
        self.assertEqual(len(self.browser.find_by_text('powiadomienie e-mail:')), 1)
        self.assertEqual(self.browser.find_by_id('alignResultNotificationCheckbox').first['title'], u"zaznacz, jeśli uruchamiasz długie zadanie i chcesz być poinformowany o jego zakończeniu")
        self.assertEqual(len(self.browser.find_by_text('adres e-mail:')), 1)
        self.assertEqual(self.browser.find_by_id('alignMailAddress').first['title'], u"Wprowadź adres e-mail")
        self.assertEqual(len(self.browser.find_by_text('zobacz adres wyniku:')), 1)
        self.assertEqual(self.browser.find_by_id('alignShowResultUrlCheckbox').first['title'], u"zaznacz, jeśli chcesz zobaczyć adres wyniku")
        self.assertEqual(len(self.browser.find_by_text('kara za przerwę:')), 1)
        self.assertEqual(self.browser.find_by_id('gapPenalty').first['title'], u"kara za przerwę/wiszący nukleotyd")
        self.assertEqual(len(self.browser.find_by_text('porównywana sekwencja:')), 1)
        self.assertEqual(self.browser.find_by_id('sequenceFile').first['title'], u"Kliknij, aby wybrać plik z sekwencją do porównania (plik powinien być w formacie FASTA)")
        self.assertEqual(len(self.browser.find_by_text('genom referencyjny:')), 1)
        self.assertEqual(self.browser.find_by_id('referenceFile').first['title'], u"Kliknij, aby wybrać plik z genomem referencyjnym (plik powinien być w formacie FASTA)")
        self.assertEqual(self.browser.find_by_id('alignButton').first.text, u'Zbadaj!')
        self.assertEqual(self.browser.find_by_id('alignButton').first['title'], u"Kliknij, aby zbadać podobieństwo sekwencji")
        self.assertEqual(len(self.browser.find_by_text('A')), 2)
        self.assertEqual(len(self.browser.find_by_text('C')), 2)
        self.assertEqual(len(self.browser.find_by_text('G')), 2)
        self.assertEqual(len(self.browser.find_by_text('T')), 2)
        self.assertEqual(len(self.browser.find_by_text('id')), 1)
        self.assertEqual(len(self.browser.find_by_text('nazwa zadania')), 1)
        self.assertEqual(len(self.browser.find_by_text('nazwa pliku z badaną sekwencją')), 1)
        self.assertEqual(len(self.browser.find_by_text('nazwa pliku z genomem referencyjnym')), 1)
        self.assertEqual(len(self.browser.find_by_text('algorytm uliniowienia')), 1)
        self.assertEqual(len(self.browser.find_by_text('genom kołowy')), 1)
        self.assertEqual(len(self.browser.find_by_text('kara za przerwę')), 1)
        self.assertEqual(len(self.browser.find_by_text('AA')), 1)
        self.assertEqual(len(self.browser.find_by_text('AC')), 1)
        self.assertEqual(len(self.browser.find_by_text('AG')), 1)
        self.assertEqual(len(self.browser.find_by_text('AT')), 1)
        self.assertEqual(len(self.browser.find_by_text('CA')), 1)
        self.assertEqual(len(self.browser.find_by_text('CC')), 1)
        self.assertEqual(len(self.browser.find_by_text('CG')), 1)
        self.assertEqual(len(self.browser.find_by_text('CT')), 1)
        self.assertEqual(len(self.browser.find_by_text('GA')), 1)
        self.assertEqual(len(self.browser.find_by_text('GC')), 1)
        self.assertEqual(len(self.browser.find_by_text('GG')), 1)
        self.assertEqual(len(self.browser.find_by_text('GT')), 1)
        self.assertEqual(len(self.browser.find_by_text('TA')), 1)
        self.assertEqual(len(self.browser.find_by_text('TC')), 1)
        self.assertEqual(len(self.browser.find_by_text('TG')), 1)
        self.assertEqual(len(self.browser.find_by_text('TT')), 1)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia danych wejściowych')), 1)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia wyniku')), 1)
        self.assertEqual(len(self.browser.find_by_text('zobacz wynik')), 1)
        self.assertEqual(len(self.browser.find_by_text('pobierz wynik')), 1)
        self.assertEqual(len(self.browser.find_by_text('usuń')), 1)
        self.assertEqual(len(self.browser.find_by_text('zatrzymaj')), 1)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('breakAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 1)
        self.assertEqual(self.browser.find_by_id('deleteAlignTaskButton').first['title'], u"Kliknij, aby usunąć to zadanie")
        self.assertEqual(self.browser.find_by_id('breakAlignTaskButton').first['title'], u"Kliknij, aby zatrzymać to zadanie")
        self.assertEqual(self.browser.find_by_id('seeAlignTaskResultButton').first['title'], u"Kliknij, aby zobaczyć wynik zadania")
        self.assertEqual(self.browser.find_by_id('downloadAlignTaskResultButton').first['title'], u"Kliknij, aby pobrać wynik zadania")
        self.browser.find_by_id('newAlignTaskName').fill('testAlignTask')    # the same task name - alert
        self.waitForElement('sequenceFile_option_functional_test_input.fasta')
        self.waitForElement('referenceFile_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        time.sleep(1.5)
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        self.browser.find_by_id('alignButton').click()
        time.sleep(1.5)
        alert = self.browser.get_alert()
        self.assertEqual(u'Niewłaściwa nazwa zadania, plik o takiej nazwie już istnieje.', alert.text)
        alert.accept()
        time.sleep(1.5)

    def test18UserSettingsTranslations(self):
        """test 'user_settings_popup' page translations"""
        self.clickCssLink('#a_lang_pl')
        self.browser.find_by_id('userSettingsButton').click()
        time.sleep(1.0)
        self.assertEqual(self.browser.find_by_id('newPasswordLabel').first.text, u'Nowe hasło:')
        self.assertEqual(self.browser.find_by_id('newPassword').first['title'], u'Wprowadź nowe hasło')
        self.assertEqual(self.browser.find_by_id('newPasswordConfirmationLabel').first.text, u'Potwierdzenie nowego hasła:')
        self.assertEqual(self.browser.find_by_id('newPasswordConfirmation').first['title'], u'Wprowadź ponownie nowe hasło')
        self.assertEqual(self.browser.find_by_id('changePasswordButton').first.text, u'ZMIEŃ HASŁO')
        self.assertEqual(self.browser.find_by_id('changePasswordButton').first['title'], u'Kliknij, aby zmienić hasło')
        self.assertEqual(self.browser.find_by_id('newMailAddressLabel').first.text, u'Adres e-mail:')
        self.assertEqual(self.browser.find_by_id('newMailAddress').first['title'], u'Wprowadź adres e-mail')
        self.assertEqual(self.browser.find_by_id('changeMailAddressButton').first.text, u'ZMIEŃ E-MAIL')
        self.assertEqual(self.browser.find_by_id('changeMailAddressButton').first['title'], u'Kliknij, aby zmienić adres e-mail')
        self.assertEqual(self.browser.find_by_id('passwordLabel').first.text, u'Hasło:')
        self.assertEqual(self.browser.find_by_id('password').first['title'], u'Wprowadź hasło')
        self.assertEqual(self.browser.find_by_id('deleteUserButton').first.text, u'USUŃ UŻYTKOWNIKA')
        self.assertEqual(self.browser.find_by_id('deleteUserButton').first['title'], u'Kliknij, aby usunąć użytkownika')
        self.browser.find_by_id('changeMailAddressButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'E-mail zmieniony pomyślnie', alert.text)
        alert.accept()
        self.browser.find_by_id('newPassword').fill('functional_test_user_password')
        self.browser.find_by_id('newPasswordConfirmation').fill('functional_test_user_password_2')
        self.browser.find_by_id('changePasswordButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Błąd hasła, zmień potwierdzenie hasła!!!', alert.text)
        alert.accept()
        self.browser.find_by_id('newPassword').fill('functional_test_user_password')
        self.browser.find_by_id('newPasswordConfirmation').fill('functional_test_user_password')
        self.browser.find_by_id('changePasswordButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Hasło zmienione pomyślnie', alert.text)
        alert.accept()
        self.browser.find_by_id('password').fill('notProperlyPassword')
        self.browser.find_by_id('deleteUserButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Niewłaściwe hasło', alert.text)
        alert.accept()

        self.browser.reload()
        self.browser.reload()
        self.waitForElement('showLoginWindowButton')
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        time.sleep(2)

        self.clickCssLink('#a_lang_en')
        self.browser.find_by_id('userSettingsButton').click()
        time.sleep(1.0)
        self.assertEqual(self.browser.find_by_id('newPasswordLabel').first.text, u'New password:')
        self.assertEqual(self.browser.find_by_id('newPassword').first['title'], u'Enter new password')
        self.assertEqual(self.browser.find_by_id('newPasswordConfirmationLabel').first.text, u'New password confirmation:')
        self.assertEqual(self.browser.find_by_id('newPasswordConfirmation').first['title'], u'Enter new password again')
        self.assertEqual(self.browser.find_by_id('changePasswordButton').first.text, u'CHANGE PASSWORD')
        self.assertEqual(self.browser.find_by_id('changePasswordButton').first['title'], u'Click to change password')
        self.assertEqual(self.browser.find_by_id('newMailAddressLabel').first.text, u'Email address:')
        self.assertEqual(self.browser.find_by_id('newMailAddress').first['title'], u'Enter email address')
        self.assertEqual(self.browser.find_by_id('changeMailAddressButton').first.text, u'CHANGE EMAIL')
        self.assertEqual(self.browser.find_by_id('changeMailAddressButton').first['title'], u'Click to change e-mail address')
        self.assertEqual(self.browser.find_by_id('passwordLabel').first.text, u'Password:')
        self.assertEqual(self.browser.find_by_id('password').first['title'], u'Enter password')
        self.assertEqual(self.browser.find_by_id('deleteUserButton').first.text, u'DELETE USER')
        self.assertEqual(self.browser.find_by_id('deleteUserButton').first['title'], u'Click to delete user')
        self.browser.find_by_id('changeMailAddressButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'E-mail changed successfully', alert.text)
        alert.accept()
        self.browser.find_by_id('newPassword').fill('functional_test_user_password')
        self.browser.find_by_id('newPasswordConfirmation').fill('functional_test_user_password_2')
        self.browser.find_by_id('changePasswordButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Password error, change password confirmation!!!', alert.text)
        alert.accept()
        self.browser.find_by_id('newPassword').fill('functional_test_user_password')
        self.browser.find_by_id('newPasswordConfirmation').fill('functional_test_user_password')
        self.browser.find_by_id('changePasswordButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Password changed successfully', alert.text)
        alert.accept()
        self.browser.find_by_id('password').fill('notProperlyPassword')
        self.browser.find_by_id('deleteUserButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'Invalid password', alert.text)
        alert.accept()

    def test19UserSettings(self):
        """test 'user_settings_popup' page"""
        self.browser.find_by_id('userSettingsButton').click()
        time.sleep(1.0)
        self.assertEqual(self.browser.find_by_id('newMailAddress').value, u'')
        self.browser.find_by_id('newMailAddress').fill('newMail')
        self.browser.find_by_id('changeMailAddressButton').click()
        time.sleep(1.0)
        alert = self.browser.get_alert()
        alert.accept()
        self.assertEqual(self.browser.find_by_id('newMailAddress').value, u'newMail')
        self.browser.reload()
        self.browser.reload()
        self.waitForElement('showLoginWindowButton')
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        time.sleep(1.0)
        self.browser.find_by_id('userSettingsButton').click()
        time.sleep(1.0)
        self.assertEqual(self.browser.find_by_id('newMailAddress').value, u'newMail')
        self.browser.find_by_id('password').fill('notProperlyPassword')
        self.browser.find_by_id('deleteUserButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        alert.accept()
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('deleteUserButton').click()
        time.sleep(1)
        self.waitForElement('showLoginWindowButton')
        self.browser.find_by_id('showLoginWindowButton').first.click()
        self.browser.find_by_id('username').fill('functional_test_user')
        self.browser.find_by_id('password').fill('functional_test_user_password')
        self.browser.find_by_id('loginButton').click()
        time.sleep(2)
        alert = self.browser.get_alert()    # Invalid username or password
        alert.accept()

    def test20AdminTabTranslations(self):
        """test if translations for admin tabs works"""
        if self.admin_user == '':
            return True
        self.loginAsAdminUser()
        self.clickCssLink('#a_lang_en')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('a_admin_tab_USERS').first.text, u"Users")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_USERS').first['title'], u"Click to view bookmark with users")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_FILES').first.text, u"All files")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_FILES').first['title'], u"Click to view bookmark with all files for all users")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_JOBS').first.text, u"All jobs")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_JOBS').first['title'], u"Click to view bookmark with all jobs for all users")

        self.clickCssLink('#a_lang_pl')
        time.sleep(1)
        self.assertEqual(self.browser.find_by_id('a_admin_tab_USERS').first.text, u"Użytkownicy")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_USERS').first['title'], u"Kliknij, aby zobaczyć zakładkę z użytkownikami")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_FILES').first.text, u"Wszystkie pliki")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_FILES').first['title'], u"Kliknij, aby zobaczyć zakładkę z wszystkimi plikami wszystkich użytkowników")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_JOBS').first.text, u"Wszystkie zadania")
        self.assertEqual(self.browser.find_by_id('a_admin_tab_ALL_JOBS').first['title'], u"Kliknij, aby zobaczyć zakładkę z wszystkimi zadaniami wszystkich użytkowników")

    def test21UsersTranslations(self):
        """test 'users' page translations"""
        if self.admin_user == '':
            return True
        self.loginAsAdminUser()
        self.clickCssLink('#a_admin_tab_USERS')
        self.clickCssLink('#a_lang_en')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Users')), 1)
        self.assertEqual(self.browser.find_by_id('addUserButton').text, u'Create new user')
        self.assertEqual(self.browser.find_by_id('addUserButton').first['title'], u"Click to create new user")
        self.assertEqual(len(self.browser.find_by_text('Username')), 1)
        self.assertEqual(len(self.browser.find_by_text('Joined date')), 1)
        self.assertEqual(len(self.browser.find_by_text('Last login date')), 1)
        self.assertEqual(len(self.browser.find_by_text('Delete user')), 1)
        self.assertEqual(self.browser.find_by_id('deleteUserButton_functional_test_user').first['title'], u"Click to delete user")

        self.clickCssLink('#a_lang_pl')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Użytkownicy')), 1)
        self.assertEqual(self.browser.find_by_id('addUserButton').text, u'Dodaj użytkownika')
        self.assertEqual(self.browser.find_by_id('addUserButton').first['title'], u"Kliknij, aby dodać nowego użytkownika")
        self.assertEqual(len(self.browser.find_by_text('Nazwa użytkownika')), 1)
        self.assertEqual(len(self.browser.find_by_text('Data rejestracji')), 1)
        self.assertEqual(len(self.browser.find_by_text('Data ostatniego zalogowania')), 1)
        self.assertEqual(len(self.browser.find_by_text('Usuń użytkownika')), 1)
        self.assertEqual(self.browser.find_by_id('deleteUserButton_functional_test_user').first['title'], u"Kliknij, aby usunąć użytkownika")

    def test21Users(self):
        """test 'users' page translations"""
        if self.admin_user == '':
            return True
        self.loginAsAdminUser()
        self.clickCssLink('#a_admin_tab_USERS')
        self.clickCssLink('#a_lang_en')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_id('deleteUserButton_functional_test_user')), 1)
        self.browser.find_by_id('deleteUserButton_functional_test_user').click()
        time.sleep(2)
        self.assertEqual(len(self.browser.find_by_id('deleteUserButton_functional_test_user')), 0)

    def test22AllFilesTranslations(self):
        """test 'all_files' page translations"""
        if self.admin_user == '':
            return True
        self.clickCssLink('#a_user_tab_FILES')
        self.waitForElement('chooseUploadFile')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        self.waitForElement('addTaskButton')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.browser.find_by_id('addTaskName').fill('testOutput')
        self.waitForElement('add_i1_2_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('add_i1_2', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        self.loginAsAdminUser()
        self.clickCssLink('#a_admin_tab_ALL_FILES')
        self.waitForElement('deleteFileButton_private/functional_test_user/functional_test_input.fasta')
        time.sleep(1)
        self.clickCssLink('#a_lang_en')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - All files')), 1)
        self.assertEqual(self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Click to delete file")
        self.assertEqual(self.browser.find_by_id('seeFileContentsButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Click to see file contents")
        self.assertEqual(self.browser.find_by_id('downloadFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Click to download file")
        self.assertEqual(len(self.browser.find_by_text('FASTA format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('FASTQ format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('VCF format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('Unknown format files')), 1)
        self.assertEqual(len(self.browser.find_by_text('File name')), 4)
        self.assertEqual(len(self.browser.find_by_text('Owner')), 4)
        self.assertEqual(len(self.browser.find_by_text('Upload date')), 4)
        self.assertEqual(len(self.browser.find_by_text('Delete file')), 4)
        self.assertEqual(len(self.browser.find_by_text('See file contents')), 4)
        self.assertEqual(len(self.browser.find_by_text('Download file')), 4)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        self.assertEqual(u'File is used by some task, delete this task firstly.', alert.text)
        alert.accept()
        time.sleep(2.5)
        self.clickCssLink('#a_lang_pl')
        time.sleep(1)
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Wszystkie pliki')), 1)
        self.assertEqual(self.browser.find_by_id('seeFileContentsButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Kliknij, aby zobaczyć zawartość pliku")
        self.assertEqual(self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Kliknij, aby usunąć plik")
        self.assertEqual(self.browser.find_by_id('downloadFileButton_private/functional_test_user/functional_test_input.fasta').first['title'], u"Kliknij, aby pobrać plik")
        self.assertEqual(len(self.browser.find_by_text('Pliki w formacie FASTA')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w formacie FASTQ')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w formacie VCF')), 1)
        self.assertEqual(len(self.browser.find_by_text('Pliki w nieznanym formacie')), 1)
        self.assertEqual(len(self.browser.find_by_text('Nazwa pliku')), 4)
        self.assertEqual(len(self.browser.find_by_text('Właściciel')), 4)
        self.assertEqual(len(self.browser.find_by_text('Data załadowania na serwer')), 4)
        self.assertEqual(len(self.browser.find_by_text('Usuń plik')), 4)
        self.assertEqual(len(self.browser.find_by_text('Zobacz zawartość pliku')), 4)
        self.assertEqual(len(self.browser.find_by_text('Pobierz plik')), 4)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(2)
        alert = self.browser.get_alert()
        self.assertEqual(u'Plik jest używany przez zadanie, usuń najpierw to zadanie.', alert.text)
        alert.accept()
        time.sleep(1.5)

    def test23AllFiles(self):
        """test 'all_files' page"""
        if self.admin_user == '':
            return True
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fastq")
        self.browser.find_by_id('uploadFileButton').click()
        time.sleep(1)
        self.clickCssLink('#a_user_tab_ASSEMBLING')
        time.sleep(1)
        self.browser.find_by_id('addTaskButton').click()
        self.browser.find_by_id('addTaskName').fill('testOut.fa')
        self.waitForElement('add_i1_2_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('add_i1_2', 'functional_test_input.fasta')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        self.loginAsAdminUser()
        self.clickCssLink('#a_admin_tab_ALL_FILES')
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 1)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fasta').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        alert.accept()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 1)
        self.browser.find_by_id('deleteFileButton_private/functional_test_user/functional_test_input.fastq').click()
        time.sleep(3)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fasta')), 1)
        self.assertEqual(len(self.browser.find_by_text('functional_test_input.fastq')), 0)
        time.sleep(1)

    def test24AllJobsTranslations(self):
        """test 'all_jobs' page translations"""
        if self.admin_user == '':
            return True
        self.clickCssLink('#a_user_tab_FILES')
        time.sleep(1)
        browser.driver.find_element_by_id('chooseUploadFile').send_keys(os.getcwd()+"/functional_tests/functional_test_input.fasta")
        self.browser.find_by_id('uploadFileButton').click()

        self.clickCssLink('#a_user_tab_ALIGNMENT')
        self.waitForElement('newAlignTaskName')
        time.sleep(1)
        self.browser.find_by_id('newAlignTaskName').fill('testAlignTask')
        self.waitForElement('sequenceFile_option_functional_test_input.fasta')
        self.waitForElement('referenceFile_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('sequenceFile', 'functional_test_input.fasta')
        self.browser.select('referenceFile', 'functional_test_input.fasta')
        self.browser.find_by_id('alignButton').click()
        time.sleep(3)

        self.clickCssLink('#a_user_tab_ASSEMBLING')
        self.browser.find_by_id('addTaskButton').click()
        self.browser.find_by_id('addTaskName').fill('testAssemblyTask')
        self.browser.find_by_id('addK').fill(5)
        self.browser.find_by_id('addT').fill(0)
        self.browser.find_by_id('addGenomeLength').fill(20)
        self.browser.find_by_id('addBfcounterThreshold').fill(0)
        self.browser.find_by_id('addSingleEdgeCounterThreshold').fill(0)
        self.waitForElement('add_i1_1_option_functional_test_input.fasta')
        time.sleep(1)
        self.browser.select('add_i1_1', 'functional_test_input.fasta')
        self.browser.select('addPairedReadsAlgorithm', '0')
        self.browser.uncheck('addCorrect')
        self.browser.check('addTask_assemblyShowResultUrlCheckbox')
        self.browser.find_by_id('addTaskSubmitButton').click()
        time.sleep(1)
        alert = self.browser.get_alert()
        alert.accept()

        self.loginAsAdminUser()
        self.clickCssLink('#a_lang_en')
        self.clickCssLink('#a_admin_tab_ALL_JOBS')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - All jobs')), 1)
        self.assertEqual(len(self.browser.find_by_text('id')), 2)
        self.assertEqual(len(self.browser.find_by_text('task name')), 2)
        self.assertEqual(len(self.browser.find_by_text('owner')), 2)
        self.assertEqual(len(self.browser.find_by_text('sequence file name')), 1)
        self.assertEqual(len(self.browser.find_by_text('reference file name')), 1)
        self.assertEqual(len(self.browser.find_by_text('align algorithm')), 1)
        self.assertEqual(len(self.browser.find_by_text('circular genome')), 1)
        self.assertEqual(len(self.browser.find_by_text('gap penalty')), 1)
        self.assertEqual(len(self.browser.find_by_text('AA')), 1)
        self.assertEqual(len(self.browser.find_by_text('AC')), 1)
        self.assertEqual(len(self.browser.find_by_text('AG')), 1)
        self.assertEqual(len(self.browser.find_by_text('AT')), 1)
        self.assertEqual(len(self.browser.find_by_text('CA')), 1)
        self.assertEqual(len(self.browser.find_by_text('CC')), 1)
        self.assertEqual(len(self.browser.find_by_text('CG')), 1)
        self.assertEqual(len(self.browser.find_by_text('CT')), 1)
        self.assertEqual(len(self.browser.find_by_text('GA')), 1)
        self.assertEqual(len(self.browser.find_by_text('GC')), 1)
        self.assertEqual(len(self.browser.find_by_text('GG')), 1)
        self.assertEqual(len(self.browser.find_by_text('GT')), 1)
        self.assertEqual(len(self.browser.find_by_text('TA')), 1)
        self.assertEqual(len(self.browser.find_by_text('TC')), 1)
        self.assertEqual(len(self.browser.find_by_text('TG')), 1)
        self.assertEqual(len(self.browser.find_by_text('TT')), 1)
        self.assertEqual(len(self.browser.find_by_text('input provide time')), 2)
        self.assertEqual(len(self.browser.find_by_text('output provide time')), 2)
        self.assertEqual(len(self.browser.find_by_text('see result')), 2)
        self.assertEqual(len(self.browser.find_by_text('download result')), 2)
        self.assertEqual(len(self.browser.find_by_text('delete')), 2)
        self.assertEqual(len(self.browser.find_by_text('break')), 2)
        self.assertEqual(len(self.browser.find_by_id('deleteAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('breakAlignTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('seeAlignTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAlignTaskResultButton')), 1)
        self.assertEqual(self.browser.find_by_id('deleteAlignTaskButton').first['title'], u"Click to delete this task")
        self.assertEqual(self.browser.find_by_id('breakAlignTaskButton').first['title'], u"Click to break this task")
        self.assertEqual(self.browser.find_by_id('seeAlignTaskResultButton').first['title'], u"Click to see task result")
        self.assertEqual(self.browser.find_by_id('downloadAlignTaskResultButton').first['title'], u"Click to download task result")
        self.assertEqual(len(self.browser.find_by_text('id')), 2)
        self.assertEqual(len(self.browser.find_by_text('task name')), 2)
        self.assertEqual(len(self.browser.find_by_text('owner')), 2)
        self.assertEqual(len(self.browser.find_by_text('input file 1 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('input file 2 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('algorithm for paired reads')), 1)
        self.assertEqual(len(self.browser.find_by_text('k')), 1)
        self.assertEqual(len(self.browser.find_by_text('original genome length')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size mean for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size std dev for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size mean for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('insert size std dev for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('quality threshold')), 1)
        self.assertEqual(len(self.browser.find_by_text('k-mer coverage threshold for occurrence table')), 1)
        self.assertEqual(len(self.browser.find_by_text('single graph edges coverage threshold')), 1)
        self.assertEqual(len(self.browser.find_by_text('begin of interval of paired reads threshold for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('end of interval of paired reads threshold for paired-end tags')), 1)
        self.assertEqual(len(self.browser.find_by_text('begin of interval of paired reads threshold for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('end of interval of paired reads threshold for mate-pairs')), 1)
        self.assertEqual(len(self.browser.find_by_text('correcting errors in graph')), 1)
        self.assertEqual(len(self.browser.find_by_text('input provide time')), 2)
        self.assertEqual(len(self.browser.find_by_text('output provide time')), 2)
        self.assertEqual(len(self.browser.find_by_text('see result')), 2)
        self.assertEqual(len(self.browser.find_by_text('download result')), 2)
        self.assertEqual(len(self.browser.find_by_text('delete')), 2)
        self.assertEqual(len(self.browser.find_by_text('break')), 2)
        self.assertEqual(len(self.browser.find_by_id('deleteTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('breakTaskButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('seeAssemblyTaskResultButton')), 1)
        self.assertEqual(len(self.browser.find_by_id('downloadAssemblyTaskResultButton')), 1)
        self.assertEqual(self.browser.find_by_id('deleteTaskButton').first['title'], u'Click to delete this task')
        self.assertEqual(self.browser.find_by_id('breakTaskButton').first['title'], u'Click to break this task')
        self.assertEqual(self.browser.find_by_id('seeAssemblyTaskResultButton').first['title'], u'Click to see task result')
        self.assertEqual(self.browser.find_by_id('downloadAssemblyTaskResultButton').first['title'], u'Click to download task result')
        time.sleep(1.5)
        self.clickCssLink('#a_lang_pl')
        self.assertEqual(len(self.browser.find_by_text('DnaAssembler - Wszystkie zadania')), 1)
        self.assertEqual(len(self.browser.find_by_text('id')), 2)
        self.assertEqual(len(self.browser.find_by_text('nazwa zadania')), 2)
        self.assertEqual(len(self.browser.find_by_text('właściciel')), 2)
        self.assertEqual(len(self.browser.find_by_text('nazwa pliku z badaną sekwencją')), 1)
        self.assertEqual(len(self.browser.find_by_text('nazwa pliku z genomem referencyjnym')), 1)
        self.assertEqual(len(self.browser.find_by_text('algorytm uliniowienia')), 1)
        self.assertEqual(len(self.browser.find_by_text('genom kołowy')), 1)
        self.assertEqual(len(self.browser.find_by_text('kara za przerwę')), 1)
        self.assertEqual(len(self.browser.find_by_text('AA')), 1)
        self.assertEqual(len(self.browser.find_by_text('AC')), 1)
        self.assertEqual(len(self.browser.find_by_text('AG')), 1)
        self.assertEqual(len(self.browser.find_by_text('AT')), 1)
        self.assertEqual(len(self.browser.find_by_text('CA')), 1)
        self.assertEqual(len(self.browser.find_by_text('CC')), 1)
        self.assertEqual(len(self.browser.find_by_text('CG')), 1)
        self.assertEqual(len(self.browser.find_by_text('CT')), 1)
        self.assertEqual(len(self.browser.find_by_text('GA')), 1)
        self.assertEqual(len(self.browser.find_by_text('GC')), 1)
        self.assertEqual(len(self.browser.find_by_text('GG')), 1)
        self.assertEqual(len(self.browser.find_by_text('GT')), 1)
        self.assertEqual(len(self.browser.find_by_text('TA')), 1)
        self.assertEqual(len(self.browser.find_by_text('TC')), 1)
        self.assertEqual(len(self.browser.find_by_text('TG')), 1)
        self.assertEqual(len(self.browser.find_by_text('TT')), 1)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia danych wejściowych')), 2)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia wyniku')), 2)
        self.assertEqual(len(self.browser.find_by_text('zobacz wynik')), 2)
        self.assertEqual(len(self.browser.find_by_text('pobierz wynik')), 2)
        self.assertEqual(len(self.browser.find_by_text('usuń')), 2)
        self.assertEqual(len(self.browser.find_by_text('zatrzymaj')), 2)
        self.assertEqual(self.browser.find_by_id('deleteAlignTaskButton').first['title'], u"Kliknij, aby usunąć to zadanie")
        self.assertEqual(self.browser.find_by_id('breakAlignTaskButton').first['title'], u"Kliknij, aby zatrzymać to zadanie")
        self.assertEqual(self.browser.find_by_id('seeAlignTaskResultButton').first['title'], u"Kliknij, aby zobaczyć wynik zadania")
        self.assertEqual(self.browser.find_by_id('downloadAlignTaskResultButton').first['title'], u"Kliknij, aby pobrać wynik zadania")
        self.assertEqual(len(self.browser.find_by_text('id')), 2)
        self.assertEqual(len(self.browser.find_by_text('nazwa zadania')), 2)
        self.assertEqual(len(self.browser.find_by_text('właściciel')), 2)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 1 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 2 (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 1 (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('plik wejściowy 2 (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('algorytm wykorzystywania sparowanych końców')), 1)
        self.assertEqual(len(self.browser.find_by_text('k')), 1)
        self.assertEqual(len(self.browser.find_by_text('oryginalna długość genomu')), 1)
        self.assertEqual(len(self.browser.find_by_text('moda odległości pomiędzy odczytami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('odchylenie standardowe odległości pomiędzy odczytami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('moda odległości pomiędzy odczytami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('odchylenie standardowe odległości pomiędzy odczytami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('próg jakości')), 1)
        self.assertEqual(len(self.browser.find_by_text('próg pokrycia k-meru w tabeli wystąpień')), 1)
        self.assertEqual(len(self.browser.find_by_text('próg pokrycia krawędzi dla pojedyńczego grafu')), 1)
        self.assertEqual(len(self.browser.find_by_text('początek przedziału progu połączeń sparowanymi końcami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('koniec przedziału progu połączeń sparowanymi końcami (PET)')), 1)
        self.assertEqual(len(self.browser.find_by_text('początek przedziału progu połączeń sparowanymi końcami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('koniec przedziału progu połączeń sparowanymi końcami (MP)')), 1)
        self.assertEqual(len(self.browser.find_by_text('poprawianie błędów w grafie')), 1)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia danych wejściowych')), 2)
        self.assertEqual(len(self.browser.find_by_text('czas dostarczenia danych wejściowych')), 2)
        self.assertEqual(len(self.browser.find_by_text('zobacz wynik')), 2)
        self.assertEqual(len(self.browser.find_by_text('pobierz wynik')), 2)
        self.assertEqual(len(self.browser.find_by_text('usuń')), 2)
        self.assertEqual(len(self.browser.find_by_text('zatrzymaj')), 2)
        self.assertEqual(self.browser.find_by_id('deleteTaskButton').first['title'], u"Kliknij, aby usunąć to zadanie")
        self.assertEqual(self.browser.find_by_id('breakTaskButton').first['title'], u"Kliknij, aby zatrzymać to zadanie")
        self.assertEqual(self.browser.find_by_id('seeAssemblyTaskResultButton').first['title'], u"Kliknij, aby zobaczyć wynik zadania")
        self.assertEqual(self.browser.find_by_id('downloadAssemblyTaskResultButton').first['title'], u"Kliknij, aby pobrać wynik zadania")



if __name__ == "__main__":
    www_browser = 'firefox' # sys.argv[1] if len(sys.argv) >= 2 else 'chrome'
    www_addr = sys.argv[2] if len(sys.argv) >= 3 else '127.0.0.1'
    www_port = sys.argv[3] if len(sys.argv) >= 4 else '9000'
    admin_user = sys.argv[4] if len(sys.argv) >= 5 else ''
    admin_user_password = sys.argv[5] if len(sys.argv) >= 6 else ''

    browser = None

    try:
        if www_browser == 'firefox':
            caps = {}
            caps['acceptInsecureCerts'] = True
            browser = Browser('firefox', capabilities=caps)
        else:
            browser = Browser(www_browser)
    except DriverNotFoundError:
        print("ERROR: WebDriver for browser '" + www_browser  + "' not found.")

    browser.driver.maximize_window()

    print('http://' + www_addr + ':' + www_port)

    browser.visit('http://' + www_addr + ':' + www_port)

    TestFunctionalDnaasm.browser = browser
    TestFunctionalDnaasm.admin_user = admin_user
    TestFunctionalDnaasm.admin_user_password = admin_user_password

    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestFunctionalDnaasm))

    testToRun = 'all'

    if testToRun != 'all':
        anyTestWillBeRun = False

        for ts in suite:
            for t in ts:
                if testToRun not in t.id():
                    setattr(t, 'setUp', lambda: t.skipTest('Not running this time'))
                else:
                    anyTestWillBeRun = True
        if not anyTestWillBeRun:
            print('ERROR: Cannot run given test because it doesn\'t exist: ' + testToRun)
            sys.exit()

    try:
        from xmlrunner import XMLTestRunner
        if not os.path.exists('./reports'):
            os.makedirs('./reports')
        with open('./reports/functional_output.xml', 'wb') as output:
            XMLTestRunner(output=output, verbosity=3).run(suite)

    except ImportError:
        print("Failed to import xmlrunner library. Using TextTestRunner instead...\n\n")
        unittest.TextTestRunner(verbosity=3).run(suite)

    browser.quit()
