## @file assembly/tests.py
#  @brief database interface unit testing

import os
import shutil
import time
import django.test
from dnaasmpy import dnaasmpy    # c++ module with CommandManager - to test break_assembly_task function
from assembly.models import AssemblyTask
from file.models import Document
from django.contrib.auth.models import User
from django.conf import settings
from . import views

class AssemblyModelTestCase(django.test.TestCase):
    """test module model"""
    pass

class AssemblyViewTestCase(django.test.TestCase):
    """test module interface"""

    def setUp(self):
        if not os.path.exists(settings.PRIVATE_MEDIA_ROOT):
            os.makedirs(settings.PRIVATE_MEDIA_ROOT)
        self.username1 = u'username1'
        self.password1 = u'password1'
        self.user1 = User.objects.create_user(self.username1)
        self.user1.set_password(self.password1)
        self.user1.save()
        self.username2 = u'username2'
        self.password2 = u'password2'
        self.user2 = User.objects.create_user(self.username2)
        self.user2.set_password(self.password2)
        self.user2.save()
        self.admin_username = u'admin_username'
        self.admin_password = u'admin_password'
        self.admin_user = User.objects.create_user(self.admin_username)
        self.admin_user.set_password(self.admin_password)
        self.admin_user.is_superuser = True
        self.admin_user.save()
        if not os.path.exists(settings.PRIVATE_MEDIA_ROOT + '/' + self.username1):
            os.makedirs(settings.PRIVATE_MEDIA_ROOT + '/' + self.username1)
        if not os.path.exists(settings.PRIVATE_MEDIA_ROOT + '/' + self.username2):
            os.makedirs(settings.PRIVATE_MEDIA_ROOT + '/' + self.username2)
        if not os.path.exists(settings.PRIVATE_MEDIA_ROOT + '/' + self.admin_username):
            os.makedirs(settings.PRIVATE_MEDIA_ROOT + '/' + self.admin_username)
        if not os.path.exists(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username1):
            os.makedirs(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username1)
        if not os.path.exists(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username2):
            os.makedirs(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username2)
        if not os.path.exists(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.admin_username):
            os.makedirs(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.admin_username)
        self.i1_1_file_name = 'i1_1_file_name'
        self.i1_1_docfile = settings.PRIVATE_PREFIX + '/' + self.username1 + '/' + self.i1_1_file_name
        self.i1_1_newdoc = Document(user_id=self.user1.id, docfile=self.i1_1_docfile, file_name=self.i1_1_file_name, input_time='01')
        open(settings.MEDIA_ROOT + '/' + self.i1_1_docfile, 'w+').close()
        self.i1_1_newdoc.save()
        self.i1_2_file_name = 'i1_2_file_name'
        self.i1_2_docfile = settings.PRIVATE_PREFIX + '/' + self.username1 + '/' + self.i1_2_file_name
        self.i1_2_newdoc = Document(user_id=self.user1.id, docfile=self.i1_2_docfile, file_name=self.i1_2_file_name, input_time='02')
        open(settings.MEDIA_ROOT + '/' + self.i1_2_docfile, 'w+').close()
        self.i1_2_newdoc.save()
        self.o1_1_file_name = 'o1_1_file_name'
        self.o1_1_docfile = settings.PRIVATE_PREFIX + '/' + self.username1 + '/' + self.o1_1_file_name
        self.o1_1_newdoc = Document(user_id=self.user1.id, docfile=self.o1_1_docfile, file_name=self.o1_1_file_name, input_time='01')
        open(settings.MEDIA_ROOT + '/' + self.o1_1_docfile, 'w+').close()
        self.o1_1_newdoc.save()
        self.o1_2_file_name = 'o1_2_file_name'
        self.o1_2_docfile = settings.PRIVATE_PREFIX + '/' + self.username1 + '/' + self.o1_2_file_name
        self.o1_2_newdoc = Document(user_id=self.user1.id, docfile=self.o1_2_docfile, file_name=self.o1_2_file_name, input_time='02')
        open(settings.MEDIA_ROOT + '/' + self.o1_2_docfile, 'w+').close()
        self.o1_2_newdoc.save()
        self.out_file_name = 'out_file_name'
        self.out_docfile = settings.PUBLIC_USERS_PREFIX + '/' + self.username1 + '/' + self.out_file_name
        self.out_newdoc = Document(user_id=self.user1.id, docfile=self.out_docfile, file_name=self.out_file_name, input_time='01')
        open(settings.MEDIA_ROOT + '/' + self.out_docfile, 'w+').close()
        self.out_newdoc.save()

    def tearDown(self):
        if os.path.exists(settings.MEDIA_ROOT + '/' + self.i1_1_docfile):
            os.remove(settings.MEDIA_ROOT + '/' + self.i1_1_docfile)
        if os.path.exists(settings.MEDIA_ROOT + '/' + self.i1_2_docfile):
            os.remove(settings.MEDIA_ROOT + '/' + self.i1_2_docfile)
        if os.path.exists(settings.MEDIA_ROOT + '/' + self.o1_1_docfile):
            os.remove(settings.MEDIA_ROOT + '/' + self.o1_1_docfile)
        if os.path.exists(settings.MEDIA_ROOT + '/' + self.o1_2_docfile):
            os.remove(settings.MEDIA_ROOT + '/' + self.o1_2_docfile)
        if os.path.exists(settings.MEDIA_ROOT + '/' + self.out_docfile):
            os.remove(settings.MEDIA_ROOT + '/' + self.out_docfile)
        if os.path.exists(settings.PRIVATE_MEDIA_ROOT + '/' + self.username1):
            shutil.rmtree(settings.PRIVATE_MEDIA_ROOT + '/' + self.username1)
        if os.path.exists(settings.PRIVATE_MEDIA_ROOT + '/' + self.username2):
            shutil.rmtree(settings.PRIVATE_MEDIA_ROOT + '/' + self.username2)
        if os.path.exists(settings.PRIVATE_MEDIA_ROOT + '/' + self.admin_username):
            shutil.rmtree(settings.PRIVATE_MEDIA_ROOT + '/' + self.admin_username)
        if os.path.exists(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username1):
            shutil.rmtree(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username1)
        if os.path.exists(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username2):
            shutil.rmtree(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.username2)
        if os.path.exists(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.admin_username):
            shutil.rmtree(settings.PUBLIC_USERS_MEDIA_ROOT + '/' + self.admin_username)
        Document.objects.all().delete()
        AssemblyTask.objects.all().delete()
        User.objects.all().delete()

    def test_01_insert(self):
        """insert sth into a database"""
        self.assertEqual(AssemblyTask.objects.all().count(), 0)
        views.insert({'i1_1_file_name':self.i1_1_file_name, 'i1_2_file_name':self.i1_2_file_name, 'o1_1_file_name':self.o1_1_file_name, 'o1_2_file_name':self.o1_2_file_name, 'name':'name', 'k':3, 'genome_length':0, 'insert_size_mean_inward':0.0, 'insert_size_std_dev_inward':0.0, 'insert_size_mean_outward':0.0, 'insert_size_std_dev_outward':0.0, 'quality_threshold':0, 'bfcounter_threshold':0, 'single_edge_counter_threshold':0, 'paired_reads_pet_threshold_from':0, 'paired_reads_pet_threshold_to':0, 'paired_reads_mp_threshold_from':0, 'paired_reads_mp_threshold_to':0, 'paired_reads_algorithm':'0', 'input_time':'1', 'output_time':'2', 'correct':'false', 'result_notification':'false', 'mail_address':'user1_mail_address'}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        self.assertEqual(Document.objects.all().count(), 6)
        actual_assembly_task = AssemblyTask.objects.filter(name='name').values()
        task = AssemblyTask.objects.all().values()
        self.assertEqual(task[0]['id'], actual_assembly_task[0]['id'])
        self.assertEqual(task[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(task[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(task[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(task[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(task[0]['output_file_id'], self.out_newdoc.id + 1)
        self.assertEqual(task[0]['name'], 'name')
        self.assertEqual(task[0]['k'], 3)
        self.assertEqual(task[0]['genome_length'], 0)
        self.assertEqual(task[0]['insert_size_mean_inward'], 0.0)
        self.assertEqual(task[0]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(task[0]['insert_size_mean_outward'], 0.0)
        self.assertEqual(task[0]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(task[0]['quality_threshold'], 0)
        self.assertEqual(task[0]['bfcounter_threshold'], 0)
        self.assertEqual(task[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(task[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(task[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(task[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(task[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(task[0]['paired_reads_algorithm'], '0')
        self.assertEqual(task[0]['correct'], False)
        self.assertEqual(task[0]['result_notification'], False)
        self.assertEqual(task[0]['mail_address'], 'user1_mail_address')
        self.assertEqual(len(task[0]['input_time']) > 0, True)
        self.assertEqual(task[0]['output_time'], '')
        file = Document.objects.all().values()
        self.assertEqual(file[0]['id'], self.i1_1_newdoc.id)
        self.assertEqual(file[0]['docfile'], self.i1_1_docfile)
        self.assertEqual(file[0]['file_name'], self.i1_1_file_name)
        self.assertEqual(file[0]['input_time'], '01')
        self.assertEqual(file[1]['id'], self.i1_2_newdoc.id)
        self.assertEqual(file[1]['docfile'], self.i1_2_docfile)
        self.assertEqual(file[1]['file_name'], self.i1_2_file_name)
        self.assertEqual(file[1]['input_time'], '02')
        self.assertEqual(file[2]['id'], self.o1_1_newdoc.id)
        self.assertEqual(file[2]['docfile'], self.o1_1_docfile)
        self.assertEqual(file[2]['file_name'], self.o1_1_file_name)
        self.assertEqual(file[2]['input_time'], '01')
        self.assertEqual(file[3]['id'], self.o1_2_newdoc.id)
        self.assertEqual(file[3]['docfile'], self.o1_2_docfile)
        self.assertEqual(file[3]['file_name'], self.o1_2_file_name)
        self.assertEqual(file[3]['input_time'], '02')
        self.assertEqual(file[4]['id'], self.out_newdoc.id)
        self.assertEqual(file[4]['docfile'], self.out_docfile)
        self.assertEqual(file[4]['file_name'], self.out_file_name)
        self.assertEqual(file[4]['input_time'], '01')
        self.assertEqual(file[5]['id'], self.out_newdoc.id + 1)
        self.assertEqual(file[5]['docfile'], settings.PUBLIC_USERS_PREFIX + '/' + self.username1 + '/name')
        self.assertEqual(file[5]['file_name'], 'name')
        self.assertEqual(file[5]['input_time'], '')
        # below the same task name - can not add a new task
        views.insert({'i1_1_file_name':self.i1_1_file_name, 'i1_2_file_name':self.i1_2_file_name, 'o1_1_file_name':self.o1_1_file_name, 'o1_2_file_name':self.o1_2_file_name, 'name':'name', 'k':3, 'genome_length':0, 'insert_size_mean_inward':0.0, 'insert_size_std_dev_inward':0.0, 'insert_size_mean_outward':0.0, 'insert_size_std_dev_outward':0.0, 'quality_threshold':0, 'bfcounter_threshold':0, 'single_edge_counter_threshold':0, 'paired_reads_pet_threshold_from':0, 'paired_reads_pet_threshold_to':0, 'paired_reads_mp_threshold_from':0, 'paired_reads_mp_threshold_to':0, 'paired_reads_algorithm':'0', 'input_time':'1', 'output_time':'2', 'correct':'false', 'result_notification':'false', 'mail_address':'user1_mail_address'}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        self.assertEqual(Document.objects.all().count(), 6)
        actual_assembly_task = AssemblyTask.objects.filter(name='name').values()
        task = AssemblyTask.objects.all().values()
        self.assertEqual(task[0]['id'], actual_assembly_task[0]['id'])
        self.assertEqual(task[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(task[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(task[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(task[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(task[0]['output_file_id'], self.out_newdoc.id + 1)
        self.assertEqual(task[0]['name'], 'name')
        self.assertEqual(task[0]['k'], 3)
        self.assertEqual(task[0]['genome_length'], 0)
        self.assertEqual(task[0]['insert_size_mean_inward'], 0.0)
        self.assertEqual(task[0]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(task[0]['insert_size_mean_outward'], 0.0)
        self.assertEqual(task[0]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(task[0]['quality_threshold'], 0)
        self.assertEqual(task[0]['bfcounter_threshold'], 0)
        self.assertEqual(task[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(task[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(task[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(task[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(task[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(task[0]['paired_reads_algorithm'], '0')
        self.assertEqual(task[0]['correct'], False)
        self.assertEqual(task[0]['result_notification'], False)
        self.assertEqual(task[0]['mail_address'], 'user1_mail_address')
        self.assertEqual(len(task[0]['input_time']) > 0, True)
        self.assertEqual(task[0]['output_time'], '')
        file = Document.objects.all().values()
        self.assertEqual(file[0]['id'], self.i1_1_newdoc.id)
        self.assertEqual(file[0]['docfile'], self.i1_1_docfile)
        self.assertEqual(file[0]['file_name'], self.i1_1_file_name)
        self.assertEqual(file[0]['input_time'], '01')
        self.assertEqual(file[1]['id'], self.i1_2_newdoc.id)
        self.assertEqual(file[1]['docfile'], self.i1_2_docfile)
        self.assertEqual(file[1]['file_name'], self.i1_2_file_name)
        self.assertEqual(file[1]['input_time'], '02')
        self.assertEqual(file[2]['id'], self.o1_1_newdoc.id)
        self.assertEqual(file[2]['docfile'], self.o1_1_docfile)
        self.assertEqual(file[2]['file_name'], self.o1_1_file_name)
        self.assertEqual(file[2]['input_time'], '01')
        self.assertEqual(file[3]['id'], self.o1_2_newdoc.id)
        self.assertEqual(file[3]['docfile'], self.o1_2_docfile)
        self.assertEqual(file[3]['file_name'], self.o1_2_file_name)
        self.assertEqual(file[3]['input_time'], '02')
        self.assertEqual(file[4]['id'], self.out_newdoc.id)
        self.assertEqual(file[4]['docfile'], self.out_docfile)
        self.assertEqual(file[4]['file_name'], self.out_file_name)
        self.assertEqual(file[4]['input_time'], '01')
        self.assertEqual(file[5]['id'], self.out_newdoc.id + 1)
        self.assertEqual(file[5]['docfile'], settings.PUBLIC_USERS_PREFIX + '/' + self.username1 + '/name')
        self.assertEqual(file[5]['file_name'], 'name')
        self.assertEqual(file[5]['input_time'], '')
        views.insert({'i1_1_file_name':'', 'i1_2_file_name':'', 'o1_1_file_name':'', 'o1_2_file_name':'', 'name':'name2', 'k':3, 'genome_length':0, 'insert_size_mean_inward':0.0, 'insert_size_std_dev_inward':0.0, 'insert_size_mean_outward':0.0, 'insert_size_std_dev_outward':0.0, 'quality_threshold':0, 'bfcounter_threshold':0, 'single_edge_counter_threshold':0, 'paired_reads_pet_threshold_from':0, 'paired_reads_pet_threshold_to':0, 'paired_reads_mp_threshold_from':0, 'paired_reads_mp_threshold_to':0, 'paired_reads_algorithm':'0', 'input_time':'1', 'output_time':'2', 'correct':'false', 'result_notification':'false', 'mail_address':'user1_mail_address'}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        self.assertEqual(Document.objects.all().count(), 7)
        actual_assembly_task = AssemblyTask.objects.filter(name='name').values()
        task = AssemblyTask.objects.all().values()
        self.assertEqual(task[0]['id'], actual_assembly_task[0]['id'])
        self.assertEqual(task[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(task[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(task[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(task[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(task[0]['output_file_id'], self.out_newdoc.id + 1)
        self.assertEqual(task[0]['name'], 'name')
        self.assertEqual(task[0]['k'], 3)
        self.assertEqual(task[0]['genome_length'], 0)
        self.assertEqual(task[0]['insert_size_mean_inward'], 0.0)
        self.assertEqual(task[0]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(task[0]['insert_size_mean_outward'], 0.0)
        self.assertEqual(task[0]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(task[0]['quality_threshold'], 0)
        self.assertEqual(task[0]['bfcounter_threshold'], 0)
        self.assertEqual(task[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(task[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(task[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(task[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(task[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(task[0]['paired_reads_algorithm'], '0')
        self.assertEqual(task[0]['correct'], False)
        self.assertEqual(task[0]['result_notification'], False)
        self.assertEqual(task[0]['mail_address'], 'user1_mail_address')
        self.assertEqual(len(task[0]['input_time']) > 0, True)
        self.assertEqual(task[0]['output_time'], '')
        actual_assembly_task = AssemblyTask.objects.filter(name='name2').values()
        self.assertEqual(task[1]['id'], actual_assembly_task[0]['id'])
        self.assertEqual(task[1]['i1_1_id'], None)
        self.assertEqual(task[1]['i1_2_id'], None)
        self.assertEqual(task[1]['o1_1_id'], None)
        self.assertEqual(task[1]['o1_2_id'], None)
        self.assertEqual(task[1]['output_file_id'], self.out_newdoc.id + 2)
        self.assertEqual(task[1]['name'], 'name2')
        self.assertEqual(task[1]['k'], 3)
        self.assertEqual(task[1]['genome_length'], 0)
        self.assertEqual(task[1]['insert_size_mean_inward'], 0.0)
        self.assertEqual(task[1]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(task[1]['insert_size_mean_outward'], 0.0)
        self.assertEqual(task[1]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(task[1]['quality_threshold'], 0)
        self.assertEqual(task[1]['bfcounter_threshold'], 0)
        self.assertEqual(task[1]['single_edge_counter_threshold'], 0)
        self.assertEqual(task[1]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(task[1]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(task[1]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(task[1]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(task[1]['paired_reads_algorithm'], '0')
        self.assertEqual(task[1]['result_notification'], False)
        self.assertEqual(task[1]['mail_address'], 'user1_mail_address')
        self.assertEqual(task[1]['correct'], False)
        self.assertEqual(len(task[0]['input_time']) > 0, True)
        self.assertEqual(task[0]['output_time'], '')
        file = Document.objects.all().values()
        self.assertEqual(file[0]['id'], self.i1_1_newdoc.id)
        self.assertEqual(file[0]['docfile'], self.i1_1_docfile)
        self.assertEqual(file[0]['file_name'], self.i1_1_file_name)
        self.assertEqual(file[0]['input_time'], '01')
        self.assertEqual(file[1]['id'], self.i1_2_newdoc.id)
        self.assertEqual(file[1]['docfile'], self.i1_2_docfile)
        self.assertEqual(file[1]['file_name'], self.i1_2_file_name)
        self.assertEqual(file[1]['input_time'], '02')
        self.assertEqual(file[2]['id'], self.o1_1_newdoc.id)
        self.assertEqual(file[2]['docfile'], self.o1_1_docfile)
        self.assertEqual(file[2]['file_name'], self.o1_1_file_name)
        self.assertEqual(file[2]['input_time'], '01')
        self.assertEqual(file[3]['id'], self.o1_2_newdoc.id)
        self.assertEqual(file[3]['docfile'], self.o1_2_docfile)
        self.assertEqual(file[3]['file_name'], self.o1_2_file_name)
        self.assertEqual(file[3]['input_time'], '02')
        self.assertEqual(file[4]['id'], self.out_newdoc.id)
        self.assertEqual(file[4]['docfile'], self.out_docfile)
        self.assertEqual(file[4]['file_name'], self.out_file_name)
        self.assertEqual(file[4]['input_time'], '01')
        self.assertEqual(file[5]['id'], self.out_newdoc.id + 1)
        self.assertEqual(file[5]['docfile'], settings.PUBLIC_USERS_PREFIX + '/' + self.username1 + '/name')
        self.assertEqual(file[5]['file_name'], 'name')
        self.assertEqual(file[5]['input_time'], '')
        self.assertEqual(file[6]['id'], self.out_newdoc.id + 2)
        self.assertEqual(file[6]['docfile'], settings.PUBLIC_USERS_PREFIX + '/' + self.username1 + '/name2')
        self.assertEqual(file[6]['file_name'], 'name2')
        self.assertEqual(file[6]['input_time'], '')

    def test_02_delete(self):
        """delete sth from a database"""
        self.assertEqual(AssemblyTask.objects.all().count(), 0)
        views.delete({'id':0}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 0)
        task1 = AssemblyTask.objects.create(user_id=self.user1.id, name='name', i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, k=5, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='1', output_time='2', correct=True, result_notification=True, mail_address="mail_address_1")
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        task2 = AssemblyTask.objects.create(user_id=self.user1.id, name='name2', i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, k=2, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='2', output_time='2', correct=True, result_notification=True, mail_address="mail_address_1")
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        tasks = AssemblyTask.objects.all().values()
        self.assertEqual(tasks[0]['id'], task1.id)
        self.assertEqual(tasks[1]['id'], task2.id)
        views.delete({'id':7}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        views.delete({'id':task1.id}, self.user2)
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        views.delete({'id':task1.id}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        tasks = AssemblyTask.objects.all().values()
        self.assertEqual(tasks[0]['id'], task2.id)
        views.delete({'id':task2.id}, self.admin_user)
        self.assertEqual(AssemblyTask.objects.all().count(), 0)

    def test_03_get_user_assembly_tasks(self):
        """get all assembly tasks for specified user from a database"""
        tasks = views.get_user_assembly_tasks({}, self.user1)
        self.assertEqual(len(tasks), 0)
        AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name7', k=7, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address="mail_address")
        task = AssemblyTask.objects.filter(name='name7')
        tasks = views.get_user_assembly_tasks({}, self.user1)
        self.assertEqual(len(tasks), 1)
        self.assertEqual(tasks[0]['id'], task.values('id')[0]['id'])
        self.assertEqual(tasks[0]['i1_1_file_name'], 'i1_1_file_name')
        self.assertEqual(tasks[0]['i1_2_file_name'], 'i1_2_file_name')
        self.assertEqual(tasks[0]['o1_1_file_name'], 'o1_1_file_name')
        self.assertEqual(tasks[0]['o1_2_file_name'], 'o1_2_file_name')
        self.assertEqual(tasks[0]['name'], 'name7')
        self.assertEqual(tasks[0]['k'], 7)
        self.assertEqual(tasks[0]['genome_length'], 1)
        self.assertEqual(tasks[0]['quality_threshold'], 0)
        self.assertEqual(tasks[0]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[0]['correct'], True)
        self.assertEqual(tasks[0]['progress'], 1.0)

    def test_04_get_all_assembly_tasks(self):
        """get all assembly tasks for all users from a database"""
        tasks = views.get_all_assembly_tasks({}, self.user1)
        self.assertEqual(len(tasks), 0)
        tasks = views.get_all_assembly_tasks({}, self.admin_user)
        self.assertEqual(len(tasks), 0)
        AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name7', k=7, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address="mail_address")
        task = AssemblyTask.objects.filter(name='name7')
        tasks = views.get_all_assembly_tasks({}, self.user1)
        self.assertEqual(len(tasks), 0)
        tasks = views.get_all_assembly_tasks({}, self.admin_user)
        self.assertEqual(len(tasks), 1)
        self.assertEqual(tasks[0]['id'], task.values('id')[0]['id'])
        self.assertEqual(tasks[0]['i1_1_file_name'], 'i1_1_file_name')
        self.assertEqual(tasks[0]['i1_2_file_name'], 'i1_2_file_name')
        self.assertEqual(tasks[0]['o1_1_file_name'], 'o1_1_file_name')
        self.assertEqual(tasks[0]['o1_2_file_name'], 'o1_2_file_name')
        self.assertEqual(tasks[0]['name'], 'name7')
        self.assertEqual(tasks[0]['k'], 7)
        self.assertEqual(tasks[0]['genome_length'], 1)
        self.assertEqual(tasks[0]['quality_threshold'], 0)
        self.assertEqual(tasks[0]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[0]['correct'], True)
        self.assertEqual(tasks[0]['progress'], 1.0)
        self.assertEqual(tasks[0]['owner'], self.username1)

    def test_05_update(self):
        """update assembly task"""
        task1 = AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name=self.out_file_name, k=3, genome_length=0, insert_size_mean_inward=0.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=0.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='2', output_time='2', correct=True, result_notification=True, mail_address="mail_address_for_task_1")
        task2 = AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name=self.out_file_name, k=2, genome_length=0, insert_size_mean_inward=0.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=0.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='2', output_time='2', correct=True, result_notification=True, mail_address="mail_address_for_task_2")
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        tasks = AssemblyTask.objects.all().values()
        self.assertEqual(tasks[0]['user_id'], self.user1.id)
        self.assertEqual(tasks[0]['id'], task1.id)
        self.assertEqual(tasks[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(tasks[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(tasks[0]['name'], self.out_file_name)
        self.assertEqual(tasks[0]['k'], 3)
        self.assertEqual(tasks[0]['genome_length'], 0)
        self.assertEqual(tasks[0]['insert_size_mean_inward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_mean_outward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(tasks[0]['quality_threshold'], 0)
        self.assertEqual(tasks[0]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[0]['correct'], True)
        self.assertEqual(tasks[0]['result_notification'], True)
        self.assertEqual(tasks[0]['mail_address'], 'mail_address_for_task_1')
        self.assertEqual(tasks[0]['input_time'], '2')
        self.assertEqual(tasks[0]['output_time'], '2')
        self.assertEqual(tasks[1]['user_id'], self.user1.id)
        self.assertEqual(tasks[1]['id'], task2.id)
        self.assertEqual(tasks[1]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[1]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(tasks[1]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[1]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(tasks[1]['name'], self.out_file_name)
        self.assertEqual(tasks[1]['k'], 2)
        self.assertEqual(tasks[1]['genome_length'], 0)
        self.assertEqual(tasks[1]['insert_size_mean_inward'], 0.0)
        self.assertEqual(tasks[1]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(tasks[1]['insert_size_mean_outward'], 0.0)
        self.assertEqual(tasks[1]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(tasks[1]['quality_threshold'], 0)
        self.assertEqual(tasks[1]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[1]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[1]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[1]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[1]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[1]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[1]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[1]['correct'], True)
        self.assertEqual(tasks[1]['result_notification'], True)
        self.assertEqual(tasks[1]['mail_address'], 'mail_address_for_task_2')
        self.assertEqual(tasks[1]['input_time'], '2')
        self.assertEqual(tasks[1]['output_time'], '2')
        self.assertEqual(Document.objects.all().count(), 5)
        file = Document.objects.all().order_by('id').values()
        self.assertEqual(file[0]['id'], self.i1_1_newdoc.id)
        self.assertEqual(file[0]['docfile'], self.i1_1_docfile)
        self.assertEqual(file[0]['file_name'], self.i1_1_file_name)
        self.assertEqual(file[0]['input_time'], '01')
        self.assertEqual(file[1]['id'], self.i1_2_newdoc.id)
        self.assertEqual(file[1]['docfile'], self.i1_2_docfile)
        self.assertEqual(file[1]['file_name'], self.i1_2_file_name)
        self.assertEqual(file[1]['input_time'], '02')
        self.assertEqual(file[2]['id'], self.o1_1_newdoc.id)
        self.assertEqual(file[2]['docfile'], self.o1_1_docfile)
        self.assertEqual(file[2]['file_name'], self.o1_1_file_name)
        self.assertEqual(file[2]['input_time'], '01')
        self.assertEqual(file[3]['id'], self.o1_2_newdoc.id)
        self.assertEqual(file[3]['docfile'], self.o1_2_docfile)
        self.assertEqual(file[3]['file_name'], self.o1_2_file_name)
        self.assertEqual(file[3]['input_time'], '02')
        self.assertEqual(file[4]['id'], self.out_newdoc.id)
        self.assertEqual(file[4]['docfile'], self.out_docfile)
        self.assertEqual(file[4]['file_name'], self.out_file_name)
        self.assertEqual(file[4]['input_time'], '01')
        views.update({'id':task2.id+1, 'i1_1_file_name':self.i1_1_file_name, 'i1_2_file_name':self.i1_2_file_name, 'o1_1_file_name':self.o1_1_file_name, 'o1_2_file_name':self.o1_2_file_name, 'name':self.out_file_name, 'k':3, 'genome_length':1, 'insert_size_mean_inward':1.0, 'insert_size_std_dev_inward':1.0, 'insert_size_mean_outward':1.0, 'insert_size_std_dev_outward':1.0, 'quality_threshold':0, 'bfcounter_threshold':0, 'single_edge_counter_threshold':0, 'paired_reads_pet_threshold_from':0, 'paired_reads_pet_threshold_to':0, 'paired_reads_mp_threshold_from':0, 'paired_reads_mp_threshold_to':0, 'paired_reads_algorithm':'0', 'input_time':'3', 'output_time':'3', 'correct':'false', 'result_notification':'false', 'mail_address':'new_mail'}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        tasks = AssemblyTask.objects.all().values()
        self.assertEqual(tasks[0]['user_id'], self.user1.id)
        self.assertEqual(tasks[0]['id'], task1.id)
        self.assertEqual(tasks[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(tasks[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(tasks[0]['name'], self.out_file_name)
        self.assertEqual(tasks[0]['k'], 3)
        self.assertEqual(tasks[0]['genome_length'], 0)
        self.assertEqual(tasks[0]['insert_size_mean_inward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_mean_outward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(tasks[0]['quality_threshold'], 0)
        self.assertEqual(tasks[0]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[0]['correct'], True)
        self.assertEqual(tasks[0]['result_notification'], True)
        self.assertEqual(tasks[0]['mail_address'], 'mail_address_for_task_1')
        self.assertEqual(tasks[0]['input_time'], '2')
        self.assertEqual(tasks[0]['output_time'], '2')
        self.assertEqual(tasks[1]['user_id'], self.user1.id)
        self.assertEqual(tasks[1]['id'], task2.id)
        self.assertEqual(tasks[1]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[1]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(tasks[1]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[1]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(tasks[1]['name'], self.out_file_name)
        self.assertEqual(tasks[1]['k'], 2)
        self.assertEqual(tasks[1]['genome_length'], 0)
        self.assertEqual(tasks[1]['insert_size_mean_inward'], 0.0)
        self.assertEqual(tasks[1]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(tasks[1]['insert_size_mean_outward'], 0.0)
        self.assertEqual(tasks[1]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(tasks[1]['quality_threshold'], 0)
        self.assertEqual(tasks[1]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[1]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[1]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[1]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[1]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[1]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[1]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[1]['correct'], True)
        self.assertEqual(tasks[1]['result_notification'], True)
        self.assertEqual(tasks[1]['mail_address'], 'mail_address_for_task_2')
        self.assertEqual(tasks[1]['input_time'], '2')
        self.assertEqual(tasks[1]['output_time'], '2')
        self.assertEqual(Document.objects.all().count(), 5)
        file = Document.objects.all().order_by('id').values()
        self.assertEqual(file[0]['id'], self.i1_1_newdoc.id)
        self.assertEqual(file[0]['docfile'], self.i1_1_docfile)
        self.assertEqual(file[0]['file_name'], self.i1_1_file_name)
        self.assertEqual(file[0]['input_time'], '01')
        self.assertEqual(file[1]['id'], self.i1_2_newdoc.id)
        self.assertEqual(file[1]['docfile'], self.i1_2_docfile)
        self.assertEqual(file[1]['file_name'], self.i1_2_file_name)
        self.assertEqual(file[1]['input_time'], '02')
        self.assertEqual(file[2]['id'], self.o1_1_newdoc.id)
        self.assertEqual(file[2]['docfile'], self.o1_1_docfile)
        self.assertEqual(file[2]['file_name'], self.o1_1_file_name)
        self.assertEqual(file[2]['input_time'], '01')
        self.assertEqual(file[3]['id'], self.o1_2_newdoc.id)
        self.assertEqual(file[3]['docfile'], self.o1_2_docfile)
        self.assertEqual(file[3]['file_name'], self.o1_2_file_name)
        self.assertEqual(file[3]['input_time'], '02')
        self.assertEqual(file[4]['id'], self.out_newdoc.id)
        self.assertEqual(file[4]['docfile'], self.out_docfile)
        self.assertEqual(file[4]['file_name'], self.out_file_name)
        self.assertEqual(file[4]['input_time'], '01')
        views.update({'id':task1.id, 'name':self.out_file_name, 'i1_1_file_name':'', 'i1_2_file_name':self.i1_1_file_name, 'o1_1_file_name':'', 'o1_2_file_name':self.o1_1_file_name, 'k':'4', 'genome_length':1, 'quality_threshold':1, 'bfcounter_threshold':1, 'single_edge_counter_threshold':1, 'paired_reads_pet_threshold_from':1, 'paired_reads_pet_threshold_to':1, 'paired_reads_mp_threshold_from':1, 'paired_reads_mp_threshold_to':1, 'paired_reads_algorithm':'1', 'insert_size_mean_inward':1.0, 'insert_size_std_dev_inward':1.0, 'insert_size_mean_outward':1.0, 'insert_size_std_dev_outward':1.0, 'input_time':'3', 'output_time':'3', 'correct':'false', 'result_notification':'false', 'mail_address':'new_mail_address_for_task_1'}, self.user1)
        self.assertEqual(AssemblyTask.objects.all().count(), 2)
        tasks = AssemblyTask.objects.all().values()
        self.assertEqual(tasks[0]['user_id'], self.user1.id)
        self.assertEqual(tasks[0]['id'], task2.id)
        self.assertEqual(tasks[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(tasks[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(tasks[0]['name'], self.out_file_name)
        self.assertEqual(tasks[0]['k'], 2)
        self.assertEqual(tasks[0]['genome_length'], 0)
        self.assertEqual(tasks[0]['insert_size_mean_inward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_inward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_mean_outward'], 0.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_outward'], 0.0)
        self.assertEqual(tasks[0]['quality_threshold'], 0)
        self.assertEqual(tasks[0]['bfcounter_threshold'], 0)
        self.assertEqual(tasks[0]['single_edge_counter_threshold'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_from'], 0)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_to'], 0)
        self.assertEqual(tasks[0]['paired_reads_algorithm'], '0')
        self.assertEqual(tasks[0]['correct'], True)
        self.assertEqual(tasks[0]['result_notification'], True)
        self.assertEqual(tasks[0]['mail_address'], 'mail_address_for_task_2')
        self.assertEqual(tasks[0]['input_time'], '2')
        self.assertEqual(tasks[0]['output_time'], '2')
        self.assertEqual(tasks[1]['user_id'], self.user1.id)
        self.assertEqual(tasks[1]['id'], task1.id)
        self.assertEqual(tasks[1]['i1_1_id'], None)
        self.assertEqual(tasks[1]['i1_2_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[1]['o1_1_id'], None)
        self.assertEqual(tasks[1]['o1_2_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[1]['name'], self.out_file_name)
        self.assertEqual(tasks[1]['k'], 4)
        self.assertEqual(tasks[1]['genome_length'], 1)
        self.assertEqual(tasks[1]['insert_size_mean_inward'], 1.0)
        self.assertEqual(tasks[1]['insert_size_std_dev_inward'], 1.0)
        self.assertEqual(tasks[1]['insert_size_mean_outward'], 1.0)
        self.assertEqual(tasks[1]['insert_size_std_dev_outward'], 1.0)
        self.assertEqual(tasks[1]['quality_threshold'], 1)
        self.assertEqual(tasks[1]['bfcounter_threshold'], 1)
        self.assertEqual(tasks[1]['single_edge_counter_threshold'], 1)
        self.assertEqual(tasks[1]['paired_reads_pet_threshold_from'], 1)
        self.assertEqual(tasks[1]['paired_reads_pet_threshold_to'], 1)
        self.assertEqual(tasks[1]['paired_reads_mp_threshold_from'], 1)
        self.assertEqual(tasks[1]['paired_reads_mp_threshold_to'], 1)
        self.assertEqual(tasks[1]['paired_reads_algorithm'], '1')
        self.assertEqual(tasks[1]['correct'], False)
        self.assertEqual(tasks[1]['result_notification'], False)
        self.assertEqual(tasks[1]['mail_address'], 'new_mail_address_for_task_1')
        self.assertEqual(len(tasks[1]['input_time']) > 0, True)
        self.assertEqual(Document.objects.all().count(), 5)
        file = Document.objects.all().order_by('id').values()
        self.assertEqual(file[0]['id'], self.i1_1_newdoc.id)
        self.assertEqual(file[0]['docfile'], self.i1_1_docfile)
        self.assertEqual(file[0]['file_name'], self.i1_1_file_name)
        self.assertEqual(file[0]['input_time'], '01')
        self.assertEqual(file[1]['id'], self.i1_2_newdoc.id)
        self.assertEqual(file[1]['docfile'], self.i1_2_docfile)
        self.assertEqual(file[1]['file_name'], self.i1_2_file_name)
        self.assertEqual(file[1]['input_time'], '02')
        self.assertEqual(file[2]['id'], self.o1_1_newdoc.id)
        self.assertEqual(file[2]['docfile'], self.o1_1_docfile)
        self.assertEqual(file[2]['file_name'], self.o1_1_file_name)
        self.assertEqual(file[2]['input_time'], '01')
        self.assertEqual(file[3]['id'], self.o1_2_newdoc.id)
        self.assertEqual(file[3]['docfile'], self.o1_2_docfile)
        self.assertEqual(file[3]['file_name'], self.o1_2_file_name)
        self.assertEqual(file[3]['input_time'], '02')
        self.assertEqual(file[4]['id'], self.out_newdoc.id)
        self.assertEqual(file[4]['docfile'], self.out_docfile)
        self.assertEqual(file[4]['file_name'], self.out_file_name)
        self.assertEqual(len(file[4]['input_time']) > 0, True)

    def test_06_delete_user_assembly_tasks(self):
        """delete user assembly tasks"""
        AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name1', k=1, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='1', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address='mail_address')
        AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name2', k=7, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='0', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address='mail_address')
        AssemblyTask.objects.create(user_id=self.user2.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name3', k=8, genome_length=8, insert_size_mean_inward=8.0, insert_size_std_dev_inward=7.0, insert_size_mean_outward=8.0, insert_size_std_dev_outward=7.0, quality_threshold='8', bfcounter_threshold='8', single_edge_counter_threshold='8', paired_reads_pet_threshold_from='8', paired_reads_pet_threshold_to='8', paired_reads_mp_threshold_from='8', paired_reads_mp_threshold_to='8', paired_reads_algorithm='1', input_time='8', output_time='8', correct=True, result_notification=True, mail_address='mail_address')
        self.assertEqual(AssemblyTask.objects.all().count(), 3)
        views.delete_user_assembly_tasks(self.user1.id)
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        tasks = AssemblyTask.objects.all().values()
        task = AssemblyTask.objects.filter(name='name3').values()
        self.assertEqual(tasks[0]['id'], task[0]['id'])
        self.assertEqual(tasks[0]['id'], task[0]['id'])
        self.assertEqual(tasks[0]['i1_1_id'], self.i1_1_newdoc.id)
        self.assertEqual(tasks[0]['i1_2_id'], self.i1_2_newdoc.id)
        self.assertEqual(tasks[0]['o1_1_id'], self.o1_1_newdoc.id)
        self.assertEqual(tasks[0]['o1_2_id'], self.o1_2_newdoc.id)
        self.assertEqual(tasks[0]['output_file_id'], self.out_newdoc.id)
        self.assertEqual(tasks[0]['name'], 'name3')
        self.assertEqual(tasks[0]['k'], 8)
        self.assertEqual(tasks[0]['genome_length'], 8)
        self.assertEqual(tasks[0]['insert_size_mean_inward'], 8.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_inward'], 7.0)
        self.assertEqual(tasks[0]['insert_size_mean_outward'], 8.0)
        self.assertEqual(tasks[0]['insert_size_std_dev_outward'], 7.0)
        self.assertEqual(tasks[0]['quality_threshold'], 8)
        self.assertEqual(tasks[0]['bfcounter_threshold'], 8)
        self.assertEqual(tasks[0]['single_edge_counter_threshold'], 8)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_from'], 8)
        self.assertEqual(tasks[0]['paired_reads_pet_threshold_to'], 8)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_from'], 8)
        self.assertEqual(tasks[0]['paired_reads_mp_threshold_to'], 8)
        self.assertEqual(tasks[0]['paired_reads_algorithm'], '1')
        self.assertEqual(tasks[0]['input_time'], '8')
        self.assertEqual(tasks[0]['correct'], True)
        self.assertEqual(tasks[0]['result_notification'], True)
        self.assertEqual(tasks[0]['mail_address'], 'mail_address')
        self.assertEqual(tasks[0]['output_time'], '8')

    def test_07_is_file_used(self):
        """check if file is used"""
        AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name1', k=1, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='1', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address='mail_address')
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        self.assertEqual(views.is_file_used(self.i1_1_newdoc.id), True)
        self.assertEqual(views.is_file_used(self.i1_2_newdoc.id), True)
        self.assertEqual(views.is_file_used(self.o1_1_newdoc.id), True)
        self.assertEqual(views.is_file_used(self.o1_2_newdoc.id), True)
        self.assertEqual(views.is_file_used(self.out_newdoc.id), False)

    def test_08_get_assembly_task_docfile(self):
        """get output docfile and file name for assembly task"""
        assembly_task = AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name1', k=1, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='1', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address='mail_address')
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        result = views.get_assembly_task_docfile({'id' : str(assembly_task.id)}, self.user1)
        self.assertEqual(result['docfile'], self.out_docfile)
        self.assertEqual(result['file_name'], self.out_file_name)
        result = views.get_assembly_task_docfile({'id' : str(assembly_task.id)}, self.admin_user)
        self.assertEqual(result['docfile'], self.out_docfile)
        self.assertEqual(result['file_name'], self.out_file_name)
        result = views.get_assembly_task_docfile({'id' : str(assembly_task.id + 10)}, self.user1)
        self.assertEqual(len(result), 0)
        Document.objects.all().delete()
        result = views.get_assembly_task_docfile({'id' : str(assembly_task.id)}, self.user1)
        self.assertEqual(len(result), 0)

    def test_09_break_assembly_task(self):
        """break assembly task"""
        input_seq = '>seq\nAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAAAATTAAAACAGAAAAATACCAAAAAAATAAAAATGAAAAACCAAAAAAAAATGAAAAATAGACCAAATAAAAAAAA\n'
        assembly_task = AssemblyTask.objects.create(user_id=self.user1.id, i1_1_id=self.i1_1_newdoc.id, i1_2_id=self.i1_2_newdoc.id, o1_1_id=self.o1_1_newdoc.id, o1_2_id=self.o1_2_newdoc.id, output_file_id=self.out_newdoc.id, name='name1', k=1, genome_length=1, insert_size_mean_inward=1.0, insert_size_std_dev_inward=0.0, insert_size_mean_outward=1.0, insert_size_std_dev_outward=0.0, quality_threshold='1', bfcounter_threshold='0', single_edge_counter_threshold='0', paired_reads_pet_threshold_from='0', paired_reads_pet_threshold_to='0', paired_reads_mp_threshold_from='0', paired_reads_mp_threshold_to='0', paired_reads_algorithm='0', input_time='7', output_time='7', correct=True, result_notification=True, mail_address='mail_address')
        cmdmgr = dnaasmpy.CommandManager()
        cmdmgr.clearHistory()
        params = {'paired_reads_algorithm': '1',
                  'i1_1': input_seq + input_seq + input_seq + input_seq + input_seq + input_seq + input_seq + input_seq,
                  'i1_2': input_seq + input_seq + input_seq + input_seq + input_seq + input_seq + input_seq + input_seq,
                  'o1_1': '',
                  'o1_2': '',
                  'k': '3',
                  'genome_length': '7',
                  'insert_size_mean_inward': '40',
                  'insert_size_std_dev_inward': '0',
                  'insert_size_mean_outward': '0',
                  'insert_size_std_dev_outward': '0',
                  'quality_threshold': '0',
                  'bfcounter_threshold': '0',
                  'single_edge_counter_threshold': '0',
                  'paired_reads_pet_threshold_from': '0',
                  'paired_reads_pet_threshold_to': '0',
                  'paired_reads_mp_threshold_from': '0',
                  'paired_reads_mp_threshold_to': '0',
                  'correct': 'true',
                  'output_file_name': 'test'}
        assembly_cmd_id = cmdmgr.startAssembly(assembly_task.id, params)
        views.break_assembly_task({'id' : assembly_task.id}, self.user1)
        for _ in range(100):
            time.sleep(0.1)
            if cmdmgr.getState(assembly_cmd_id) == dnaasmpy.INTERRUPTED:
                break
        self.assertEqual(cmdmgr.getState(assembly_cmd_id), dnaasmpy.INTERRUPTED)
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
        assembly_cmd_id_2 = cmdmgr.startAssembly(assembly_task.id, params)
        views.break_assembly_task({'id' : assembly_task.id,}, self.user2)
        for _ in range(100):
            time.sleep(0.1)
            if cmdmgr.getState(assembly_cmd_id_2) == dnaasmpy.DONE:
                break
        self.assertEqual(cmdmgr.getState(assembly_cmd_id), dnaasmpy.INTERRUPTED)
        self.assertEqual(cmdmgr.getState(assembly_cmd_id_2), dnaasmpy.DONE)
        self.assertEqual(AssemblyTask.objects.all().count(), 1)
